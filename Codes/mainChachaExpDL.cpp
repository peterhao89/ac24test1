#pragma once
#include "basics.h"
#include <fstream>
#include <string>
//#include<windows.h>
#include<omp.h>
#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;
//NTL_CLIENT

typedef uint32_t TYPE;
uint64_t p = 0x100000000;
//uint32_t p = 0x7fffffff;
random_device rd;
mt19937 gen(rd());
uniform_int_distribution<> dis(0, p - 1);
const TYPE constants[] = { 0x61707865, 0x3320646e, 0x79622d32, 0x6b206574 };
const std::vector<std::vector<int>> chachaRotate = { {16,12},{8,7} };

struct nextOrPreDiffNode
{
	uint32_t diffVal[16];
	double prob;
};
nextOrPreDiffNode all32NextDiffR2[32] = { {{0,0x10000000,0,0,0,0x80800808,0,0,0,0x1010010,0,0,0,0x1000010,0,0}, 5},
{{0,0x20000000,0,0,0,0x1001011,0,0,0,0x2020020,0,0,0,0x2000020,0,0}, 5},
{{0,0x40000000,0,0,0,0x2002022,0,0,0,0x4040040,0,0,0,0x4000040,0,0}, 5},
{{0,0x80000000,0,0,0,0x4004044,0,0,0,0x8080080,0,0,0,0x8000080,0,0}, 4},
{{0,0x1,0,0,0,0x8008088,0,0,0,0x10100100,0,0,0,0x10000100,0,0}, 5},
{{0,0x2,0,0,0,0x10010110,0,0,0,0x20200200,0,0,0,0x20000200,0,0}, 5},
{{0,0x4,0,0,0,0x20020220,0,0,0,0x40400400,0,0,0,0x40000400,0,0}, 5},
{{0,0x8,0,0,0,0x40040440,0,0,0,0x80800800,0,0,0,0x80000800,0,0}, 4},
{{0,0x10,0,0,0,0x80080880,0,0,0,0x1001001,0,0,0,0x1001,0,0}, 5},
{{0,0x20,0,0,0,0x101101,0,0,0,0x2002002,0,0,0,0x2002,0,0}, 5},
{{0,0x40,0,0,0,0x202202,0,0,0,0x4004004,0,0,0,0x4004,0,0}, 5},
{{0,0x80,0,0,0,0x404404,0,0,0,0x8008008,0,0,0,0x8008,0,0}, 5},
{{0,0x100,0,0,0,0x808808,0,0,0,0x10010010,0,0,0,0x10010,0,0}, 5},
{{0,0x200,0,0,0,0x1011010,0,0,0,0x20020020,0,0,0,0x20020,0,0}, 5},
{{0,0x400,0,0,0,0x2022020,0,0,0,0x40040040,0,0,0,0x40040,0,0}, 5},
{{0,0x800,0,0,0,0x4044040,0,0,0,0x80080080,0,0,0,0x80080,0,0}, 3},
{{0,0x1000,0,0,0,0x8088080,0,0,0,0x100101,0,0,0,0x100100,0,0}, 5},
{{0,0x2000,0,0,0,0x10110100,0,0,0,0x200202,0,0,0,0x200200,0,0}, 5},
{{0,0x4000,0,0,0,0x20220200,0,0,0,0x400404,0,0,0,0x400400,0,0}, 5},
{{0,0x8000,0,0,0,0x40440400,0,0,0,0x800808,0,0,0,0x800800,0,0}, 5},
{{0,0x10000,0,0,0,0x80880800,0,0,0,0x1001010,0,0,0,0x1001000,0,0}, 5},
{{0,0x20000,0,0,0,0x1101001,0,0,0,0x2002020,0,0,0,0x2002000,0,0}, 5},
{{0,0x40000,0,0,0,0x2202002,0,0,0,0x4004040,0,0,0,0x4004000,0,0}, 5},
{{0,0x80000,0,0,0,0x4404004,0,0,0,0x8008080,0,0,0,0x8008000,0,0}, 5},
{{0,0x100000,0,0,0,0x8808008,0,0,0,0x10010100,0,0,0,0x10010000,0,0}, 5},
{{0,0x200000,0,0,0,0x11010010,0,0,0,0x20020200,0,0,0,0x20020000,0,0}, 5},
{{0,0x400000,0,0,0,0x22020020,0,0,0,0x40040400,0,0,0,0x40040000,0,0}, 5},
{{0,0x800000,0,0,0,0x44040040,0,0,0,0x80080800,0,0,0,0x80080000,0,0}, 4},
{{0,0x1000000,0,0,0,0x88080080,0,0,0,0x101001,0,0,0,0x100001,0,0}, 5},
{{0,0x2000000,0,0,0,0x10100101,0,0,0,0x202002,0,0,0,0x200002,0,0}, 5},
{{0,0x4000000,0,0,0,0x20200202,0,0,0,0x404004,0,0,0,0x400004,0,0}, 5},
{{0,0x8000000,0,0,0,0x40400404,0,0,0,0x808008,0,0,0,0x800008,0,0}, 5} };
nextOrPreDiffNode all4PreMaskR6[4] = { {{1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0}, 0},
{{0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0}, 0},
{{0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0}, 0},
{{0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0}, 0} };
nextOrPreDiffNode prePreMaskR6_pos0to3[4 * 4] = {
{ {0x19,0,0,0,0,0x100011,0,0,0,0,0x180000,0,0,0,0,0x10},2},
{ {0x11,0,0,0,0,0x100011,0,0,0,0,0x100000,0,0,0,0,0x18},2},
{ {0x11,0,0,0,0,0x100019,0,0,0,0,0x180000,0,0,0,0,0x10},2},
{ {0x19,0,0,0,0,0x100019,0,0,0,0,0x100000,0,0,0,0,0x18},2},
{ {0,0x19,0,0,0,0,0x100011,0,0,0,0,0x180000,0x10,0,0,0},2},
{ {0,0x11,0,0,0,0,0x100019,0,0,0,0,0x180000,0x10,0,0,0},2},
{ {0,0x11,0,0,0,0,0x100011,0,0,0,0,0x100000,0x18,0,0,0},2},
{ {0,0x19,0,0,0,0,0x100019,0,0,0,0,0x100000,0x18,0,0,0},2},
{ {0,0,0x19,0,0,0,0,0x100011,0x180000,0,0,0,0,0x10,0,0},2},
{ {0,0,0x11,0,0,0,0,0x100019,0x180000,0,0,0,0,0x10,0,0},2},
{ {0,0,0x11,0,0,0,0,0x100011,0x100000,0,0,0,0,0x18,0,0},2},
{ {0,0,0x19,0,0,0,0,0x100019,0x100000,0,0,0,0,0x18,0,0},2},
{ {0,0,0,0x19,0x100011,0,0,0,0,0x180000,0,0,0,0,0x10,0},2},
{ {0,0,0,0x11,0x100019,0,0,0,0,0x180000,0,0,0,0,0x10,0},2},
{ {0,0,0,0x19,0x100019,0,0,0,0,0x100000,0,0,0,0,0x18,0},2},
{ {0,0,0,0x11,0x100011,0,0,0,0,0x100000,0,0,0,0,0x18,0},2} };
nextOrPreDiffNode prePreMaskR6_pos8to11[64 * 4] = {
{ {0,0,0x11018180,0,0,0,0,0x11011100,0x1001,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11818180,0,0,0,0,0x11011900,0x1801,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11818180,0,0,0,0,0x11811100,0x1001,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11018100,0,0,0,0,0x11011180,0x1001,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11010180,0,0,0,0,0x11019100,0x1001,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11810180,0,0,0,0,0x11019900,0x1801,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11010180,0,0,0,0,0x11819900,0x1801,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11810180,0,0,0,0,0x11819100,0x1001,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x19010180,0,0,0,0,0x19819900,0x1801,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11818180,0,0,0,0,0x19811100,0x1801,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x11010100,0,0,0,0,0x11019180,0x1001,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11010180,0,0,0,0,0x19019100,0x1801,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x11018180,0,0,0,0,0x19011100,0x1801,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19010100,0,0,0,0,0x19019180,0x1001,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11810180,0,0,0,0,0x19019900,0x1001,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19810180,0,0,0,0,0x19019900,0x1801,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11018100,0,0,0,0,0x19011180,0x1801,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x11810100,0,0,0,0,0x19019980,0x1001,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19810100,0,0,0,0,0x19819180,0x1001,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11010100,0,0,0,0,0x11819980,0x1801,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11818100,0,0,0,0,0x19811180,0x1801,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19818100,0,0,0,0,0x11811180,0x1801,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19018100,0,0,0,0,0x11011180,0x1801,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x11818100,0,0,0,0,0x19011980,0x1001,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19818100,0,0,0,0,0x11011980,0x1001,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19818180,0,0,0,0,0x11811100,0x1801,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x11018100,0,0,0,0,0x11811980,0x1801,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x19810180,0,0,0,0,0x19819100,0x1001,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11810100,0,0,0,0,0x11019980,0x1801,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x19010100,0,0,0,0,0x19819980,0x1801,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x19018100,0,0,0,0,0x19811980,0x1801,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x19018100,0,0,0,0,0x19011180,0x1001,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x19018180,0,0,0,0,0x19811900,0x1801,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x19818100,0,0,0,0,0x19811180,0x1001,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11010100,0,0,0,0,0x19019180,0x1801,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x11810100,0,0,0,0,0x19819180,0x1801,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19010100,0,0,0,0,0x11019180,0x1801,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19810100,0,0,0,0,0x11819180,0x1801,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19010180,0,0,0,0,0x19019100,0x1001,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x19018180,0,0,0,0,0x19011100,0x1001,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11818180,0,0,0,0,0x19011900,0x1001,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19818180,0,0,0,0,0x11011900,0x1001,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x11810100,0,0,0,0,0x11819180,0x1001,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11818100,0,0,0,0,0x11811180,0x1001,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x19018180,0,0,0,0,0x11011100,0x1801,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x11818100,0,0,0,0,0x11011980,0x1801,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x19810100,0,0,0,0,0x11019980,0x1001,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19818180,0,0,0,0,0x19011900,0x1801,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x19818100,0,0,0,0,0x19011980,0x1801,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11018180,0,0,0,0,0x11811900,0x1801,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x19810100,0,0,0,0,0x19019980,0x1801,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x19010180,0,0,0,0,0x11019100,0x1801,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19810180,0,0,0,0,0x11019900,0x1001,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19818180,0,0,0,0,0x19811100,0x1001,0,0,0,0,0x18010100,0,0}, 6},
{ {0,0,0x11810180,0,0,0,0,0x19819100,0x1801,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19810180,0,0,0,0,0x11819100,0x1801,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x11010180,0,0,0,0,0x19819900,0x1001,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x11010100,0,0,0,0,0x19819980,0x1001,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x11018100,0,0,0,0,0x19811980,0x1001,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x11018180,0,0,0,0,0x19811900,0x1001,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19018100,0,0,0,0,0x11811980,0x1001,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19010100,0,0,0,0,0x11819980,0x1001,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19010180,0,0,0,0,0x11819900,0x1001,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0x19018180,0,0,0,0,0x11811900,0x1001,0,0,0,0,0x10010100,0,0}, 6},
{ {0,0,0,0x11018180,0x11011100,0,0,0,0,0x1001,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19818180,0x11011900,0,0,0,0,0x1001,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x19018180,0x11011100,0,0,0,0,0x1801,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x19018180,0x11811900,0,0,0,0,0x1001,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x19018100,0x11811980,0,0,0,0,0x1001,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x19010100,0x11819980,0,0,0,0,0x1001,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11018100,0x11811980,0,0,0,0,0x1801,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19818100,0x11011980,0,0,0,0,0x1001,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11010180,0x11019100,0,0,0,0,0x1001,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x11018180,0x19811900,0,0,0,0,0x1001,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11818180,0x19811100,0,0,0,0,0x1801,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11818180,0x19011900,0,0,0,0,0x1001,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11018180,0x11811900,0,0,0,0,0x1801,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19018100,0x11011180,0,0,0,0,0x1801,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11818100,0x11811180,0,0,0,0,0x1001,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x11818180,0x11811100,0,0,0,0,0x1001,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x11018100,0x19011180,0,0,0,0,0x1801,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11018100,0x19811980,0,0,0,0,0x1001,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11010100,0x11819980,0,0,0,0,0x1801,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x11010180,0x11819900,0,0,0,0,0x1801,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x11810180,0x11819100,0,0,0,0,0x1001,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x11818100,0x19011980,0,0,0,0,0x1001,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11010100,0x19819980,0,0,0,0,0x1001,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11810100,0x19019980,0,0,0,0,0x1001,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11018180,0x19011100,0,0,0,0,0x1801,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11010180,0x19019100,0,0,0,0,0x1801,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11810180,0x19819100,0,0,0,0,0x1801,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11018100,0x11011180,0,0,0,0,0x1001,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x11010100,0x11019180,0,0,0,0,0x1001,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19810180,0x19819100,0,0,0,0,0x1001,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19018180,0x19011100,0,0,0,0,0x1001,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19010180,0x19819900,0,0,0,0,0x1801,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19010180,0x11819900,0,0,0,0,0x1001,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x19818180,0x11811100,0,0,0,0,0x1801,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x19810180,0x11819100,0,0,0,0,0x1801,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x19010180,0x11019100,0,0,0,0,0x1801,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11818180,0x11011900,0,0,0,0,0x1801,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19818180,0x19011900,0,0,0,0,0x1801,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x11810180,0x11019900,0,0,0,0,0x1801,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19810180,0x19019900,0,0,0,0,0x1801,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x11810100,0x11019980,0,0,0,0,0x1801,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19810180,0x11019900,0,0,0,0,0x1001,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11818100,0x19811180,0,0,0,0,0x1801,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x19810100,0x11019980,0,0,0,0,0x1001,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x19010100,0x19819980,0,0,0,0,0x1801,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19810100,0x19019980,0,0,0,0,0x1801,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19010100,0x19019180,0,0,0,0,0x1001,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19018180,0x19811900,0,0,0,0,0x1801,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x11810100,0x19819180,0,0,0,0,0x1801,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x19010180,0x19019100,0,0,0,0,0x1001,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19018100,0x19811980,0,0,0,0,0x1801,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19818100,0x19011980,0,0,0,0,0x1801,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x11818100,0x11011980,0,0,0,0,0x1801,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19018100,0x19011180,0,0,0,0,0x1001,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x11010100,0x19019180,0,0,0,0,0x1801,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11010180,0x19819900,0,0,0,0,0x1001,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11810180,0x19019900,0,0,0,0,0x1001,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x11810100,0x11819180,0,0,0,0,0x1001,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19810100,0x19819180,0,0,0,0,0x1001,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19818180,0x19811100,0,0,0,0,0x1001,0,0,0,0,0x18010100,0}, 6},
{ {0,0,0,0x19010100,0x11019180,0,0,0,0,0x1801,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x19818100,0x11811180,0,0,0,0,0x1801,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x19810100,0x11819180,0,0,0,0,0x1801,0,0,0,0,0x10010100,0}, 6},
{ {0,0,0,0x19818100,0x19811180,0,0,0,0,0x1001,0,0,0,0,0x18010100,0}, 6},
{ {0x19018180,0,0,0,0,0x11011100,0,0,0,0,0x1801,0,0,0,0,0x10010100}, 6},
{ {0x19818180,0,0,0,0,0x11811100,0,0,0,0,0x1801,0,0,0,0,0x10010100}, 6},
{ {0x19010180,0,0,0,0,0x11019100,0,0,0,0,0x1801,0,0,0,0,0x10010100}, 6},
{ {0x19018100,0,0,0,0,0x11011180,0,0,0,0,0x1801,0,0,0,0,0x10010100}, 6},
{ {0x19018180,0,0,0,0,0x11811900,0,0,0,0,0x1001,0,0,0,0,0x10010100}, 6},
{ {0x19818180,0,0,0,0,0x11011900,0,0,0,0,0x1001,0,0,0,0,0x10010100}, 6},
{ {0x11010180,0,0,0,0,0x19019100,0,0,0,0,0x1801,0,0,0,0,0x10010100}, 6},
{ {0x11818180,0,0,0,0,0x11811100,0,0,0,0,0x1001,0,0,0,0,0x18010100}, 6},
{ {0x11018180,0,0,0,0,0x11011100,0,0,0,0,0x1001,0,0,0,0,0x18010100}, 6},
{ {0x11810180,0,0,0,0,0x11819100,0,0,0,0,0x1001,0,0,0,0,0x18010100}, 6},
{ {0x19818100,0,0,0,0,0x11811180,0,0,0,0,0x1801,0,0,0,0,0x10010100}, 6},
{ {0x11010100,0,0,0,0,0x11019180,0,0,0,0,0x1001,0,0,0,0,0x18010100}, 6},
{ {0x11818100,0,0,0,0,0x11811180,0,0,0,0,0x1001,0,0,0,0,0x18010100}, 6},
{ {0x19018100,0,0,0,0,0x11811980,0,0,0,0,0x1001,0,0,0,0,0x10010100}, 6},
{ {0x19010100,0,0,0,0,0x19819980,0,0,0,0,0x1801,0,0,0,0,0x18010100}, 6},
{ {0x19010100,0,0,0,0,0x11019180,0,0,0,0,0x1801,0,0,0,0,0x10010100}, 6},
{ {0x11818180,0,0,0,0,0x11011900,0,0,0,0,0x1801,0,0,0,0,0x18010100}, 6},
{ {0x11818180,0,0,0,0,0x19811100,0,0,0,0,0x1801,0,0,0,0,0x10010100}, 6},
{ {0x11818100,0,0,0,0,0x11011980,0,0,0,0,0x1801,0,0,0,0,0x18010100}, 6},
{ {0x11018180,0,0,0,0,0x11811900,0,0,0,0,0x1801,0,0,0,0,0x18010100}, 6},
{ {0x11810100,0,0,0,0,0x11819180,0,0,0,0,0x1001,0,0,0,0,0x18010100}, 6},
{ {0x11818180,0,0,0,0,0x19011900,0,0,0,0,0x1001,0,0,0,0,0x10010100}, 6},
{ {0x19810180,0,0,0,0,0x11819100,0,0,0,0,0x1801,0,0,0,0,0x10010100}, 6},
{ {0x19810100,0,0,0,0,0x11819180,0,0,0,0,0x1801,0,0,0,0,0x10010100}, 6},
{ {0x11018100,0,0,0,0,0x11811980,0,0,0,0,0x1801,0,0,0,0,0x18010100}, 6},
{ {0x11818100,0,0,0,0,0x19011980,0,0,0,0,0x1001,0,0,0,0,0x10010100}, 6},
{ {0x19018100,0,0,0,0,0x19811980,0,0,0,0,0x1801,0,0,0,0,0x18010100}, 6},
{ {0x11010100,0,0,0,0,0x11819980,0,0,0,0,0x1801,0,0,0,0,0x18010100}, 6},
{ {0x11810100,0,0,0,0,0x19019980,0,0,0,0,0x1001,0,0,0,0,0x10010100}, 6},
{ {0x11010100,0,0,0,0,0x19819980,0,0,0,0,0x1001,0,0,0,0,0x10010100}, 6},
{ {0x11810100,0,0,0,0,0x11019980,0,0,0,0,0x1801,0,0,0,0,0x18010100}, 6},
{ {0x11010180,0,0,0,0,0x11819900,0,0,0,0,0x1801,0,0,0,0,0x18010100}, 6},
{ {0x11018180,0,0,0,0,0x19011100,0,0,0,0,0x1801,0,0,0,0,0x10010100}, 6},
{ {0x19810100,0,0,0,0,0x19019980,0,0,0,0,0x1801,0,0,0,0,0x18010100}, 6},
{ {0x11018100,0,0,0,0,0x19811980,0,0,0,0,0x1001,0,0,0,0,0x10010100}, 6},
{ {0x11018180,0,0,0,0,0x19811900,0,0,0,0,0x1001,0,0,0,0,0x10010100}, 6},
{ {0x11010180,0,0,0,0,0x19819900,0,0,0,0,0x1001,0,0,0,0,0x10010100}, 6},
{ {0x19810100,0,0,0,0,0x19819180,0,0,0,0,0x1001,0,0,0,0,0x18010100}, 6},
{ {0x19818180,0,0,0,0,0x19011900,0,0,0,0,0x1801,0,0,0,0,0x18010100}, 6},
{ {0x19818100,0,0,0,0,0x19811180,0,0,0,0,0x1001,0,0,0,0,0x18010100}, 6},
{ {0x19010180,0,0,0,0,0x19819900,0,0,0,0,0x1801,0,0,0,0,0x18010100}, 6},
{ {0x11810180,0,0,0,0,0x19819100,0,0,0,0,0x1801,0,0,0,0,0x10010100}, 6},
{ {0x11810100,0,0,0,0,0x19819180,0,0,0,0,0x1801,0,0,0,0,0x10010100}, 6},
{ {0x19018180,0,0,0,0,0x19811900,0,0,0,0,0x1801,0,0,0,0,0x18010100}, 6},
{ {0x19010100,0,0,0,0,0x19019180,0,0,0,0,0x1001,0,0,0,0,0x18010100}, 6},
{ {0x11810180,0,0,0,0,0x19019900,0,0,0,0,0x1001,0,0,0,0,0x10010100}, 6},
{ {0x19810180,0,0,0,0,0x11019900,0,0,0,0,0x1001,0,0,0,0,0x10010100}, 6},
{ {0x19010180,0,0,0,0,0x11819900,0,0,0,0,0x1001,0,0,0,0,0x10010100}, 6},
{ {0x19018100,0,0,0,0,0x19011180,0,0,0,0,0x1001,0,0,0,0,0x18010100}, 6},
{ {0x11010100,0,0,0,0,0x19019180,0,0,0,0,0x1801,0,0,0,0,0x10010100}, 6},
{ {0x19818100,0,0,0,0,0x19011980,0,0,0,0,0x1801,0,0,0,0,0x18010100}, 6},
{ {0x19818100,0,0,0,0,0x11011980,0,0,0,0,0x1001,0,0,0,0,0x10010100}, 6},
{ {0x19810100,0,0,0,0,0x11019980,0,0,0,0,0x1001,0,0,0,0,0x10010100}, 6},
{ {0x19010100,0,0,0,0,0x11819980,0,0,0,0,0x1001,0,0,0,0,0x10010100}, 6},
{ {0x11818100,0,0,0,0,0x19811180,0,0,0,0,0x1801,0,0,0,0,0x10010100}, 6},
{ {0x11018100,0,0,0,0,0x19011180,0,0,0,0,0x1801,0,0,0,0,0x10010100}, 6},
{ {0x11810180,0,0,0,0,0x11019900,0,0,0,0,0x1801,0,0,0,0,0x18010100}, 6},
{ {0x19810180,0,0,0,0,0x19019900,0,0,0,0,0x1801,0,0,0,0,0x18010100}, 6},
{ {0x11018100,0,0,0,0,0x11011180,0,0,0,0,0x1001,0,0,0,0,0x18010100}, 6},
{ {0x19818180,0,0,0,0,0x19811100,0,0,0,0,0x1001,0,0,0,0,0x18010100}, 6},
{ {0x19810180,0,0,0,0,0x19819100,0,0,0,0,0x1001,0,0,0,0,0x18010100}, 6},
{ {0x11010180,0,0,0,0,0x11019100,0,0,0,0,0x1001,0,0,0,0,0x18010100}, 6},
{ {0x19010180,0,0,0,0,0x19019100,0,0,0,0,0x1001,0,0,0,0,0x18010100}, 6},
{ {0x19018180,0,0,0,0,0x19011100,0,0,0,0,0x1001,0,0,0,0,0x18010100}, 6},
{ {0,0x11018180,0,0,0,0,0x11011100,0,0,0,0,0x1001,0x18010100,0,0,0}, 6},
{ {0,0x11018100,0,0,0,0,0x11011180,0,0,0,0,0x1001,0x18010100,0,0,0}, 6},
{ {0,0x11010180,0,0,0,0,0x11019100,0,0,0,0,0x1001,0x18010100,0,0,0}, 6},
{ {0,0x11810180,0,0,0,0,0x11019900,0,0,0,0,0x1801,0x18010100,0,0,0}, 6},
{ {0,0x19018180,0,0,0,0,0x11011100,0,0,0,0,0x1801,0x10010100,0,0,0}, 6},
{ {0,0x11818180,0,0,0,0,0x11011900,0,0,0,0,0x1801,0x18010100,0,0,0}, 6},
{ {0,0x11018180,0,0,0,0,0x11811900,0,0,0,0,0x1801,0x18010100,0,0,0}, 6},
{ {0,0x11010100,0,0,0,0,0x11019180,0,0,0,0,0x1001,0x18010100,0,0,0}, 6},
{ {0,0x11810100,0,0,0,0,0x11019980,0,0,0,0,0x1801,0x18010100,0,0,0}, 6},
{ {0,0x11810180,0,0,0,0,0x11819100,0,0,0,0,0x1001,0x18010100,0,0,0}, 6},
{ {0,0x11818100,0,0,0,0,0x11011980,0,0,0,0,0x1801,0x18010100,0,0,0}, 6},
{ {0,0x11018100,0,0,0,0,0x19011180,0,0,0,0,0x1801,0x10010100,0,0,0}, 6},
{ {0,0x11018180,0,0,0,0,0x19011100,0,0,0,0,0x1801,0x10010100,0,0,0}, 6},
{ {0,0x11810180,0,0,0,0,0x19019900,0,0,0,0,0x1001,0x10010100,0,0,0}, 6},
{ {0,0x19810180,0,0,0,0,0x19019900,0,0,0,0,0x1801,0x18010100,0,0,0}, 6},
{ {0,0x11810100,0,0,0,0,0x11819180,0,0,0,0,0x1001,0x18010100,0,0,0}, 6},
{ {0,0x11810100,0,0,0,0,0x19019980,0,0,0,0,0x1001,0x10010100,0,0,0}, 6},
{ {0,0x11010100,0,0,0,0,0x19019180,0,0,0,0,0x1801,0x10010100,0,0,0}, 6},
{ {0,0x11010100,0,0,0,0,0x11819980,0,0,0,0,0x1801,0x18010100,0,0,0}, 6},
{ {0,0x19810100,0,0,0,0,0x11019980,0,0,0,0,0x1001,0x10010100,0,0,0}, 6},
{ {0,0x19010100,0,0,0,0,0x11819980,0,0,0,0,0x1001,0x10010100,0,0,0}, 6},
{ {0,0x11010180,0,0,0,0,0x19019100,0,0,0,0,0x1801,0x10010100,0,0,0}, 6},
{ {0,0x19010100,0,0,0,0,0x19019180,0,0,0,0,0x1001,0x18010100,0,0,0}, 6},
{ {0,0x19810100,0,0,0,0,0x19019980,0,0,0,0,0x1801,0x18010100,0,0,0}, 6},
{ {0,0x19010100,0,0,0,0,0x19819980,0,0,0,0,0x1801,0x18010100,0,0,0}, 6},
{ {0,0x11010180,0,0,0,0,0x11819900,0,0,0,0,0x1801,0x18010100,0,0,0}, 6},
{ {0,0x19010180,0,0,0,0,0x11019100,0,0,0,0,0x1801,0x10010100,0,0,0}, 6},
{ {0,0x11818180,0,0,0,0,0x19011900,0,0,0,0,0x1001,0x10010100,0,0,0}, 6},
{ {0,0x11018180,0,0,0,0,0x19811900,0,0,0,0,0x1001,0x10010100,0,0,0}, 6},
{ {0,0x19018180,0,0,0,0,0x11811900,0,0,0,0,0x1001,0x10010100,0,0,0}, 6},
{ {0,0x19818180,0,0,0,0,0x11011900,0,0,0,0,0x1001,0x10010100,0,0,0}, 6},
{ {0,0x11818100,0,0,0,0,0x19011980,0,0,0,0,0x1001,0x10010100,0,0,0}, 6},
{ {0,0x11018100,0,0,0,0,0x19811980,0,0,0,0,0x1001,0x10010100,0,0,0}, 6},
{ {0,0x19018100,0,0,0,0,0x11811980,0,0,0,0,0x1001,0x10010100,0,0,0}, 6},
{ {0,0x19818100,0,0,0,0,0x11011980,0,0,0,0,0x1001,0x10010100,0,0,0}, 6},
{ {0,0x11010100,0,0,0,0,0x19819980,0,0,0,0,0x1001,0x10010100,0,0,0}, 6},
{ {0,0x11810100,0,0,0,0,0x19819180,0,0,0,0,0x1801,0x10010100,0,0,0}, 6},
{ {0,0x19018180,0,0,0,0,0x19811900,0,0,0,0,0x1801,0x18010100,0,0,0}, 6},
{ {0,0x19010180,0,0,0,0,0x19819900,0,0,0,0,0x1801,0x18010100,0,0,0}, 6},
{ {0,0x19010180,0,0,0,0,0x19019100,0,0,0,0,0x1001,0x18010100,0,0,0}, 6},
{ {0,0x11810180,0,0,0,0,0x19819100,0,0,0,0,0x1801,0x10010100,0,0,0}, 6},
{ {0,0x19810180,0,0,0,0,0x11819100,0,0,0,0,0x1801,0x10010100,0,0,0}, 6},
{ {0,0x19810180,0,0,0,0,0x19819100,0,0,0,0,0x1001,0x18010100,0,0,0}, 6},
{ {0,0x11818100,0,0,0,0,0x19811180,0,0,0,0,0x1801,0x10010100,0,0,0}, 6},
{ {0,0x19818100,0,0,0,0,0x11811180,0,0,0,0,0x1801,0x10010100,0,0,0}, 6},
{ {0,0x11018100,0,0,0,0,0x11811980,0,0,0,0,0x1801,0x18010100,0,0,0}, 6},
{ {0,0x19018100,0,0,0,0,0x19811980,0,0,0,0,0x1801,0x18010100,0,0,0}, 6},
{ {0,0x19818180,0,0,0,0,0x19011900,0,0,0,0,0x1801,0x18010100,0,0,0}, 6},
{ {0,0x19818100,0,0,0,0,0x19011980,0,0,0,0,0x1801,0x18010100,0,0,0}, 6},
{ {0,0x11818100,0,0,0,0,0x11811180,0,0,0,0,0x1001,0x18010100,0,0,0}, 6},
{ {0,0x11818180,0,0,0,0,0x11811100,0,0,0,0,0x1001,0x18010100,0,0,0}, 6},
{ {0,0x19810100,0,0,0,0,0x19819180,0,0,0,0,0x1001,0x18010100,0,0,0}, 6},
{ {0,0x19010100,0,0,0,0,0x11019180,0,0,0,0,0x1801,0x10010100,0,0,0}, 6},
{ {0,0x19018100,0,0,0,0,0x11011180,0,0,0,0,0x1801,0x10010100,0,0,0}, 6},
{ {0,0x19818100,0,0,0,0,0x19811180,0,0,0,0,0x1001,0x18010100,0,0,0}, 6},
{ {0,0x19018180,0,0,0,0,0x19011100,0,0,0,0,0x1001,0x18010100,0,0,0}, 6},
{ {0,0x19818180,0,0,0,0,0x19811100,0,0,0,0,0x1001,0x18010100,0,0,0}, 6},
{ {0,0x19810100,0,0,0,0,0x11819180,0,0,0,0,0x1801,0x10010100,0,0,0}, 6},
{ {0,0x19018100,0,0,0,0,0x19011180,0,0,0,0,0x1001,0x18010100,0,0,0}, 6},
{ {0,0x19810180,0,0,0,0,0x11019900,0,0,0,0,0x1001,0x10010100,0,0,0}, 6},
{ {0,0x11010180,0,0,0,0,0x19819900,0,0,0,0,0x1001,0x10010100,0,0,0}, 6},
{ {0,0x19010180,0,0,0,0,0x11819900,0,0,0,0,0x1001,0x10010100,0,0,0}, 6},
{ {0,0x11818180,0,0,0,0,0x19811100,0,0,0,0,0x1801,0x10010100,0,0,0}, 6},
{ {0,0x19818180,0,0,0,0,0x11811100,0,0,0,0,0x1801,0x10010100,0,0,0}, 6} };
nextOrPreDiffNode prePreMaskR6_pos12to15[32 * 4] = {
{ {0,0x11000180,0,0,0,0,0x11001100,0,0,0,0,0x1000,0x18000100,0,0,0},5},
{ {0,0x19800180,0,0,0,0,0x11001900,0,0,0,0,0x1000,0x10000100,0,0,0},5},
{ {0,0x19000180,0,0,0,0,0x11001100,0,0,0,0,0x1800,0x10000100,0,0,0},5},
{ {0,0x19000180,0,0,0,0,0x19001100,0,0,0,0,0x1000,0x18000100,0,0,0},5},
{ {0,0x11000180,0,0,0,0,0x19001100,0,0,0,0,0x1800,0x10000100,0,0,0},5},
{ {0,0x11800180,0,0,0,0,0x11801100,0,0,0,0,0x1000,0x18000100,0,0,0},5},
{ {0,0x11800180,0,0,0,0,0x19801100,0,0,0,0,0x1800,0x10000100,0,0,0},5},
{ {0,0x19800180,0,0,0,0,0x19801100,0,0,0,0,0x1000,0x18000100,0,0,0},5},
{ {0,0x19000100,0,0,0,0,0x11001180,0,0,0,0,0x1800,0x10000100,0,0,0},5},
{ {0,0x11000100,0,0,0,0,0x19001180,0,0,0,0,0x1800,0x10000100,0,0,0},5},
{ {0,0x19800180,0,0,0,0,0x11801100,0,0,0,0,0x1800,0x10000100,0,0,0},5},
{ {0,0x11000180,0,0,0,0,0x19801900,0,0,0,0,0x1000,0x10000100,0,0,0},5},
{ {0,0x19000100,0,0,0,0,0x19001180,0,0,0,0,0x1000,0x18000100,0,0,0},5},
{ {0,0x19800100,0,0,0,0,0x11001980,0,0,0,0,0x1000,0x10000100,0,0,0},5},
{ {0,0x11000180,0,0,0,0,0x11801900,0,0,0,0,0x1800,0x18000100,0,0,0},5},
{ {0,0x11800180,0,0,0,0,0x11001900,0,0,0,0,0x1800,0x18000100,0,0,0},5},
{ {0,0x19800180,0,0,0,0,0x19001900,0,0,0,0,0x1800,0x18000100,0,0,0},5},
{ {0,0x11800180,0,0,0,0,0x19001900,0,0,0,0,0x1000,0x10000100,0,0,0},5},
{ {0,0x11000100,0,0,0,0,0x11801980,0,0,0,0,0x1800,0x18000100,0,0,0},5},
{ {0,0x11800100,0,0,0,0,0x19001980,0,0,0,0,0x1000,0x10000100,0,0,0},5},
{ {0,0x11800100,0,0,0,0,0x19801180,0,0,0,0,0x1800,0x10000100,0,0,0},5},
{ {0,0x11800100,0,0,0,0,0x11001980,0,0,0,0,0x1800,0x18000100,0,0,0},5},
{ {0,0x19800100,0,0,0,0,0x19001980,0,0,0,0,0x1800,0x18000100,0,0,0},5},
{ {0,0x19800100,0,0,0,0,0x19801180,0,0,0,0,0x1000,0x18000100,0,0,0},5},
{ {0,0x11800100,0,0,0,0,0x11801180,0,0,0,0,0x1000,0x18000100,0,0,0},5},
{ {0,0x19000180,0,0,0,0,0x19801900,0,0,0,0,0x1800,0x18000100,0,0,0},5},
{ {0,0x11000100,0,0,0,0,0x11001180,0,0,0,0,0x1000,0x18000100,0,0,0},5},
{ {0,0x19800100,0,0,0,0,0x11801180,0,0,0,0,0x1800,0x10000100,0,0,0},5},
{ {0,0x19000100,0,0,0,0,0x19801980,0,0,0,0,0x1800,0x18000100,0,0,0},5},
{ {0,0x11000100,0,0,0,0,0x19801980,0,0,0,0,0x1000,0x10000100,0,0,0},5},
{ {0,0x19000100,0,0,0,0,0x11801980,0,0,0,0,0x1000,0x10000100,0,0,0},5},
{ {0,0x19000180,0,0,0,0,0x11801900,0,0,0,0,0x1000,0x10000100,0,0,0},5},
{ {0,0,0x11000180,0,0,0,0,0x11001100,0x1000,0,0,0,0,0x18000100,0,0},5},
{ {0,0,0x19800180,0,0,0,0,0x11001900,0x1000,0,0,0,0,0x10000100,0,0},5},
{ {0,0,0x19000180,0,0,0,0,0x11001100,0x1800,0,0,0,0,0x10000100,0,0},5},
{ {0,0,0x11000180,0,0,0,0,0x19801900,0x1000,0,0,0,0,0x10000100,0,0},5},
{ {0,0,0x11000180,0,0,0,0,0x19001100,0x1800,0,0,0,0,0x10000100,0,0},5},
{ {0,0,0x11000180,0,0,0,0,0x11801900,0x1800,0,0,0,0,0x18000100,0,0},5},
{ {0,0,0x19000180,0,0,0,0,0x11801900,0x1000,0,0,0,0,0x10000100,0,0},5},
{ {0,0,0x11000100,0,0,0,0,0x11001180,0x1000,0,0,0,0,0x18000100,0,0},5},
{ {0,0,0x19000180,0,0,0,0,0x19001100,0x1000,0,0,0,0,0x18000100,0,0},5},
{ {0,0,0x19000180,0,0,0,0,0x19801900,0x1800,0,0,0,0,0x18000100,0,0},5},
{ {0,0,0x11800180,0,0,0,0,0x11801100,0x1000,0,0,0,0,0x18000100,0,0},5},
{ {0,0,0x19800180,0,0,0,0,0x11801100,0x1800,0,0,0,0,0x10000100,0,0},5},
{ {0,0,0x11800180,0,0,0,0,0x11001900,0x1800,0,0,0,0,0x18000100,0,0},5},
{ {0,0,0x19800100,0,0,0,0,0x11801180,0x1800,0,0,0,0,0x10000100,0,0},5},
{ {0,0,0x11800100,0,0,0,0,0x11001980,0x1800,0,0,0,0,0x18000100,0,0},5},
{ {0,0,0x11000100,0,0,0,0,0x11801980,0x1800,0,0,0,0,0x18000100,0,0},5},
{ {0,0,0x19000100,0,0,0,0,0x19801980,0x1800,0,0,0,0,0x18000100,0,0},5},
{ {0,0,0x19800100,0,0,0,0,0x19001980,0x1800,0,0,0,0,0x18000100,0,0},5},
{ {0,0,0x11000100,0,0,0,0,0x19801980,0x1000,0,0,0,0,0x10000100,0,0},5},
{ {0,0,0x19000100,0,0,0,0,0x11801980,0x1000,0,0,0,0,0x10000100,0,0},5},
{ {0,0,0x19000100,0,0,0,0,0x19001180,0x1000,0,0,0,0,0x18000100,0,0},5},
{ {0,0,0x19800100,0,0,0,0,0x11001980,0x1000,0,0,0,0,0x10000100,0,0},5},
{ {0,0,0x19800180,0,0,0,0,0x19801100,0x1000,0,0,0,0,0x18000100,0,0},5},
{ {0,0,0x19800100,0,0,0,0,0x19801180,0x1000,0,0,0,0,0x18000100,0,0},5},
{ {0,0,0x11800180,0,0,0,0,0x19801100,0x1800,0,0,0,0,0x10000100,0,0},5},
{ {0,0,0x11800100,0,0,0,0,0x19801180,0x1800,0,0,0,0,0x10000100,0,0},5},
{ {0,0,0x11800100,0,0,0,0,0x19001980,0x1000,0,0,0,0,0x10000100,0,0},5},
{ {0,0,0x11000100,0,0,0,0,0x19001180,0x1800,0,0,0,0,0x10000100,0,0},5},
{ {0,0,0x19800180,0,0,0,0,0x19001900,0x1800,0,0,0,0,0x18000100,0,0},5},
{ {0,0,0x11800180,0,0,0,0,0x19001900,0x1000,0,0,0,0,0x10000100,0,0},5},
{ {0,0,0x19000100,0,0,0,0,0x11001180,0x1800,0,0,0,0,0x10000100,0,0},5},
{ {0,0,0x11800100,0,0,0,0,0x11801180,0x1000,0,0,0,0,0x18000100,0,0},5},
{ {0,0,0,0x11000180,0x11001100,0,0,0,0,0x1000,0,0,0,0,0x18000100,0},5},
{ {0,0,0,0x19800180,0x11001900,0,0,0,0,0x1000,0,0,0,0,0x10000100,0},5},
{ {0,0,0,0x19000180,0x11001100,0,0,0,0,0x1800,0,0,0,0,0x10000100,0},5},
{ {0,0,0,0x19000180,0x11801900,0,0,0,0,0x1000,0,0,0,0,0x10000100,0},5},
{ {0,0,0,0x19000100,0x11801980,0,0,0,0,0x1000,0,0,0,0,0x10000100,0},5},
{ {0,0,0,0x19800180,0x11801100,0,0,0,0,0x1800,0,0,0,0,0x10000100,0},5},
{ {0,0,0,0x19800100,0x11001980,0,0,0,0,0x1000,0,0,0,0,0x10000100,0},5},
{ {0,0,0,0x11800180,0x11001900,0,0,0,0,0x1800,0,0,0,0,0x18000100,0},5},
{ {0,0,0,0x11800100,0x19001980,0,0,0,0,0x1000,0,0,0,0,0x10000100,0},5},
{ {0,0,0,0x11000100,0x19001180,0,0,0,0,0x1800,0,0,0,0,0x10000100,0},5},
{ {0,0,0,0x11800180,0x19001900,0,0,0,0,0x1000,0,0,0,0,0x10000100,0},5},
{ {0,0,0,0x11000100,0x19801980,0,0,0,0,0x1000,0,0,0,0,0x10000100,0},5},
{ {0,0,0,0x11800100,0x11001980,0,0,0,0,0x1800,0,0,0,0,0x18000100,0},5},
{ {0,0,0,0x19000180,0x19001100,0,0,0,0,0x1000,0,0,0,0,0x18000100,0},5},
{ {0,0,0,0x19800180,0x19001900,0,0,0,0,0x1800,0,0,0,0,0x18000100,0},5},
{ {0,0,0,0x19800100,0x11801180,0,0,0,0,0x1800,0,0,0,0,0x10000100,0},5},
{ {0,0,0,0x11800100,0x19801180,0,0,0,0,0x1800,0,0,0,0,0x10000100,0},5},
{ {0,0,0,0x11000180,0x11801900,0,0,0,0,0x1800,0,0,0,0,0x18000100,0},5},
{ {0,0,0,0x11800180,0x11801100,0,0,0,0,0x1000,0,0,0,0,0x18000100,0},5},
{ {0,0,0,0x11000100,0x11801980,0,0,0,0,0x1800,0,0,0,0,0x18000100,0},5},
{ {0,0,0,0x19800180,0x19801100,0,0,0,0,0x1000,0,0,0,0,0x18000100,0},5},
{ {0,0,0,0x19000100,0x19801980,0,0,0,0,0x1800,0,0,0,0,0x18000100,0},5},
{ {0,0,0,0x19000180,0x19801900,0,0,0,0,0x1800,0,0,0,0,0x18000100,0},5},
{ {0,0,0,0x11800180,0x19801100,0,0,0,0,0x1800,0,0,0,0,0x10000100,0},5},
{ {0,0,0,0x11000180,0x19001100,0,0,0,0,0x1800,0,0,0,0,0x10000100,0},5},
{ {0,0,0,0x11800100,0x11801180,0,0,0,0,0x1000,0,0,0,0,0x18000100,0},5},
{ {0,0,0,0x11000180,0x19801900,0,0,0,0,0x1000,0,0,0,0,0x10000100,0},5},
{ {0,0,0,0x19800100,0x19801180,0,0,0,0,0x1000,0,0,0,0,0x18000100,0},5},
{ {0,0,0,0x19000100,0x11001180,0,0,0,0,0x1800,0,0,0,0,0x10000100,0},5},
{ {0,0,0,0x19800100,0x19001980,0,0,0,0,0x1800,0,0,0,0,0x18000100,0},5},
{ {0,0,0,0x11000100,0x11001180,0,0,0,0,0x1000,0,0,0,0,0x18000100,0},5},
{ {0,0,0,0x19000100,0x19001180,0,0,0,0,0x1000,0,0,0,0,0x18000100,0},5},
{ {0x19000180,0,0,0,0,0x11001100,0,0,0,0,0x1800,0,0,0,0,0x10000100},5},
{ {0x19800180,0,0,0,0,0x11801100,0,0,0,0,0x1800,0,0,0,0,0x10000100},5},
{ {0x19000100,0,0,0,0,0x11001180,0,0,0,0,0x1800,0,0,0,0,0x10000100},5},
{ {0x19800180,0,0,0,0,0x11001900,0,0,0,0,0x1000,0,0,0,0,0x10000100},5},
{ {0x19800100,0,0,0,0,0x11001980,0,0,0,0,0x1000,0,0,0,0,0x10000100},5},
{ {0x11000180,0,0,0,0,0x19001100,0,0,0,0,0x1800,0,0,0,0,0x10000100},5},
{ {0x11000180,0,0,0,0,0x11001100,0,0,0,0,0x1000,0,0,0,0,0x18000100},5},
{ {0x11800180,0,0,0,0,0x19001900,0,0,0,0,0x1000,0,0,0,0,0x10000100},5},
{ {0x19000180,0,0,0,0,0x11801900,0,0,0,0,0x1000,0,0,0,0,0x10000100},5},
{ {0x19000180,0,0,0,0,0x19801900,0,0,0,0,0x1800,0,0,0,0,0x18000100},5},
{ {0x19000100,0,0,0,0,0x19001180,0,0,0,0,0x1000,0,0,0,0,0x18000100},5},
{ {0x19800100,0,0,0,0,0x19801180,0,0,0,0,0x1000,0,0,0,0,0x18000100},5},
{ {0x19800100,0,0,0,0,0x19001980,0,0,0,0,0x1800,0,0,0,0,0x18000100},5},
{ {0x11800180,0,0,0,0,0x11001900,0,0,0,0,0x1800,0,0,0,0,0x18000100},5},
{ {0x19800180,0,0,0,0,0x19001900,0,0,0,0,0x1800,0,0,0,0,0x18000100},5},
{ {0x11800100,0,0,0,0,0x19801180,0,0,0,0,0x1800,0,0,0,0,0x10000100},5},
{ {0x11800100,0,0,0,0,0x19001980,0,0,0,0,0x1000,0,0,0,0,0x10000100},5},
{ {0x11000100,0,0,0,0,0x19001180,0,0,0,0,0x1800,0,0,0,0,0x10000100},5},
{ {0x19000100,0,0,0,0,0x11801980,0,0,0,0,0x1000,0,0,0,0,0x10000100},5},
{ {0x19800100,0,0,0,0,0x11801180,0,0,0,0,0x1800,0,0,0,0,0x10000100},5},
{ {0x11000180,0,0,0,0,0x19801900,0,0,0,0,0x1000,0,0,0,0,0x10000100},5},
{ {0x11800180,0,0,0,0,0x19801100,0,0,0,0,0x1800,0,0,0,0,0x10000100},5},
{ {0x11800100,0,0,0,0,0x11801180,0,0,0,0,0x1000,0,0,0,0,0x18000100},5},
{ {0x11800180,0,0,0,0,0x11801100,0,0,0,0,0x1000,0,0,0,0,0x18000100},5},
{ {0x19800180,0,0,0,0,0x19801100,0,0,0,0,0x1000,0,0,0,0,0x18000100},5},
{ {0x11000100,0,0,0,0,0x11001180,0,0,0,0,0x1000,0,0,0,0,0x18000100},5},
{ {0x19000100,0,0,0,0,0x19801980,0,0,0,0,0x1800,0,0,0,0,0x18000100},5},
{ {0x11800100,0,0,0,0,0x11001980,0,0,0,0,0x1800,0,0,0,0,0x18000100},5},
{ {0x11000100,0,0,0,0,0x19801980,0,0,0,0,0x1000,0,0,0,0,0x10000100},5},
{ {0x11000180,0,0,0,0,0x11801900,0,0,0,0,0x1800,0,0,0,0,0x18000100},5},
{ {0x19000180,0,0,0,0,0x19001100,0,0,0,0,0x1000,0,0,0,0,0x18000100},5},
{ {0x11000100,0,0,0,0,0x11801980,0,0,0,0,0x1800,0,0,0,0,0x18000100},5} };

bool innerPro(uint64_t mask, uint64_t val, int len)
{
	bool bit = 0;
	for (auto i = 0; i < len; i++)
	{
		bool p = bit64(mask, i);
		if (p) bit ^= bit64(val, i);
	}
	return bit;
}
void chachaHalfQR(uint32_t in[4], uint32_t out[4], int r, int l)
{
	uint32_t a = in[0], b = in[1], c = in[2], d = in[3];
	uint32_t z0, z1, w0, w1;
	z0 = (a + b) & 0xffffffff;
	w0 = ROL32(z0 ^ d, r);
	z1 = (c + w0) & 0xffffffff;
	w1 = ROL32(z1 ^ b, l);
	out[0] = z0;
	out[1] = w1;
	out[2] = z1;
	out[3] = w0;
}
void chachaHalfQR_avx(__m128i a, __m128i b, __m128i c, __m128i d, __m128i& aa, __m128i& bb, __m128i& cc, __m128i& dd, int r, int l)
{
	__m128i z0 = _mm_add_epi32(a, b);
	__m128i t0 = _mm_xor_si128(z0, d);
	__m128i w0 = _mm_xor_si128(_mm_slli_epi32(t0, r), _mm_srli_epi32(t0, 32 - r));
	__m128i z1 = _mm_add_epi32(c, w0);
	__m128i t1 = _mm_xor_si128(z1, b);
	__m128i w1 = _mm_xor_si128(_mm_slli_epi32(t1, l), _mm_srli_epi32(t1, 32 - l));
	aa = z0;
	bb = w1;
	cc = z1;
	dd = w0;
}
void permute04to05(__m128i a, __m128i b, __m128i c, __m128i d, __m128i& aa, __m128i& bb, __m128i& cc, __m128i& dd)
{
	aa = a;
	bb = _mm_shuffle_epi32(b, 0b00111001);
	cc = _mm_shuffle_epi32(c, 0b01001110);
	dd = _mm_shuffle_epi32(d, 0b10010011);
}
void permute05to04(__m128i a, __m128i b, __m128i c, __m128i d, __m128i& aa, __m128i& bb, __m128i& cc, __m128i& dd)
{
	aa = a;
	bb = _mm_shuffle_epi32(b, 0b10010011);
	cc = _mm_shuffle_epi32(c, 0b01001110);
	dd = _mm_shuffle_epi32(d, 0b00111001);
}
void chachaStartR2toR6_avx(__m128i in[4], __m128i out[4])
{
	//in0: 0,1,2,3; in1: 4,5,6,7; in2: 8,9,10,11; in3: 12,13,14,15
	__m128i i0 = in[0], i1 = in[1], i2 = in[2], i3 = in[3];
	__m128i a, b, c, d, aa, bb, cc, dd;
	//r=2, 04 to 05
	a = i0;
	b = _mm_shuffle_epi32(i1, 0b00111001);
	c = _mm_shuffle_epi32(i2, 0b01001110);
	d = _mm_shuffle_epi32(i3, 0b10010011);
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[0][0], chachaRotate[0][1]);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//r=3
	a = i0;
	b = i1;
	c = i2;
	d = i3;
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[1][0], chachaRotate[1][1]);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//r=4, 05 to 04, similar with the case when r=2
	a = i0;
	b = _mm_shuffle_epi32(i1, 0b10010011);
	c = _mm_shuffle_epi32(i2, 0b01001110);
	d = _mm_shuffle_epi32(i3, 0b00111001);
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[0][0], chachaRotate[0][1]);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//r=5, same as the case when r=3
	a = i0;
	b = i1;
	c = i2;
	d = i3;
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[1][0], chachaRotate[1][1]);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//output
	out[0] = i0;
	out[1] = i1;
	out[2] = i2;
	out[3] = i3;
}
void chachaStartR2toR6R7_avx(__m128i in[4], __m128i outR6[4], __m128i outR7[4])
{
	//in0: 0,1,2,3; in1: 4,5,6,7; in2: 8,9,10,11; in3: 12,13,14,15
	__m128i i0 = in[0], i1 = in[1], i2 = in[2], i3 = in[3];
	__m128i a, b, c, d, aa, bb, cc, dd;
	//r=2, 04 to 05
	a = i0;
	b = _mm_shuffle_epi32(i1, 0b00111001);
	c = _mm_shuffle_epi32(i2, 0b01001110);
	d = _mm_shuffle_epi32(i3, 0b10010011);
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[0][0], chachaRotate[0][1]);
	//r=3
	a = aa; b = bb; c = cc; d = dd;
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[1][0], chachaRotate[1][1]);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//r=4, 05 to 04, similar with the case when r=2
	a = i0;
	b = _mm_shuffle_epi32(i1, 0b10010011);
	c = _mm_shuffle_epi32(i2, 0b01001110);
	d = _mm_shuffle_epi32(i3, 0b00111001);
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[0][0], chachaRotate[0][1]);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//r=5, same as the case when r=3
	a = aa; b = bb; c = cc; d = dd;
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[1][0], chachaRotate[1][1]);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//r=6, output
	outR6[0] = i0;
	outR6[1] = i1;
	outR6[2] = i2;
	outR6[3] = i3;
	//r=6, 04 to 05
	a = i0;
	b = _mm_shuffle_epi32(i1, 0b00111001);
	c = _mm_shuffle_epi32(i2, 0b01001110);
	d = _mm_shuffle_epi32(i3, 0b10010011);
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[0][0], chachaRotate[0][1]);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//output, 05 to 04
	outR7[0] = i0;
	outR7[1] = _mm_shuffle_epi32(i1, 0b10010011);
	outR7[2] = _mm_shuffle_epi32(i2, 0b01001110);
	outR7[3] = _mm_shuffle_epi32(i3, 0b00111001);
}
void chachaStartR2toR7_avx(__m128i in[4], __m128i out[4])
{
	//in0: 0,1,2,3; in1: 4,5,6,7; in2: 8,9,10,11; in3: 12,13,14,15
	__m128i i0 = in[0], i1 = in[1], i2 = in[2], i3 = in[3];
	__m128i a, b, c, d, aa, bb, cc, dd;
	//r2->r4
	a = i0;
	b = _mm_shuffle_epi32(i1, 0b00111001);
	c = _mm_shuffle_epi32(i2, 0b01001110);
	d = _mm_shuffle_epi32(i3, 0b10010011);
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[0][0], chachaRotate[0][1]);
	a = aa; b = bb; c = cc; d = dd;
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[1][0], chachaRotate[1][1]);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//r4->r6
	a = i0;
	b = _mm_shuffle_epi32(i1, 0b10010011);
	c = _mm_shuffle_epi32(i2, 0b01001110);
	d = _mm_shuffle_epi32(i3, 0b00111001);
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[0][0], chachaRotate[0][1]);
	a = aa; b = bb; c = cc; d = dd;
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[1][0], chachaRotate[1][1]);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//r6->r7
	a = i0;
	b = _mm_shuffle_epi32(i1, 0b00111001);
	c = _mm_shuffle_epi32(i2, 0b01001110);
	d = _mm_shuffle_epi32(i3, 0b10010011);
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[0][0], chachaRotate[0][1]);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//output
	out[0] = i0;
	out[1] = _mm_shuffle_epi32(i1, 0b10010011);
	out[2] = _mm_shuffle_epi32(i2, 0b01001110);
	out[3] = _mm_shuffle_epi32(i3, 0b00111001);
}
void chachaStartR7toR12_avx(__m128i in[4], __m128i out[4])
{
	//in0: 0,1,2,3; in1: 4,5,6,7; in2: 8,9,10,11; in3: 12,13,14,15
	__m128i i0 = in[0], i1 = in[1], i2 = in[2], i3 = in[3];
	__m128i a, b, c, d, aa, bb, cc, dd;
	//r7->r8
	a = i0;
	b = _mm_shuffle_epi32(i1, 0b00111001);
	c = _mm_shuffle_epi32(i2, 0b01001110);
	d = _mm_shuffle_epi32(i3, 0b10010011);
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[1][0], chachaRotate[1][1]);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//r8->r10
	a = i0;
	b = _mm_shuffle_epi32(i1, 0b10010011);
	c = _mm_shuffle_epi32(i2, 0b01001110);
	d = _mm_shuffle_epi32(i3, 0b00111001);
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[0][0], chachaRotate[0][1]);
	a = aa; b = bb; c = cc; d = dd;
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[1][0], chachaRotate[1][1]);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//r10->r12
	a = i0;
	b = _mm_shuffle_epi32(i1, 0b00111001);
	c = _mm_shuffle_epi32(i2, 0b01001110);
	d = _mm_shuffle_epi32(i3, 0b10010011);
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[0][0], chachaRotate[0][1]);
	a = aa; b = bb; c = cc; d = dd;
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[1][0], chachaRotate[1][1]);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//output
	out[0] = i0;
	out[1] = _mm_shuffle_epi32(i1, 0b10010011);
	out[2] = _mm_shuffle_epi32(i2, 0b01001110);
	out[3] = _mm_shuffle_epi32(i3, 0b00111001);
}
void chachaStartR12toR12half_avx(__m128i in[4], __m128i out[4])
{
	//in0: 0,1,2,3; in1: 4,5,6,7; in2: 8,9,10,11; in3: 12,13,14,15
	__m128i a = in[0], b = in[1], c = in[2], d = in[3];
	__m128i z0 = _mm_add_epi32(a, b);
	__m128i t0 = _mm_xor_si128(z0, d);
	__m128i w0 = _mm_xor_si128(_mm_slli_epi32(t0, chachaRotate[0][0]), _mm_srli_epi32(t0, 32 - chachaRotate[0][0]));
	out[0] = z0;
	out[1] = b;
	out[2] = c;
	out[3] = w0;
}
void chachaStartR12halftoR13_avx(__m128i in[4], __m128i out[4])
{
	//in0: 0,1,2,3; in1: 4,5,6,7; in2: 8,9,10,11; in3: 12,13,14,15
	__m128i a = in[0], b = in[1], c = in[2], d = in[3];
	__m128i z0 = _mm_add_epi32(c, d);
	__m128i t0 = _mm_xor_si128(z0, b);
	__m128i w0 = _mm_xor_si128(_mm_slli_epi32(t0, chachaRotate[0][1]), _mm_srli_epi32(t0, 32 - chachaRotate[0][1]));
	out[0] = a;
	out[1] = w0;
	out[2] = z0;
	out[3] = d;
}
void chachaStartR12toR13_avx(__m128i in[4], __m128i out[4])
{
	//in0: 0,1,2,3; in1: 4,5,6,7; in2: 8,9,10,11; in3: 12,13,14,15
	__m128i a = in[0], b = in[1], c = in[2], d = in[3], aa, bb, cc, dd;
	chachaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, chachaRotate[0][0], chachaRotate[0][1]);
	out[0] = aa;
	out[1] = bb;
	out[2] = cc;
	out[3] = dd;
}
void chachaStartR13toR13half_avx(__m128i in[4], __m128i out[4])
{
	//in0: 0,1,2,3; in1: 4,5,6,7; in2: 8,9,10,11; in3: 12,13,14,15
	__m128i a = in[0], b = in[1], c = in[2], d = in[3];
	__m128i z0 = _mm_add_epi32(a, b);
	__m128i t0 = _mm_xor_si128(z0, d);
	__m128i w0 = _mm_xor_si128(_mm_slli_epi32(t0, chachaRotate[1][0]), _mm_srli_epi32(t0, 32 - chachaRotate[1][0]));
	out[0] = z0;
	out[1] = b;
	out[2] = c;
	out[3] = w0;
}
void chachaStartR13halftoR14_avx(__m128i in[4], __m128i out[4])
{
	//in0: 0,1,2,3; in1: 4,5,6,7; in2: 8,9,10,11; in3: 12,13,14,15
	__m128i a = in[0], b = in[1], c = in[2], d = in[3];
	__m128i z0 = _mm_add_epi32(c, d);
	__m128i t0 = _mm_xor_si128(z0, b);
	__m128i w0 = _mm_xor_si128(_mm_slli_epi32(t0, chachaRotate[1][1]), _mm_srli_epi32(t0, 32 - chachaRotate[1][1]));
	out[0] = a;
	out[1] = w0;
	out[2] = z0;
	out[3] = d;
}

void chachaStartR14toR14half_avx(__m128i in[4], __m128i out[4])
{
	//in0: 0,1,2,3; in1: 4,5,6,7; in2: 8,9,10,11; in3: 12,13,14,15
	__m128i i0 = in[0], i1 = in[1], i2 = in[2], i3 = in[3];
	__m128i a, b, c, d, aa, bb, cc, dd;
	a = i0;
	b = _mm_shuffle_epi32(i1, 0b00111001);
	c = _mm_shuffle_epi32(i2, 0b01001110);
	d = _mm_shuffle_epi32(i3, 0b10010011);
	__m128i z0 = _mm_add_epi32(a, b);
	__m128i t0 = _mm_xor_si128(z0, d);
	__m128i w0 = _mm_xor_si128(_mm_slli_epi32(t0, chachaRotate[0][0]), _mm_srli_epi32(t0, 32 - chachaRotate[0][0]));
	i0 = z0; i1 = b; i2 = c; i3 = w0;
	out[0] = i0;
	out[1] = _mm_shuffle_epi32(i1, 0b10010011);
	out[2] = _mm_shuffle_epi32(i2, 0b01001110);
	out[3] = _mm_shuffle_epi32(i3, 0b00111001);
}

bool getOneLsbOfInt32FromInt128(__m128i val128, uint8_t b)
{
	__m128i shift;
	if (!((b == 0) || (b == 1) || (b == 2) || (b == 3))) cout << "error!" << endl;
	switch (b)
	{
	case 3:
		shift = _mm_shuffle_epi32(val128, 0b10010011);
		break;
	case 2:
		shift = _mm_shuffle_epi32(val128, 0b01001110);
		break;
	case 1:
		shift = _mm_shuffle_epi32(val128, 0b00111001);
		break;
	case 0:
		shift = val128;
		break;
	}
	bool lsb = bit64(_mm_cvtsi128_si32(shift), 0);
	return lsb;
}
bool getLinComOfInt32FromInt128(__m128i val128, uint8_t b, uint32_t mask)
{
	__m128i shift;
	if (!((b == 0) || (b == 1) || (b == 2) || (b == 3))) cout << "error!" << endl;
	switch (b)
	{
	case 3:
		shift = _mm_shuffle_epi32(val128, 0b10010011);
		break;
	case 2:
		shift = _mm_shuffle_epi32(val128, 0b01001110);
		break;
	case 1:
		shift = _mm_shuffle_epi32(val128, 0b00111001);
		break;
	case 0:
		shift = val128;
		break;
	}
	uint32_t val32 = _mm_cvtsi128_si32(shift);
	bool bit = 0;
	for (auto i = 0; i < 32; i++)
	{
		bool p = bit64(mask, i);
		if (p) bit ^= bit64(val32, i);
	}
	return bit;
}
void print128_num(__m128i var)
{
	uint32_t val[4];
	memcpy(val, &var, sizeof(val));
	printf("%x %x %x %x ", val[0], val[1], val[2], val[3]);
}
void chachaStartEnd(uint32_t in[16], uint32_t out[16], int start, int end)
{
	uint32_t iState[16] = { 0 };
	for (auto i = 0; i < 16; i++) iState[i] = in[i];
	for (auto r = start; r < end; r++)
	{
		uint32_t oState[16] = { 0 };
		for (auto i = 0; i < 4; i++)
		{
			vector<int> useIndex;
			if (((r / 2) % 2) == 1) useIndex = { i, 4 + ((1 + i) % 4), 8 + ((2 + i) % 4), 12 + ((3 + i) % 4) };
			else useIndex = { i, 4 + i, 8 + i, 12 + i };
			uint32_t i4Words[4], o4Words[4];
			for (auto j = 0; j < 4; j++) i4Words[j] = iState[useIndex[j]];
			chachaHalfQR(i4Words, o4Words, chachaRotate[r % 2][0], chachaRotate[r % 2][1]);
			for (auto j = 0; j < 4; j++) oState[useIndex[j]] = o4Words[j];
		}
		for (auto i = 0; i < 16; i++) iState[i] = oState[i];
	}
	for (auto i = 0; i < 16; i++) out[i] = iState[i];
}
void getChachaExpDlCorGivenDiffMask(string fileName, uint32_t diff[16], uint32_t mask[16], int start, int end, uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt = 0;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency();
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }; 
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		TYPE output[16] = { 0 };
		chachaStartEnd(input, output, start, end);
		//std::printf("(%x,%x,%x,%x),(%x,%x,%x,%x)\n", input[0], input[1], input[2], input[3], output[0], output[1], output[2], output[3]);
		TYPE input_prime[16] = { 0 }, output_prime[16] = { 0 };
		for (auto i = 0; i < 16; i++) input_prime[i] = input[i] ^ diff[i];
		chachaStartEnd(input_prime, output_prime, start, end);
		TYPE outDiff[16] = { 0x0 };
		for (auto i = 0; i < 16; i++) outDiff[i] = output_prime[i] ^ output[i];
		bool bit_out = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t v = mask[i];
			if (v)
			{
				for (auto j = 0; j < 32; j++)
					if (bit64(v, j)) bit_out ^= (outDiff[i] >> j) & 0x1;
			}
		}
		if (bit_out == 0) cnt++;
		else cnt--;
	}
	if (cnt)
	{
		cnt = cnt / datasize;
		double cor = log(abs(cnt)) / log(2);
		for (auto i = 0; i < 16; i++)
		{
			uint32_t v = diff[i];
			if (v)
			{
				cout << i << ":["; fout << i << ":[";
				for (auto j = 0; j < 32; j++)
					if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
				cout << "],"; fout << "],";
			}
		} cout << "-->"; fout << "-->";
		for (auto i = 0; i < 16; i++)
		{
			uint32_t v = mask[i];
			if (v)
			{
				cout << i << ":["; fout << i << ":[";
				for (auto j = 0; j < 32; j++)
					if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
				cout << "], "; fout << "], ";
			}
		} //cout << endl; fout << endl;
		cout << cnt << ", " << cor << endl; fout << cnt << ", " << cor << endl;
	}
	float end_Time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_Time - start_time);
	fout << "Multi time: " << end_Time - start_time << endl;
	fout.close();
}
void getChachaExpDlCorGivenDiffMask_r2r6(string fileName, uint32_t diff[16], uint32_t mask[16], uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt = 0;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() / 2;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }; 
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		__m128i in[4], out[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[4 * i + 3], input[4 * i + 2], input[4 * i + 1], input[4 * i]);
		}
		chachaStartR2toR6_avx(in, out); //for (auto i = 0; i < 4; i++) print128_num(out[i]); printf("\n");
		TYPE input_prime[16] = { 0 };
		for (auto i = 0; i < 16; i++) input_prime[i] = input[i] ^ diff[i];
		__m128i ind[4], outd[4];
		for (auto i = 0; i < 4; i++)
		{
			ind[i] = _mm_set_epi32(input_prime[4 * i + 3], input_prime[4 * i + 2], input_prime[4 * i + 1], input_prime[4 * i]);
		}
		chachaStartR2toR6_avx(ind, outd);
		bool bitout = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mk = mask[i];
			if (mk)
			{
				int a = i / 4, b = i % 4;
				__m128i val128 = _mm_xor_si128(out[a], outd[a]);
				bitout = bitout ^ getLinComOfInt32FromInt128(val128, b, mk);
			}
		}
		if (bitout == 0) cnt++; else cnt--;
	}
	if (cnt)
	{
		cnt = cnt / datasize;
		double cor = log(abs(cnt)) / log(2);
		for (auto i = 0; i < 16; i++)
		{
			uint32_t v = diff[i];
			if (v)
			{
				cout << i << ":["; fout << i << ":[";
				for (auto j = 0; j < 32; j++)
					if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
				cout << "],"; fout << "],";
			}
		} cout << "-->"; fout << "-->";
		for (auto i = 0; i < 16; i++)
		{
			uint32_t v = mask[i];
			if (v)
			{
				cout << i << ":["; fout << i << ":[";
				for (auto j = 31; j >= 0; j--)
					if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
				cout << "], "; fout << "], ";
			}
		} //cout << endl; fout << endl;
		cout << cnt << ", " << cor << endl; fout << cnt << ", " << cor << endl;
	}
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();
}
double getChachaExpDlCorGivenDiffandLsbMask(string fileName, uint32_t diff[16], uint8_t lsbMaskPos, int start, int end, uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt = 0;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency();
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }, output[16] = { 0 }; 
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		chachaStartEnd(input, output, start, end);
		//std::printf("(%x,%x,%x,%x),(%x,%x,%x,%x)\n", input[0], input[1], input[2], input[3], output[0], output[1], output[2], output[3]);
		TYPE input_prime[16] = { 0 }, output_prime[16] = { 0 };
		for (auto i = 0; i < 16; i++) input_prime[i] = input[i] ^ diff[i];
		chachaStartEnd(input_prime, output_prime, start, end);
		TYPE outDiff[16] = { 0x0 };
		for (auto i = 0; i < 16; i++) outDiff[i] = output_prime[i] ^ output[i];
		bool bit_out = bit64(outDiff[lsbMaskPos], 0);
		if (bit_out == 0) cnt++;
		else cnt--;
	}
	if (cnt)
	{
		cnt = cnt / datasize;
		double cor = log(abs(cnt)) / log(2);
		for (auto i = 0; i < 16; i++)
		{
			uint32_t v = diff[i];
			if (v)
			{
				cout << i << ":["; fout << i << ":[";
				for (auto j = 0; j < 32; j++)
					if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
				cout << "],"; fout << "],";
			}
		} cout << "-->"; fout << "-->";
		cout << int(lsbMaskPos) << ":[0], " << cnt << ", " << cor << endl;
		fout << int(lsbMaskPos) << ":[0], " << cnt << ", " << cor << endl;
	}
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();
	return cnt;
}
double getChachaExpDlCorGivenDiffandLsbMask_r2r7(string fileName, uint32_t diff[16], uint8_t lsbMaskPos, uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt = 0;
	const int a = lsbMaskPos / 4;
	const int b = lsbMaskPos % 4;
	ofstream fout(fileName, ios::out | ios::app);
	fout << "1DC(R0 to R1) prob: " << -1 * all32NextDiffR2[lsbMaskPos].prob << endl;
	int useCoreNumber = thread::hardware_concurrency() - 2; cout << useCoreNumber << endl;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }; 
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		__m128i in[4], out[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[4 * i + 3], input[4 * i + 2], input[4 * i + 1], input[4 * i]);
		}
		chachaStartR2toR7_avx(in, out); //for (auto i = 0; i < 4; i++) print128_num(out[i]); printf("\n");
		TYPE input_prime[16] = { 0 };
		for (auto i = 0; i < 16; i++) input_prime[i] = input[i] ^ diff[i];
		__m128i ind[4], outd[4];
		for (auto i = 0; i < 4; i++)
		{
			ind[i] = _mm_set_epi32(input_prime[4 * i + 3], input_prime[4 * i + 2], input_prime[4 * i + 1], input_prime[4 * i]);
		}
		chachaStartR2toR7_avx(ind, outd); //for (auto i = 0; i < 4; i++) print128_num(outd[i]); printf("\n");
		__m128i val = _mm_xor_si128(out[a], outd[a]);
		bool bit_out = getOneLsbOfInt32FromInt128(val, b);
		if (bit_out == 0) cnt++;
		else cnt--;
	}
	if (cnt)
	{
		cnt = cnt / datasize;
		double cor = log(abs(cnt)) / log(2);
		cout << "2.5DL: "; fout << "2.5DL: R1:";
		for (auto i = 0; i < 16; i++)
		{
			uint32_t v = diff[i];
			if (v)
			{
				cout << i << ":["; fout << i << ":[";
				for (auto j = 31; j >= 0; j--)
					if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
				cout << "],"; fout << "],";
			}
		} cout << "-->"; fout << "-->";
		cout << "R3.5: " << int(lsbMaskPos) << ":[0], " << cnt << ", " << cor << endl;
		fout << "R3.5: " << int(lsbMaskPos) << ":[0], " << cnt << ", " << cor << endl;
	}
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();
	return cnt;
}
double getChachaExpDlCorGivenDiffandLsbMask_r2r6(string fileName, uint32_t diff[16], uint8_t lsbMaskPos, uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt = 0;
	const int a = lsbMaskPos / 4;
	const int b = lsbMaskPos % 4;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency();
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }; 
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		__m128i in[4], out[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[4 * i + 3], input[4 * i + 2], input[4 * i + 1], input[4 * i]);
			//print128_num(in[i]);
		} //printf("\n");
		chachaStartR2toR6_avx(in, out); //for (auto i = 0; i < 4; i++) print128_num(out[i]); printf("\n");
		TYPE input_prime[16] = { 0 };
		for (auto i = 0; i < 16; i++) input_prime[i] = input[i] ^ diff[i];
		__m128i ind[4], outd[4];
		for (auto i = 0; i < 4; i++)
		{
			ind[i] = _mm_set_epi32(input_prime[4 * i + 3], input_prime[4 * i + 2], input_prime[4 * i + 1], input_prime[4 * i]);
			//print128_num(ind[i]);
		} //printf("\n");
		chachaStartR2toR6_avx(ind, outd); //for (auto i = 0; i < 4; i++) print128_num(outd[i]); printf("\n");
		__m128i val = _mm_xor_si128(out[a], outd[a]);
		__m128i shift;
		switch (b)
		{
		case 3:
			shift = _mm_shuffle_epi32(val, 0b10010011);
			break;
		case 2:
			shift = _mm_shuffle_epi32(val, 0b01001110);
			break;
		case 1:
			shift = _mm_shuffle_epi32(val, 0b00111001);
			break;
		case 0:
			shift = val;
			break;
		}
		int val32 = _mm_cvtsi128_si32(shift);
		bool bit_out = bit64(val32, 0);
		if (bit_out == 0) cnt++;
		else cnt--;
	}
	if (cnt)
	{
		cnt = cnt / datasize;
		double cor = log(abs(cnt)) / log(2);
		for (auto i = 0; i < 16; i++)
		{
			uint32_t v = diff[i];
			if (v)
			{
				cout << i << ":["; fout << i << ":[";
				for (auto j = 0; j < 32; j++)
					if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
				cout << "],"; fout << "],";
			}
		} cout << "-->"; fout << "-->";
		cout << "R6_" << int(lsbMaskPos) << ":[0], " << cnt << ", " << cor << endl;
		fout << "R6_" << int(lsbMaskPos) << ":[0], " << cnt << ", " << cor << endl;
	}
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();
	return cnt;
}
void getChachaExpDlCorGivenDiffandLsbMask_r2r6r7(string fileName, uint32_t diff[16], uint8_t lsbMaskPosR6, uint8_t lsbMaskPosR7, uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cntR7_0 = 0, cntR7_1 = 0, cntDiffR6_0 = 0, cntDiffR6_1 = 0;
	const int ar7 = lsbMaskPosR7 / 4, br7 = lsbMaskPosR7 % 4;
	const int ar6 = lsbMaskPosR6 / 4, br6 = lsbMaskPosR6 % 4;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() / 2; cout << useCoreNumber << endl;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cntDiffR6_0,cntDiffR6_1,cntR7_0,cntR7_1)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }; 
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		__m128i in[4], outR6[4], outR7[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[4 * i + 3], input[4 * i + 2], input[4 * i + 1], input[4 * i]);
		}
		chachaStartR2toR6R7_avx(in, outR6, outR7); //for (auto i = 0; i < 4; i++) print128_num(out[i]); printf("\n");
		TYPE input_prime[16] = { 0 };
		for (auto i = 0; i < 16; i++) input_prime[i] = input[i] ^ diff[i];
		__m128i ind[4], outdR6[4], outdR7[4];
		for (auto i = 0; i < 4; i++)
		{
			ind[i] = _mm_set_epi32(input_prime[4 * i + 3], input_prime[4 * i + 2], input_prime[4 * i + 1], input_prime[4 * i]);
		}
		chachaStartR2toR6R7_avx(ind, outdR6, outdR7); //for (auto i = 0; i < 4; i++) print128_num(outd[i]); printf("\n");
		__m128i diffR7 = _mm_xor_si128(outR7[ar7], outdR7[ar7]);
		bool bitoutR7 = getOneLsbOfInt32FromInt128(diffR7, br7);
		__m128i diffR6 = _mm_xor_si128(outR6[ar6], outdR6[ar6]);
		bool bitoutR6 = getOneLsbOfInt32FromInt128(diffR6, br6);
		if (bitoutR7 == 0)
		{
			cntR7_0++;
			if (bitoutR6 == 0)  cntDiffR6_0++; else  cntDiffR6_0--;
		}
		else if (bitoutR7 == 1)
		{
			cntR7_1++;
			if (bitoutR6 == 0)  cntDiffR6_1++; else  cntDiffR6_1--;
		}
	}
	double cntDiffR7 = (cntR7_0 - cntR7_1) / datasize;
	cntDiffR6_0 = cntDiffR6_0 / cntR7_0;  cntDiffR6_1 = cntDiffR6_1 / cntR7_1;
	double cor0 = log(abs(cntDiffR6_0)) / log(2), cor1 = log(abs(cntDiffR6_1)) / log(2), cor = log(abs(cntDiffR7)) / log(2);
	double finDiff = ((cntDiffR6_0 - cntDiffR6_1) + cntDiffR7 * (cntDiffR6_0 + cntDiffR6_1)) / 2, finCor = log(abs(finDiff)) / log(2);
	fout << "R1: ";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = diff[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 0; j < 32; j++)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	} cout << "-->"; fout << "-->";
	//cout << "R7_" << int(lsbMaskPosR7) << ":[0], " << cntDiffR7 << ", " << cor << endl;
	//cout << "R6_" << int(lsbMaskPosR6) << ":[0] conditioned on R7_" << int(lsbMaskPosR7) << ":[0] = 0, " << cntDiffR6_0 << ", " << cor0 << endl;
	//cout << "R6_" << int(lsbMaskPosR6) << ":[0] conditioned on R7_" << int(lsbMaskPosR7) << ":[0] = 1, " << cntDiffR6_1 << ", " << cor1 << endl;
	//cout << "R7_" << int(lsbMaskPosR6) << ":[0], " << finDiff << ", " << finCor << endl;
	fout << "R3.5_" << int(lsbMaskPosR7) << ":[0], " << cntDiffR7 << ", " << cor << endl;
	fout << "R3_" << int(lsbMaskPosR6) << ":[0] conditioned on R3.5_" << int(lsbMaskPosR7) << ":[0] = 0, " << cntDiffR6_0 << ", " << cor0 << endl;
	fout << "R3_" << int(lsbMaskPosR6) << ":[0] conditioned on R3.5_" << int(lsbMaskPosR7) << ":[0] = 1, " << cntDiffR6_1 << ", " << cor1 << endl;
	fout << "R3.5_" << int(lsbMaskPosR6) << ":[0], " << finDiff << ", " << finCor << endl;
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();
}
void getChachaExpDlCorGivenDiffandLsbMask_r2r6r6(string fileName, uint32_t diff[16], uint8_t lsbMaskPosR6_a, uint8_t lsbMaskPosR6_b, uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double bEq0 = 0, bEq1 = 0, aDiff_bEq0 = 0, aDiff_bEq1 = 0;
	const int a0 = lsbMaskPosR6_a / 4, a1 = lsbMaskPosR6_a % 4;
	const int b0 = lsbMaskPosR6_b / 4, b1 = lsbMaskPosR6_b % 4;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() / 2; cout << useCoreNumber << endl;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:bEq0,bEq1,aDiff_bEq0,aDiff_bEq1)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }; 
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		__m128i in[4], outR6[4], outR7[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[4 * i + 3], input[4 * i + 2], input[4 * i + 1], input[4 * i]);
		}
		chachaStartR2toR6_avx(in, outR6);
		TYPE input_prime[16] = { 0 };
		for (auto i = 0; i < 16; i++) input_prime[i] = input[i] ^ diff[i];
		__m128i ind[4], outdR6[4];
		for (auto i = 0; i < 4; i++)
		{
			ind[i] = _mm_set_epi32(input_prime[4 * i + 3], input_prime[4 * i + 2], input_prime[4 * i + 1], input_prime[4 * i]);
		}
		chachaStartR2toR6_avx(ind, outdR6); //for (auto i = 0; i < 4; i++) print128_num(outd[i]); printf("\n");
		__m128i diffR6_a = _mm_xor_si128(outR6[a0], outdR6[a0]);
		bool bitoutR6_a = getOneLsbOfInt32FromInt128(diffR6_a, a1);
		__m128i diffR6_b = _mm_xor_si128(outR6[b0], outdR6[b0]);
		bool bitoutR6_b = getOneLsbOfInt32FromInt128(diffR6_b, b1);
		if (bitoutR6_b == 0)
		{
			bEq0++;
			if (bitoutR6_a == 0)  aDiff_bEq0++; else  aDiff_bEq0--;
		}
		else if (bitoutR6_b == 1)
		{
			bEq1++;
			if (bitoutR6_a == 0)  aDiff_bEq1++; else  aDiff_bEq1--;
		}
	}
	double bDiff = (bEq0 - bEq1) / datasize;
	aDiff_bEq0 = aDiff_bEq0 / bEq0;  aDiff_bEq1 = aDiff_bEq1 / bEq1;
	double bCor = log(abs(bDiff)) / log(2), aCor_bEq0 = log(abs(aDiff_bEq0)) / log(2), aCor_bEq1 = log(abs(aDiff_bEq1)) / log(2);
	double finDiff = ((aDiff_bEq0 - aDiff_bEq1) + bDiff * (aDiff_bEq0 + aDiff_bEq1)) / 2, finCor = log(abs(finDiff)) / log(2);
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = diff[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 0; j < 32; j++)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	} cout << "-->"; fout << "-->";
	cout << "R6_" << int(lsbMaskPosR6_b) << ":[0], " << bDiff << ", " << bCor << endl;
	cout << "R6_" << int(lsbMaskPosR6_a) << ":[0] conditioned on R6_" << int(lsbMaskPosR6_b) << ":[0] = 0, " << aDiff_bEq0 << ", " << aCor_bEq0 << endl;
	cout << "R6_" << int(lsbMaskPosR6_a) << ":[0] conditioned on R6_" << int(lsbMaskPosR6_b) << ":[0] = 1, " << aDiff_bEq1 << ", " << aCor_bEq1 << endl;
	cout << "R7_" << int(lsbMaskPosR6_a) << ":[0], " << finDiff << ", " << finCor << endl;
	fout << "R6_" << int(lsbMaskPosR6_b) << ":[0], " << bDiff << ", " << bCor << endl;
	fout << "R6_" << int(lsbMaskPosR6_a) << ":[0] conditioned on R6_" << int(lsbMaskPosR6_b) << ":[0] = 0, " << aDiff_bEq0 << ", " << aCor_bEq0 << endl;
	fout << "R6_" << int(lsbMaskPosR6_a) << ":[0] conditioned on R6_" << int(lsbMaskPosR6_b) << ":[0] = 1, " << aDiff_bEq1 << ", " << aCor_bEq1 << endl;
	fout << "R7_" << int(lsbMaskPosR6_a) << ":[0], " << finDiff << ", " << finCor << endl;
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();
}
void getChachaExpDlCorGivenDiffandLsbMask_r2r6r6r7(string fileName, uint32_t diff[16], uint8_t lsbMaskPosR6_0, uint8_t lsbMaskPosR6_1, uint8_t lsbMaskPosR7, uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double bEq0 = 0, bEq1 = 0, a1bEq00 = 0, a1bEq01 = 0, a1bEq10 = 0, a1bEq11 = 0;
	double a1Diff_bEq0 = 0, a1Diff_bEq1 = 0, a0Diff_a1bEq00 = 0, a0Diff_a1bEq01 = 0, a0Diff_a1bEq10 = 0, a0Diff_a1bEq11 = 0;
	const int ar7 = lsbMaskPosR7 / 4, br7 = lsbMaskPosR7 % 4;
	const int ar6_0 = lsbMaskPosR6_0 / 4, br6_0 = lsbMaskPosR6_0 % 4;
	const int ar6_1 = lsbMaskPosR6_1 / 4, br6_1 = lsbMaskPosR6_1 % 4;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() / 2; cout << useCoreNumber << endl;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:bEq0,bEq1,a1bEq00,a1bEq01,a1bEq10,a1bEq11,a1Diff_bEq0,a1Diff_bEq1,a0Diff_a1bEq00,a0Diff_a1bEq01,a0Diff_a1bEq10,a0Diff_a1bEq11)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }; 
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		__m128i in[4], outR6[4], outR7[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[4 * i + 3], input[4 * i + 2], input[4 * i + 1], input[4 * i]);
		}
		chachaStartR2toR6R7_avx(in, outR6, outR7); //for (auto i = 0; i < 4; i++) print128_num(out[i]); printf("\n");
		TYPE input_prime[16] = { 0 };
		for (auto i = 0; i < 16; i++) input_prime[i] = input[i] ^ diff[i];
		__m128i ind[4], outdR6[4], outdR7[4];
		for (auto i = 0; i < 4; i++)
		{
			ind[i] = _mm_set_epi32(input_prime[4 * i + 3], input_prime[4 * i + 2], input_prime[4 * i + 1], input_prime[4 * i]);
		}
		chachaStartR2toR6R7_avx(ind, outdR6, outdR7); //for (auto i = 0; i < 4; i++) print128_num(outd[i]); printf("\n");
		__m128i diffR7 = _mm_xor_si128(outR7[ar7], outdR7[ar7]);
		bool bitoutR7 = getOneLsbOfInt32FromInt128(diffR7, br7);
		__m128i diffR6_0 = _mm_xor_si128(outR6[ar6_0], outdR6[ar6_0]);
		bool bitoutR6_0 = getOneLsbOfInt32FromInt128(diffR6_0, br6_0);
		__m128i diffR6_1 = _mm_xor_si128(outR6[ar6_1], outdR6[ar6_1]);
		bool bitoutR6_1 = getOneLsbOfInt32FromInt128(diffR6_1, br6_1);
		if (bitoutR7 == 0)
		{
			bEq0++;
			if (bitoutR6_1 == 0)
			{
				a1bEq00++;
				a1Diff_bEq0++;
				if (bitoutR6_0 == 0) a0Diff_a1bEq00++; else a0Diff_a1bEq00--;
			}
			else if (bitoutR6_1 == 1)
			{
				a1bEq10++;
				a1Diff_bEq0--;
				if (bitoutR6_0 == 0) a0Diff_a1bEq10++; else a0Diff_a1bEq10--;
			}
		}
		else if (bitoutR7 == 1)
		{
			bEq1++;
			if (bitoutR6_1 == 0)
			{
				a1bEq01++;
				a1Diff_bEq1++;
				if (bitoutR6_0 == 0) a0Diff_a1bEq01++; else a0Diff_a1bEq01--;
			}
			else if (bitoutR6_1 == 1)
			{
				a1bEq11++;
				a1Diff_bEq1--;
				if (bitoutR6_0 == 0) a0Diff_a1bEq11++; else a0Diff_a1bEq11--;
			}
		}
	}
	double bDiffR7 = (bEq0 - bEq1) / datasize;
	a1Diff_bEq0 = a1Diff_bEq0 / bEq0;
	a1Diff_bEq1 = a1Diff_bEq1 / bEq1;
	a0Diff_a1bEq00 = a0Diff_a1bEq00 / a1bEq00;
	a0Diff_a1bEq01 = a0Diff_a1bEq01 / a1bEq01;
	a0Diff_a1bEq10 = a0Diff_a1bEq10 / a1bEq10;
	a0Diff_a1bEq11 = a0Diff_a1bEq11 / a1bEq11;
	double bCorR7 = log(abs(bDiffR7)) / log(2), a1Cor_bEq0 = log(abs(a1Diff_bEq0)) / log(2), a1Cor_bEq1 = log(abs(a1Diff_bEq1)) / log(2);
	double a0Cor_a1bEq00 = log(abs(a0Diff_a1bEq00)) / log(2), a0Cor_a1bEq01 = log(abs(a0Diff_a1bEq01)) / log(2);
	double a0Cor_a1bEq10 = log(abs(a0Diff_a1bEq10)) / log(2), a0Cor_a1bEq11 = log(abs(a0Diff_a1bEq11)) / log(2);
	double tmpA = (a0Diff_a1bEq00 - a0Diff_a1bEq10) + a1Diff_bEq0 * (a0Diff_a1bEq00 + a0Diff_a1bEq10);
	double tmpB = (a0Diff_a1bEq01 - a0Diff_a1bEq11) + a1Diff_bEq1 * (a0Diff_a1bEq01 + a0Diff_a1bEq11);
	double finDiff = ((tmpA - tmpB) + bCorR7 * (tmpA + tmpB)) / 4.0, finCor = log(abs(finDiff)) / log(2);
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = diff[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 0; j < 32; j++)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	} cout << "-->"; fout << "-->";
	cout << "R7_" << int(lsbMaskPosR7) << ":[0], " << bDiffR7 << ", " << bCorR7 << endl;
	cout << "R6_" << int(lsbMaskPosR6_1) << ":[0] conditioned on  R7_" << int(lsbMaskPosR7) << ":[0] = 0, " << a1Diff_bEq0 << ", " << a1Cor_bEq0 << endl;
	cout << "R6_" << int(lsbMaskPosR6_1) << ":[0] conditioned on  R7_" << int(lsbMaskPosR7) << ":[0] = 1, " << a1Diff_bEq1 << ", " << a1Cor_bEq1 << endl;
	cout << "R6_" << int(lsbMaskPosR6_0) << ":[0] conditioned on  R6_" << int(lsbMaskPosR6_1) << ":[0] = 0, R7_" << int(lsbMaskPosR7) << ":[0] = 0, " << a0Diff_a1bEq00 << ", " << a0Cor_a1bEq00 << endl;
	cout << "R6_" << int(lsbMaskPosR6_0) << ":[0] conditioned on  R6_" << int(lsbMaskPosR6_1) << ":[0] = 1, R7_" << int(lsbMaskPosR7) << ":[0] = 0, " << a0Diff_a1bEq10 << ", " << a0Cor_a1bEq10 << endl;
	cout << "R6_" << int(lsbMaskPosR6_0) << ":[0] conditioned on  R6_" << int(lsbMaskPosR6_1) << ":[0] = 0, R7_" << int(lsbMaskPosR7) << ":[0] = 1, " << a0Diff_a1bEq01 << ", " << a0Cor_a1bEq01 << endl;
	cout << "R6_" << int(lsbMaskPosR6_0) << ":[0] conditioned on  R6_" << int(lsbMaskPosR6_1) << ":[0] = 1, R7_" << int(lsbMaskPosR7) << ":[0] = 1, " << a0Diff_a1bEq11 << ", " << a0Cor_a1bEq11 << endl;
	cout << "tmpA, " << tmpA << ", " << log(abs(tmpA)) / log(2) << endl;
	cout << "tmpB, " << tmpB << ", " << log(abs(tmpB)) / log(2) << endl;
	cout << "R8_" << int(lsbMaskPosR6_0) << ":[0], " << finDiff << ", " << finCor << endl;

	fout << "R7_" << int(lsbMaskPosR7) << ":[0], " << bDiffR7 << ", " << bCorR7 << endl;
	fout << "R6_" << int(lsbMaskPosR6_1) << ":[0] conditioned on  R7_" << int(lsbMaskPosR7) << ":[0] = 0, " << a1Diff_bEq0 << ", " << a1Cor_bEq0 << endl;
	fout << "R6_" << int(lsbMaskPosR6_1) << ":[0] conditioned on  R7_" << int(lsbMaskPosR7) << ":[0] = 1, " << a1Diff_bEq1 << ", " << a1Cor_bEq1 << endl;
	fout << "R6_" << int(lsbMaskPosR6_0) << ":[0] conditioned on  R6_" << int(lsbMaskPosR6_1) << ":[0] = 0, R7_" << int(lsbMaskPosR7) << ":[0] = 0, " << a0Diff_a1bEq00 << ", " << a0Cor_a1bEq00 << endl;
	fout << "R6_" << int(lsbMaskPosR6_0) << ":[0] conditioned on  R6_" << int(lsbMaskPosR6_1) << ":[0] = 1, R7_" << int(lsbMaskPosR7) << ":[0] = 0, " << a0Diff_a1bEq10 << ", " << a0Cor_a1bEq10 << endl;
	fout << "R6_" << int(lsbMaskPosR6_0) << ":[0] conditioned on  R6_" << int(lsbMaskPosR6_1) << ":[0] = 0, R7_" << int(lsbMaskPosR7) << ":[0] = 1, " << a0Diff_a1bEq01 << ", " << a0Cor_a1bEq01 << endl;
	fout << "R6_" << int(lsbMaskPosR6_0) << ":[0] conditioned on  R6_" << int(lsbMaskPosR6_1) << ":[0] = 1, R7_" << int(lsbMaskPosR7) << ":[0] = 1, " << a0Diff_a1bEq11 << ", " << a0Cor_a1bEq11 << endl;
	fout << "tmpA, " << tmpA << ", " << log(abs(tmpA)) / log(2) << endl;
	fout << "tmpB, " << tmpB << ", " << log(abs(tmpB)) / log(2) << endl;
	fout << "R8_" << int(lsbMaskPosR6_0) << ":[0], " << finDiff << ", " << finCor << endl;
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();
}
vector< vector<double>> getChachaSubForGivenDiffatBranch4andAllSingleBitMasks_avx_r2r6(string fileName, uint32_t diff[16], uint64_t datasize)
{
	float startTime = omp_get_wtime();
	vector< vector<double>> cnt(4, vector<double>(128, 0.0));
	ofstream fout(fileName, ios::out);
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }; 
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		__m128i in[4], out[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[4 * i + 3], input[4 * i + 2], input[4 * i + 1], input[4 * i]);
		}
		chachaStartR2toR6_avx(in, out); //for (auto i = 0; i < 4; i++) print128_num(out[i]); printf("\n");
		TYPE input_prime[16] = { 0 };
		for (auto i = 0; i < 16; i++) input_prime[i] = input[i] ^ diff[i];
		__m128i ind[4], outd[4];
		for (auto i = 0; i < 4; i++)
		{
			ind[i] = _mm_set_epi32(input_prime[4 * i + 3], input_prime[4 * i + 2], input_prime[4 * i + 1], input_prime[4 * i]);
		}
		chachaStartR2toR6_avx(ind, outd); //for (auto i = 0; i < 4; i++) print128_num(outd[i]); printf("\n");
		for (auto i = 0; i < 4; i++)
		{
			__m128i val = _mm_xor_si128(out[i], outd[i]), shift;
			for (auto j = 0; j < 128; j++)
			{
				int a = j / 32, b = j % 32;
				switch (a)
				{
				case 3:
					shift = _mm_shuffle_epi32(val, 0b10010011); //lrot1 = 0b00111001, lrot2 = 0b01001110, lrot3 = 0b10010011
					break;
				case 2:
					shift = _mm_shuffle_epi32(val, 0b01001110);
					break;
				case 1:
					shift = _mm_shuffle_epi32(val, 0b00111001);
					break;
				case 0:
					shift = val;
					break;
				}
				int val32 = _mm_cvtsi128_si32(shift);
				bool bit_out = bit64(val32, b);
				if (bit_out == 0) cnt[i][j]++; else cnt[i][j]--;
			}
		}
	}
	//std::printf("Chacha %dDL(R%d->R%d) experimental COR: ", end - start, start, end);
	fout << "Chacha " << dec << "2DL(R" << 1 << "->R" << 3 << ") experimental COR: ";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = diff[i];
		if (v)
		{
			//cout << i << ":["; 
			fout << i << ":[";
			for (auto j = 0; j < 32; j++)
				if (bit64(v, j)) { //cout << j << ","; 
					fout << j << ",";
				}
			//cout << "],"; 
			fout << "],";
		}
	} //cout << "-->" << endl; 
	fout << "-->" << endl;
	for (auto i = 0; i < 4; i++) for (auto j = 0; j < 128; j++) cnt[i][j] = cnt[i][j] / datasize;
	for (auto i = 0; i < 4; i++) for (auto j = 0; j < 128; j++)
	{
		int a = j / 32, b = j % 32;
		fout << 4 * i + a << ": ";
		double num = cnt[i][j]; cnt[i][j] = log(abs(cnt[i][j])) / log(2);
		if (num)
		{
			fout << "[" << b << "], " << num << ", " << cnt[i][j] << endl;
		}
	}
	float endTime = omp_get_wtime();
	//std::printf("Multi time: %f\n", endTime - startTime);
	fout << "Multi time: " << endTime - startTime;
	fout.close();
	return cnt;
}
double getChachaExpLcCorGivenInOutMasks_r7r12(string fileName, uint32_t inMask[16], uint32_t outMask[16], uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt = 0;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() / 3; cout << useCoreNumber << endl;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }; 
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		bool bitIn = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = inMask[i];
			if (mask) bitIn ^= innerPro(mask, input[i], 32);
		}
		__m128i in[4], out[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[4 * i + 3], input[4 * i + 2], input[4 * i + 1], input[4 * i]);
		}
		chachaStartR7toR12_avx(in, out);
		bool bitOut = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = outMask[i];
			if (mask)
			{
				int a = i / 4, b = i % 4;
				bitOut = bitOut ^ getLinComOfInt32FromInt128(out[a], b, mask);
			}
		}
		bool bit = bitIn ^ bitOut;
		if (bit == 0) cnt++; else cnt--;
	}
	cnt = cnt / datasize;
	double cor = log(abs(cnt)) / log(2);
	fout << "R3.5:";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = inMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	} cout << "-->"; fout << "-->";
	fout << "R6:";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = outMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	}
	cout << cnt << ", " << cor << endl; fout << cnt << ", " << cor << endl;
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();
	return cor;

}
double getChachaExpLcCorGivenInOutMasks_r12r12half(string fileName, uint32_t inMask[16], uint32_t outMask[16], uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt = 0;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() / 3; cout << useCoreNumber << endl;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }; 
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		bool bitIn = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = inMask[i];
			if (mask) bitIn ^= innerPro(mask, input[i], 32);
		}
		__m128i in[4], out[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[4 * i + 3], input[4 * i + 2], input[4 * i + 1], input[4 * i]);
		}
		chachaStartR12toR12half_avx(in, out);
		bool bitOut = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = outMask[i];
			if (mask)
			{
				int a = i / 4, b = i % 4;
				bitOut = bitOut ^ getLinComOfInt32FromInt128(out[a], b, mask);
			}
		}
		bool bit = bitIn ^ bitOut;
		if (bit == 0) cnt++; else cnt--;
	}
	cnt = cnt / datasize;
	double cor = log(abs(cnt)) / log(2);
	fout << "R6:";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = inMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	} cout << "-->"; fout << "-->";
	fout << "R6.25:";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = outMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	}
	cout << cnt << ", " << cor << endl; fout << cnt << ", " << cor << endl;
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();
	return cor;
}
double getChachaExpLcCorGivenInOutMasks_r12halfr13(string fileName, uint32_t inMask[16], uint32_t outMask[16], uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt = 0;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() / 3; cout << useCoreNumber << endl;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }; 
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		bool bitIn = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = inMask[i];
			if (mask) bitIn ^= innerPro(mask, input[i], 32);
		}
		__m128i in[4], out[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[4 * i + 3], input[4 * i + 2], input[4 * i + 1], input[4 * i]);
		}
		chachaStartR12halftoR13_avx(in, out);
		bool bitOut = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = outMask[i];
			if (mask)
			{
				int a = i / 4, b = i % 4;
				bitOut = bitOut ^ getLinComOfInt32FromInt128(out[a], b, mask);
			}
		}
		bool bit = bitIn ^ bitOut;
		if (bit == 0) cnt++; else cnt--;
	}
	cnt = cnt / datasize;
	double cor = log(abs(cnt)) / log(2);
	fout << "R6.25:";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = inMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	} cout << "-->"; fout << "-->";
	fout << "R6.5:";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = outMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	}
	cout << cnt << ", " << cor << endl; fout << cnt << ", " << cor << endl;
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();
	return cor;
}
double getChachaExpLcCorGivenInOutMasks_r12r13(string fileName, uint32_t inMask[16], uint32_t outMask[16], uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt = 0;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() / 3; cout << useCoreNumber << endl;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }; 
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		bool bitIn = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = inMask[i];
			if (mask) bitIn ^= innerPro(mask, input[i], 32);
		}
		__m128i in[4], out[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[4 * i + 3], input[4 * i + 2], input[4 * i + 1], input[4 * i]);
		}
		chachaStartR12toR13_avx(in, out);
		bool bitOut = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = outMask[i];
			if (mask)
			{
				int a = i / 4, b = i % 4;
				bitOut = bitOut ^ getLinComOfInt32FromInt128(out[a], b, mask);
			}
		}
		bool bit = bitIn ^ bitOut;
		if (bit == 0) cnt++; else cnt--;
	}
	cnt = cnt / datasize;
	double cor = log(abs(cnt)) / log(2);
	fout << "R6:";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = inMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	} cout << "-->"; fout << "-->";
	fout << "R6.5:";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = outMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	}
	cout << cnt << ", " << cor << endl; fout << cnt << ", " << cor << endl;
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();
	return cor;
}
double getChachaExpLcCorGivenInOutMasks_r13r13half(string fileName, uint32_t inMask[16], uint32_t outMask[16], uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt = 0;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() / 3; cout << useCoreNumber << endl;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }; 
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		bool bitIn = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = inMask[i];
			if (mask) bitIn ^= innerPro(mask, input[i], 32);
		}
		__m128i in[4], out[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[4 * i + 3], input[4 * i + 2], input[4 * i + 1], input[4 * i]);
		}
		chachaStartR13toR13half_avx(in, out);
		bool bitOut = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = outMask[i];
			if (mask)
			{
				int a = i / 4, b = i % 4;
				bitOut = bitOut ^ getLinComOfInt32FromInt128(out[a], b, mask);
			}
		}
		bool bit = bitIn ^ bitOut;
		if (bit == 0) cnt++; else cnt--;
	}
	cnt = cnt / datasize;
	double cor = log(abs(cnt)) / log(2);
	fout << "R6.5:";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = inMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	} cout << "-->"; fout << "-->";
	fout << "R6.75:";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = outMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	}
	cout << cnt << ", " << cor << endl; fout << cnt << ", " << cor << endl;
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();
	return cor;
}
double getChachaExpLcCorGivenInOutMasks_r13halfr14(string fileName, uint32_t inMask[16], uint32_t outMask[16], uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt = 0;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() / 3; cout << useCoreNumber << endl;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }; 
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		bool bitIn = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = inMask[i];
			if (mask) bitIn ^= innerPro(mask, input[i], 32);
		}
		__m128i in[4], out[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[4 * i + 3], input[4 * i + 2], input[4 * i + 1], input[4 * i]);
		}
		chachaStartR13halftoR14_avx(in, out);
		bool bitOut = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = outMask[i];
			if (mask)
			{
				int a = i / 4, b = i % 4;
				bitOut = bitOut ^ getLinComOfInt32FromInt128(out[a], b, mask);
			}
		}
		bool bit = bitIn ^ bitOut;
		if (bit == 0) cnt++; else cnt--;
	}
	cnt = cnt / datasize;
	double cor = log(abs(cnt)) / log(2);
	fout << "R6.75:";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = inMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	} cout << "-->"; fout << "-->";
	fout << "R7:";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = outMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	}
	cout << cnt << ", " << cor << endl; fout << cnt << ", " << cor << endl;
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();
	return cor;
}
double getChachaExpLcCorGivenInOutMasks_r14r14half(string fileName, uint32_t inMask[16], uint32_t outMask[16], uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt = 0;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() / 3; cout << useCoreNumber << endl;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }; 
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		bool bitIn = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = inMask[i];
			if (mask) bitIn ^= innerPro(mask, input[i], 32);
		}
		__m128i in[4], out[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[4 * i + 3], input[4 * i + 2], input[4 * i + 1], input[4 * i]);
		}
		chachaStartR14toR14half_avx(in, out);
		bool bitOut = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = outMask[i];
			if (mask)
			{
				int a = i / 4, b = i % 4;
				bitOut = bitOut ^ getLinComOfInt32FromInt128(out[a], b, mask);
			}
		}
		bool bit = bitIn ^ bitOut;
		if (bit == 0) cnt++; else cnt--;
	}
	cnt = cnt / datasize;
	double cor = log(abs(cnt)) / log(2);
	fout << "R7:";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = inMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	} cout << "-->"; fout << "-->";
	fout << "R7.25:";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = outMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	}
	cout << cnt << ", " << cor << endl; fout << cnt << ", " << cor << endl; fout << endl;
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();
	return cor;
}


int main()
{

#if 0 //construct Subs set from R1 to R3. R0: 1-bit input v13[i] --> R1: all32NextDiffR2[i].diffVal --> R3: prepare sub set
	int start = 2, end = 6;
	double datasize = pow(2, 30);
	float start_time = omp_get_wtime();
	for (auto i = 0; i < 32; i++)
	{
		string fileName = "Chacha 2DL(R1toR3)SUBs sets, i=0,1,...,31/Chacha 2DL(R1toR3)SUB, i=" + to_string(i) + ",all.txt";
		vector< vector<double>> cnt = getChachaSubForGivenDiffatBranch4andAllSingleBitMasks_avx_r2r6(fileName, all32NextDiffR2[i].diffVal, datasize);
	}
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
#endif

#if 1 //construct Subs set from R1 to R3. R0: 2-bit input v15[29,9] --> R1: inDiffR1_tosc23_2 --> R3: prepare sub set
	uint32_t inDiffR1_tosc23_1[16] = { 0 };
	inDiffR1_tosc23_1[2] = getInt32(17) ^ getInt32(5);
	inDiffR1_tosc23_1[6] = getInt32(24) ^ getInt32(8);
	inDiffR1_tosc23_1[10] = getInt32(5) ^ getInt32(1);
	inDiffR1_tosc23_1[14] = getInt32(25) ^ getInt32(2);
	uint32_t inDiffR1_tosc23_2[16] = { 0 };
	inDiffR1_tosc23_2[3] = getInt32(25) ^ getInt32(5);
	inDiffR1_tosc23_2[7] = getInt32(28) ^ getInt32(12);
	inDiffR1_tosc23_2[11] = getInt32(25) ^ getInt32(21);
	inDiffR1_tosc23_2[15] = getInt32(21) ^ getInt32(13);
	int start = 2, end = 6;
	double datasize = pow(2, 26);
	float start_time = omp_get_wtime();
	string fileName = "Chacha 2DL(R1toR3)SUB set, diff_R0_ 15[29,9] (tosc23 paper).txt";
	vector< vector<double>> cnt = getChachaSubForGivenDiffatBranch4andAllSingleBitMasks_avx_r2r6(fileName, inDiffR1_tosc23_2, datasize);
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
#endif


#if 0
	int start = 2, end = 7;
	double datasize = pow(2, 43);
	int a = 26, b = 9;
	string fileName = "Chacha 2.5DL (R1 to R3.5), diff_R0_13[" + to_string(a) + "] to mask_R3.5_" + to_string(b) + "[0], experimental cor.txt";
	float start_time = omp_get_wtime();
	getChachaExpDlCorGivenDiffandLsbMask_r2r7(fileName, all32NextDiffR2[a].diffVal, b, datasize);
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
#endif

#if 0
	int start = 2, end = 7;
	double datasize = pow(2, 40);
	int a = 26, b = 9;
	string fileName = "Chacha 2.5DL (R1 to R3.5), diff_R0_13[" + to_string(a) + "] to mask_R3.5_" + to_string(b) + "[0], mathematical cor.txt";
	float start_time = omp_get_wtime();
	getChachaExpDlCorGivenDiffandLsbMask_r2r6r7(fileName, all32NextDiffR2[26].diffVal, 9, 14, datasize);
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
#endif

#if 0//test LCs for R3.5-->R7.25(-48): partition rr14-->rr24(-9), rr24_->rr26(-10), rr26_->rr27(-6), rr27_->rr28(-13), rr28_->rr29(-10)
	string fileName = "Chacha 3.75LCs(R3.5 to R7.25) verify.txt";
	//uint32_t mask_rr14_rr29[16][16] =
	//{ { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0 }, { 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x10000, 0x0 }, { 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x10000, 0x0 }, { 0x0, 0x1, 0x10001, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x100, 0x1000000, 0x0 }, { 0x0, 0x1, 0x10001, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x1, 0x1, 0x0, 0x0, 0x101, 0x1000000, 0x0 }, { 0x0, 0x1, 0x18100, 0x1000000, 0x0, 0x0, 0x81, 0x10001, 0x0, 0x1, 0x1, 0x0, 0x0, 0x1010000, 0x100, 0x0 }, { 0x0, 0x1, 0x18100, 0x1000000, 0x0, 0x0, 0x81000, 0x10001000, 0x10001, 0x1, 0x1, 0x81, 0x0, 0x1010000, 0x101, 0x1 }, { 0x1, 0x1, 0x1000180, 0x1800101, 0x1000000, 0x0, 0x81001, 0x10011100, 0x10001, 0x1, 0x1, 0x81, 0x0, 0x1000001, 0x10100, 0x100 }, { 0x1, 0x1, 0x1000180, 0x1800101, 0x80000000, 0x0, 0x4080080, 0x888008, 0x10000101, 0x1000001, 0x1, 0x810c0, 0x81, 0x1010000, 0x10101, 0x101 }, { 0x80, 0x1010001, 0x1810001, 0x1800000, 0x80000001, 0x1, 0x5080180, 0x1088189, 0x10000101, 0x1000001, 0x1, 0x810c0, 0x810000, 0x101, 0x1010001, 0x1010000 }, { 0x80, 0x1010001, 0x1810001, 0x1800000, 0x1800, 0x1000, 0x80180050, 0x88189010, 0x98000100, 0x1800000, 0x5080181, 0x1009909, 0x10810181, 0x1000100, 0x1010000, 0x10d1080 }, { 0x10810101, 0x18101, 0x1, 0xd1080, 0x18c0, 0x1811001, 0x81198051, 0x89189010, 0x98000100, 0x1800000, 0x5080181, 0x1009909, 0x81018110, 0x10001, 0x1000001, 0xd108001 }, { 0x10810101, 0x18101, 0x1, 0xd1080, 0xc6000, 0xc0880080, 0x8cc028c0, 0x8c480844, 0xd0001940, 0x811001, 0x84158150, 0x8818411d, 0x11018010, 0x1010001, 0x4080100, 0xc901188 }, { 0x14511009, 0x11008111, 0x1010000, 0x4019980, 0x570c0, 0xd0098181, 0x8cc12941, 0x8c480845, 0xd0001940, 0x811001, 0x84158150, 0x8818411d, 0x80101101, 0x10101, 0x1000408, 0x11880c90 } };
	uint32_t mask_rr14_rr29_multi[32][16][16] =
	{ {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x811001,0x841181d0,0x8810019d,0x11010010,0x1010001,0x40c0180,0xc901108},{0x14119089,0x11000111,0x1010000,0x4019980,0x15000,0xd0090101,0x8cc12941,0x88484845,0x90001980,0x811001,0x841181d0,0x8810019d,0x101101,0x10101,0x180040c,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x811001,0x841181d0,0x8810019d,0x11010010,0x1010001,0x40c0180,0xc901108},{0x14119089,0x11000111,0x1010000,0x4051180,0x5d800,0xd0090101,0x8cc12941,0x88484845,0x90001980,0x811001,0x841181d0,0x8810019d,0x101101,0x10101,0x180040c,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x811001,0x841181d0,0x8810019d,0x11010010,0x1010001,0x40c0180,0xc901108},{0x14119089,0x11000111,0x1010000,0x4011180,0x1d800,0xd0090101,0x8cc12941,0x88484845,0x90001980,0x811001,0x841181d0,0x8810019d,0x101101,0x10101,0x180040c,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x811001,0x841181d0,0x8810019d,0x11010010,0x1010001,0x40c0180,0xc901108},{0x14119089,0x11000111,0x1010000,0x4059180,0x55800,0xd0090101,0x8cc12941,0x88484845,0x90001980,0x811001,0x841181d0,0x8810019d,0x101101,0x10101,0x180040c,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x811001,0x841181d0,0x8810019d,0x11010010,0x1010001,0x40c0180,0xc901108},{0x14119089,0x11000111,0x1010000,0x4051980,0x5d000,0xd0090101,0x8cc12941,0x88484845,0x90001980,0x811001,0x841181d0,0x8810019d,0x101101,0x10101,0x180040c,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x811001,0x841181d0,0x8810019d,0x11010010,0x1010001,0x40c0180,0xc901108},{0x14119089,0x11000111,0x1010000,0x4019180,0x15800,0xd0090101,0x8cc12941,0x88484845,0x90001980,0x811001,0x841181d0,0x8810019d,0x101101,0x10101,0x180040c,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x811001,0x849581d0,0x88100199,0x11010010,0x1010001,0x6080180,0xc90110c},{0x1411108d,0x11000191,0x1010000,0x6019980,0x55000,0xd0098101,0x8cc129c1,0x88484845,0x90001980,0x811001,0x849581d0,0x88100199,0x101101,0x10101,0x1800608,0x110c0c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x811001,0x841581d0,0x88100999,0x11010010,0x1010001,0x4080180,0xc90190c},{0x1411188d,0x11000191,0x1010000,0x4019980,0x55000,0xd0098101,0x8cc129c1,0x88484845,0x90001980,0x811001,0x841581d0,0x88100999,0x101101,0x10101,0x1800408,0x190c0c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x11001,0x841581d0,0x8810019d,0x11010010,0x1810001,0x4080180,0xc901108},{0x1c111089,0x11000111,0x1810000,0x4019980,0x55000,0xd8098101,0x8cc12941,0x88484845,0x90001980,0x11001,0x841581d0,0x8810019d,0x101101,0x10181,0x1800408,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x811001,0x841581d0,0x8810019d,0x11010010,0x1010001,0x4080180,0xc901108},{0x14111089,0x11000191,0x1010000,0x4019980,0x55000,0xd0098101,0x8cc129c1,0x88484845,0x90001980,0x811001,0x841581d0,0x8810019d,0x101101,0x10101,0x1800408,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x811001,0x841581d0,0x8810099d,0x11010010,0x1010001,0x4080180,0xc901908},{0x14111889,0x11000111,0x1010000,0x4019980,0x55000,0xd0098101,0x8cc12941,0x88484845,0x90001980,0x811001,0x841581d0,0x8810099d,0x101101,0x10101,0x1800408,0x19080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x811001,0x841181d0,0x8810019d,0x11010010,0x1010001,0x40c0180,0xc901108},{0x14119089,0x11000111,0x1010000,0x4011980,0x1d000,0xd0090101,0x8cc12941,0x88484845,0x90001980,0x811001,0x841181d0,0x8810019d,0x101101,0x10101,0x180040c,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x811001,0x84118150,0x8810019d,0x11010010,0x1010001,0x40c0100,0xc901108},{0x14119009,0x11000111,0x1010000,0x4059900,0x55000,0xd0090181,0x8cc12941,0x88484845,0x90001980,0x811001,0x84118150,0x8810019d,0x101101,0x10101,0x100040c,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x98001980,0x11001,0x84118150,0x8810019d,0x19010010,0x1810001,0x40c0100,0xc901108},{0x14111089,0x19000111,0x1810000,0x4019100,0x15800,0xd0098101,0x8cc12941,0x88484845,0x98001980,0x11001,0x84118150,0x8810019d,0x101901,0x10181,0x100040c,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x811001,0x84118150,0x8810419d,0x11010010,0x1010001,0x40c0100,0xc905108},{0x1411d089,0x11000111,0x1010000,0x4011100,0x1d800,0xd0090101,0x8cc12941,0x88484845,0x90001980,0x811001,0x84118150,0x8810419d,0x101101,0x10101,0x100040c,0x51080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000100,0x1800101,0x1000000,0x0,0x81001,0x10011180,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000100,0x1800101,0x80000000,0x0,0x4080080,0x88c008,0x10000181,0x1000001,0x1,0x810c0,0x81,0x1010000,0x10101,0x101},{0x80,0x1010001,0x1810001,0x1800000,0x80000001,0x1,0x5080100,0x108c189,0x10000181,0x1000001,0x1,0x810c0,0x810000,0x101,0x1010001,0x1010000},{0x80,0x1010001,0x1810001,0x1800000,0x1800,0x1000,0x80100050,0x8c189010,0x98000100,0x1800000,0x5080101,0x100d909,0x10810101,0x1000100,0x1010000,0x10d1080},{0x10810181,0x18101,0x1,0xd1080,0x18c0,0x1811001,0x81118051,0x8d189010,0x98000100,0x1800000,0x5080101,0x100d909,0x81010110,0x10001,0x1000001,0xd108001},{0x10810181,0x18101,0x1,0xd1080,0xc6000,0xc0880080,0x88c028c0,0x8c480846,0xd0001940,0x811001,0x841981d0,0x8c18019d,0x11010010,0x1010001,0x40c0100,0xc901108},{0x14519009,0x11000111,0x1010000,0x40119c0,0x1f080,0xd0090181,0x88c12941,0x8c480847,0xd0001940,0x811001,0x841981d0,0x8c18019d,0x101101,0x10101,0x100040c,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000100,0x1800101,0x1000000,0x0,0x81001,0x10011180,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000100,0x1800101,0x80000000,0x0,0x4080080,0x88c008,0x10000181,0x1000001,0x1,0x810c0,0x81,0x1010000,0x10101,0x101},{0x80,0x1010001,0x1810001,0x1800000,0x80000001,0x1,0x5080100,0x108c189,0x10000181,0x1000001,0x1,0x810c0,0x810000,0x101,0x1010001,0x1010000},{0x80,0x1010001,0x1810001,0x1800000,0x1800,0x1000,0x80100050,0x8c189010,0x98000180,0x1800000,0x5080101,0x100d909,0x10810181,0x1000100,0x1010000,0x10d1080},{0x10810101,0x18101,0x1,0xd1080,0x18c0,0x1811001,0x81118051,0x8d189010,0x98000180,0x1800000,0x5080101,0x100d909,0x81018110,0x10001,0x1000001,0xd108001},{0x10810101,0x18101,0x1,0xd1080,0xc6000,0xc0880080,0x88c028c0,0x8c480846,0xd00019c0,0x811001,0x841981d0,0x8c18019d,0x11018010,0x1010001,0x40c0100,0xc901108},{0x14519089,0x11008111,0x1010000,0x40119c0,0x1f080,0xd0090181,0x88c12941,0x8c480847,0xd00019c0,0x811001,0x841981d0,0x8c18019d,0x80101101,0x10101,0x100040c,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000100,0x1800101,0x1000000,0x0,0x81001,0x10011180,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000100,0x1800101,0x80000000,0x0,0x4080080,0x88c008,0x10000181,0x1000001,0x1,0x810c0,0x81,0x1010000,0x10101,0x101},{0x80,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080100,0x108c109,0x10000181,0x1000001,0x1,0x810c0,0x810000,0x101,0x1010001,0x1010000},{0x80,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80100050,0x8c109010,0x98000100,0x1800000,0x5080101,0x100d989,0x10810101,0x1000100,0x1010000,0x10d1080},{0x10810181,0x18101,0x1,0xd1000,0x18c0,0x1811001,0x81118051,0x8d1090d0,0x98000100,0x1800000,0x5080101,0x100d989,0x81010110,0x10001,0x1000001,0xd108001},{0x10810181,0x18101,0x1,0xd1000,0xc6000,0xc0880080,0x88c028c0,0x88486846,0xd0001940,0x811001,0x841981d0,0x8c1001dd,0x11010010,0x1010001,0x40c0100,0xc901108},{0x14519009,0x11000111,0x1010000,0x4011900,0x1f000,0xd0090181,0x88c12941,0x88486847,0xd0001940,0x811001,0x841981d0,0x8c1001dd,0x101101,0x10101,0x100040c,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x810c0,0x81,0x1010000,0x10101,0x101},{0x80,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x810c0,0x810000,0x101,0x1010001,0x1010000},{0x80,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000100,0x1800000,0x5080181,0x1009989,0x10810181,0x1000100,0x1010000,0x10d1080},{0x10810101,0x18101,0x1,0xd1000,0x18c0,0x1811001,0x81198051,0x891090d0,0x98000100,0x1800000,0x5080181,0x1009989,0x81018110,0x10001,0x1000001,0xd108001},{0x10810101,0x18101,0x1,0xd1000,0xc6000,0xc0880080,0x8cc028c0,0x88486844,0x90001940,0x811001,0x84118150,0x881041dd,0x51018010,0x1010001,0x40c0100,0xc901108},{0x14519089,0x51008111,0x1010000,0x4011900,0x1f000,0xd0090181,0x8cc12941,0x88486845,0x90001940,0x811001,0x84118150,0x881041dd,0x80105101,0x10101,0x100040c,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000100,0x1800101,0x1000000,0x0,0x81001,0x10011180,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000100,0x1800101,0x80000000,0x0,0x4080080,0x88c008,0x10000181,0x1000001,0x1,0x810c0,0x81,0x1010000,0x10101,0x101},{0x80,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080100,0x108c109,0x10000181,0x1000001,0x1,0x810c0,0x810000,0x101,0x1010001,0x1010000},{0x80,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80100050,0x8c109010,0x98000100,0x1800000,0x5080101,0x100d989,0x10810101,0x1000100,0x1010000,0x10d1080},{0x10810181,0x18101,0x1,0xd1000,0x18c0,0x1811001,0x81118051,0x8d1090d0,0x98000100,0x1800000,0x5080101,0x100d989,0x81010110,0x10001,0x1000001,0xd108001},{0x10810181,0x18101,0x1,0xd1000,0xc6000,0xc0880080,0x88c028c0,0x88486846,0x90001940,0x811001,0x841981d0,0x8c1001dd,0x51010010,0x1010001,0x40c0100,0xc901108},{0x14519009,0x51000111,0x1010000,0x4011900,0x1f000,0xd0090181,0x88c12941,0x88486847,0x90001940,0x811001,0x841981d0,0x8c1001dd,0x105101,0x10101,0x100040c,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x811001,0x861581d0,0x8810019d,0x11010010,0x1010001,0x4880180,0xc901108},{0x14111009,0x11008111,0x1010000,0x4819180,0x55800,0xd0098181,0x8cc1a941,0x88484845,0x90001980,0x811001,0x861581d0,0x8810019d,0x101101,0x10101,0x1800488,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x811001,0x849581d0,0x8810099d,0x11010010,0x1010001,0x6080180,0xc901908},{0x1c111809,0x11008111,0x1010000,0x6019980,0x55000,0xd8098181,0x8cc1a941,0x88484845,0x90001980,0x811001,0x849581d0,0x8810099d,0x101101,0x10101,0x1800608,0x19080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x811001,0x849581d0,0x8810019d,0x11010010,0x1010001,0x6080180,0xc901108},{0x1c111089,0x11008111,0x1010000,0x6019980,0x55000,0xd8098101,0x8cc1a941,0x88484845,0x90001980,0x811001,0x849581d0,0x8810019d,0x101101,0x10101,0x1800608,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x11001,0x849581d0,0x8810019d,0x11010010,0x1810001,0x6080180,0xc901108},{0x1c111009,0x11000111,0x1810000,0x6019980,0x55000,0xd8098181,0x8cc12941,0x88484845,0x90001980,0x11001,0x849581d0,0x8810019d,0x101101,0x10181,0x1800608,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001980,0x811001,0x849581d0,0x88100199,0x11010010,0x1010001,0x6080180,0xc90110c},{0x1411100d,0x11000191,0x1010000,0x6019980,0x55000,0xd0098181,0x8cc129c1,0x88484845,0x90001980,0x811001,0x849581d0,0x88100199,0x101101,0x10101,0x1800608,0x110c0c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001900,0x811001,0x841181d0,0x8810019d,0x11010090,0x1010001,0x40c0180,0xc901108},{0x14119089,0x11000191,0x1010000,0x4011980,0x1d000,0xd0090101,0x8cc12941,0x88484845,0x90001900,0x811001,0x841181d0,0x8810019d,0x901101,0x10101,0x180040c,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001900,0x811001,0x841181d0,0x8810019d,0x11010090,0x1010001,0x40c0180,0xc901108},{0x14119089,0x11000191,0x1010000,0x4051180,0x5d800,0xd0090101,0x8cc12941,0x88484845,0x90001900,0x811001,0x841181d0,0x8810019d,0x901101,0x10101,0x180040c,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001900,0x811001,0x851581d0,0x8890419d,0x11010090,0x1010001,0x5080180,0xc105108},{0x1c915009,0x11000111,0x1010000,0x5019980,0x55000,0xd8098181,0x8cc129c1,0x88484845,0x90001900,0x811001,0x851581d0,0x8890419d,0x901101,0x10101,0x1800508,0x51080c10}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080180,0x1088109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80180050,0x88109010,0x98000180,0x1800000,0x5080181,0x1009989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89109090,0x98000180,0x1800000,0x5080181,0x1009989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0x88484844,0x90001900,0x811001,0x84118150,0x8810019d,0x11010090,0x1010001,0x40c0100,0xc901108},{0x14119089,0x11000191,0x1010000,0x4011900,0x1d000,0xd0090101,0x8cc12941,0x88484845,0x90001900,0x811001,0x84118150,0x8810019d,0x901101,0x10101,0x100040c,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000100,0x1800101,0x1000000,0x0,0x81001,0x10011180,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000100,0x1800101,0x80000000,0x0,0x4080080,0x88c008,0x10000181,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800080,0x80000001,0x1,0x5080100,0x108c109,0x10000181,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800080,0x1800,0x1000,0x80100050,0x8c109010,0x98000100,0x1800000,0x5080101,0x100d189,0x10c10101,0x1000100,0x1010000,0x10d18c0},{0x10c10181,0x18101,0x1,0xd1800,0x1880,0x1811001,0x81118051,0x8d109090,0x98000100,0x1800000,0x5080101,0x100d189,0xc1010110,0x10001,0x1000001,0xd18c001},{0x10c10181,0x18101,0x1,0xd1800,0xc4000,0xc0880080,0x88c028c0,0x88484846,0x90001900,0x811001,0x851d81d0,0x8c10499d,0x11010010,0x1010001,0x5080100,0xc981108},{0x1c191089,0x11000111,0x1010000,0x5051100,0x1d000,0xd8098101,0x88c12941,0x88484847,0x90001900,0x811001,0x851d81d0,0x8c10499d,0x101101,0x10101,0x1000508,0x11080c98}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1000080,0x80000001,0x1,0x5080180,0x1888109,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1000080,0x1800,0x1000,0x80180050,0x88109018,0x98000180,0x1800000,0x5080181,0x1809989,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd1000,0x1880,0x1811001,0x81198051,0x89909098,0x98000180,0x1800000,0x5080181,0x1809989,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd1000,0xc4000,0xc0880080,0x8cc028c0,0xc8484c44,0x90001980,0x811001,0x841581d0,0x88100195,0x11010010,0x1010001,0x4080180,0xc901108},{0x14111009,0x11000191,0x1010000,0x4051180,0x1d800,0xd0098181,0x8cc129c1,0xc8484c45,0x90001980,0x811001,0x841581d0,0x88100195,0x101101,0x10101,0x1800408,0x11080c90}}, {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0},{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10000,0x0},{0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x10000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x100,0x1000000,0x0},{0x0,0x1,0x10001,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x1,0x0,0x0,0x101,0x1000000,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81,0x10001,0x0,0x1,0x1,0x0,0x0,0x1010000,0x100,0x0},{0x0,0x1,0x18100,0x1000000,0x0,0x0,0x81000,0x10001000,0x10001,0x1,0x1,0x81,0x0,0x1010000,0x101,0x1},{0x1,0x1,0x1000180,0x1800101,0x1000000,0x0,0x81001,0x10011100,0x10001,0x1,0x1,0x81,0x0,0x1000001,0x10100,0x100},{0x1,0x1,0x1000180,0x1800101,0x80000000,0x0,0x4080080,0x888008,0x10000101,0x1000001,0x1,0x81080,0xc1,0x1010000,0x10101,0x101},{0xc0,0x1010001,0x1810001,0x1800000,0x80000001,0x1,0x5080180,0x1088189,0x10000101,0x1000001,0x1,0x81080,0xc10000,0x101,0x1010001,0x1010000},{0xc0,0x1010001,0x1810001,0x1800000,0x1800,0x1000,0x80180050,0x88189010,0x98000180,0x1800000,0x5080181,0x1009909,0x10c10101,0x1000100,0x1010000,0x10d10c0},{0x10c10181,0x18101,0x1,0xd10c0,0x1880,0x1811001,0x81198051,0x89189010,0x98000180,0x1800000,0x5080181,0x1009909,0xc1010110,0x10001,0x1000001,0xd10c001},{0x10c10181,0x18101,0x1,0xd10c0,0xc4000,0xc0880080,0x8cc028c0,0x8c480844,0x90001900,0x811001,0x841181d0,0x8818019d,0x11010090,0x1010001,0x40c0180,0xc901108},{0x14119089,0x11000191,0x1010000,0x4011900,0x1d080,0xd0090101,0x8cc12941,0x8c480845,0x90001900,0x811001,0x841181d0,0x8818019d,0x901101,0x10101,0x180040c,0x11080c90}} };
	//int toChooseIdx[6] = { 20,23,24,25,27,31 };
	double data[5] = { pow(2,32), pow(2,33), pow(2,30),pow(2,36),pow(2,33) };
	double cor[5], totCor = 0;
	for (auto i = 0; i < 4 * 8; i++)
	{
		totCor = 0;
		cor[0] = getChachaExpLcCorGivenInOutMasks_r7r12(fileName, mask_rr14_rr29_multi[i][0], mask_rr14_rr29_multi[i][10], data[0]); //-9
		cor[1] = getChachaExpLcCorGivenInOutMasks_r12r13(fileName, mask_rr14_rr29_multi[i][10], mask_rr14_rr29_multi[i][12], data[1]);//-10
		cor[2] = getChachaExpLcCorGivenInOutMasks_r13r13half(fileName, mask_rr14_rr29_multi[i][12], mask_rr14_rr29_multi[i][13], data[2]);//-6 or -7
		cor[3] = getChachaExpLcCorGivenInOutMasks_r13halfr14(fileName, mask_rr14_rr29_multi[i][13], mask_rr14_rr29_multi[i][14], data[3]);//-13
		cor[4] = getChachaExpLcCorGivenInOutMasks_r14r14half(fileName, mask_rr14_rr29_multi[i][14], mask_rr14_rr29_multi[i][15], data[4]);//-10 or -9
		for (auto j = 0; j < 5; j++) totCor += log(abs(cor[j])) / log(2);
		cout << totCor << endl;
	}
#endif

}
