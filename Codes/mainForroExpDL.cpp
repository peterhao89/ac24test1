#pragma once
#include "basics.h"
#include <fstream>
#include <string>
//#include<windows.h>
#include<omp.h>
#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;
//NTL_CLIENT

#define testNewLcsToR21 1
#define testNewLcsToR22 0

typedef uint32_t TYPE;
uint64_t p = 0x100000000;
//uint32_t p = 0x7fffffff;
random_device rd;
mt19937 gen(rd());
uniform_int_distribution<> dis(0, p - 1);

uint64_t idx2int(std::vector<int> idx)
{
	uint64_t res = 0;
	for (auto i = 0; i < idx.size(); i++)
	{
		res ^= ((uint64_t)1 << idx[i]);
	}
	return res;
}

void forroSubRound(uint32_t in[5], uint32_t out[5])
{
	uint32_t a = in[0], b = in[1], c = in[2], d = in[3], e = in[4];
	uint32_t aa, bb, cc, dd, eOut, dOut, cOut, bOut, aOut;
	dd = (d + e) & 0xffffffff;
	cc = c ^ dd;
	bb = ROL32((cc + b) & 0xffffffff, 10);
	aa = (bb + a) & 0xffffffff;
	eOut = aa ^ e;
	dOut = ROL32((dd + eOut) & 0xffffffff, 27);
	cOut = (cc + dOut) & 0xffffffff;
	bOut = bb ^ cOut;
	aOut = ROL32((aa + bOut) & 0xffffffff, 8);
	out[0] = aOut;
	out[1] = bOut;
	out[2] = cOut;
	out[3] = dOut;
	out[4] = eOut;
}


void ForroStartEnd(uint32_t in[16], uint32_t out[16], int start, int end)
{
	uint32_t iState[16] = { 0 };
	for (auto i = 0; i < 16; i++) iState[i] = in[i];
	for (auto r = start; r < end; r++)
	{
		uint32_t oState[16] = { 0 }; for (auto i = 0; i < 16; i++) oState[i] = iState[i];
		int r0 = r % 8;
		vector<int> useIndex;
		if (r0 >= 0 && r0 < 4)
			useIndex = { r0, r0 + 4, r0 + 8, r0 + 12, (r0 + 3) % 4 };
		else
		{
			int r1 = r0 - 4;
			useIndex = { r1, 4 + ((1 + r1) % 4), 8 + ((2 + r1) % 4), 12 + ((3 + r1) % 4), (r1 + 3) % 4 };
		}
		uint32_t iWords[5], oWords[5];
		for (auto j = 0; j < 5; j++) iWords[j] = iState[useIndex[j]];
		forroSubRound(iWords, oWords);
		for (auto j = 0; j < 5; j++) oState[useIndex[j]] = oWords[j];
		for (auto i = 0; i < 16; i++) iState[i] = oState[i];
	}
	for (auto i = 0; i < 16; i++) out[i] = iState[i];
}

bool innerPro(uint64_t mask, uint64_t val, int len)
{
	bool bit = 0;
	for (auto i = 0; i < len; i++)
	{
		bool p = bit64(mask, i);
		if (p) bit ^= bit64(val, i);
	}
	return bit;
}
void getForroExpDlCorGivenDiffMask(string fileName, uint32_t diff[16], uint32_t mask[16], int start, int end, uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt = 0;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() / 2;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }, output[16] = { 0 };
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		ForroStartEnd(input, output, start, end);
		TYPE input_prime[16] = { 0 }, output_prime[16] = { 0 };
		for (auto i = 0; i < 16; i++) input_prime[i] = input[i] ^ diff[i];
		ForroStartEnd(input_prime, output_prime, start, end);
		TYPE outDiff[16] = { 0x0 };
		for (auto i = 0; i < 16; i++) outDiff[i] = output_prime[i] ^ output[i];
		bool bit_out = 0;
		for (auto i = 0; i < 16; i++)
		{
			bit_out ^= innerPro(mask[i], outDiff[i], 32);
		}
		if (bit_out == 0) cnt++; else cnt--;
	}
	if (cnt)
	{
		cnt = cnt / datasize;
		double cor = log(abs(cnt)) / log(2);
		for (auto i = 0; i < 16; i++)
		{
			uint32_t v = diff[i];
			if (v)
			{
				cout << i << ":["; fout << i << ":[";
				for (auto j = 0; j < 32; j++)
					if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
				cout << "],"; fout << "],";
			}
		} cout << "-->"; fout << "-->";
		for (auto i = 0; i < 16; i++)
		{
			uint32_t v = mask[i];
			if (v)
			{
				cout << i << ":["; fout << i << ":[";
				for (auto j = 0; j < 32; j++)
					if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
				cout << "], "; fout << "], ";
			}
		} //cout << endl; fout << endl;
		cout << cnt << ", " << cor << endl; fout << cnt << ", " << cor << endl;

	}
	float end_Time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_Time - start_time);
	fout << "Multi time: " << end_Time - start_time << endl;
	fout.close();
}
void getForroExpDlCorGivenDiffandSingleBitMaskSet(string fileName, uint32_t diff[16], int singleMaskIdx[], int maskNum, int start, int end, uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double* cnt = new double[maskNum]();
	ofstream fout(fileName, ios::out | ios::app);
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }, output[16] = { 0 };
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		ForroStartEnd(input, output, start, end);
		TYPE input_prime[16] = { 0 }, output_prime[16] = { 0 };
		for (auto i = 0; i < 16; i++) input_prime[i] = input[i] ^ diff[i];
		ForroStartEnd(input_prime, output_prime, start, end);
		TYPE outDiff[16] = { 0x0 };
		for (auto i = 0; i < 16; i++) outDiff[i] = output_prime[i] ^ output[i];
		for (auto i = 0; i < maskNum; i++)
		{
			bool bit_out = 0;
			int idx = singleMaskIdx[i];
			int a = idx / 32, b = idx % 32;
			bit_out = bit64(outDiff[a], b);
			if (bit_out == 0) cnt[i] += 1.0; else cnt[i] -= 1.0;
		}
	}
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = diff[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 0; j < 32; j++)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	} cout << "-->"; fout << "-->";
	for (auto i = 0; i < maskNum; i++)
	{
		cnt[i] = cnt[i] / datasize;
		double cor = log(abs(cnt[i])) / log(2);
		int idx = singleMaskIdx[i];
		int a = idx / 32, b = idx % 32;
		cout << "v_" << a << "[" << b << "], " << cnt[i] << ", " << cor << endl;
		fout << "v_" << a << "[" << b << "], " << cnt[i] << ", " << cor << endl;
	}
	delete[] cnt;
	float end_Time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_Time - start_time);
	fout << "Multi time: " << end_Time - start_time << endl;
	fout.close();
}
void getForroExpDlCorGivenDiffandMaskIdx(string fileName, uint32_t diff[16], int maskIdx, int start, int end, uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt = 0;
	int a = maskIdx / 32, b = maskIdx % 32;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() / 2;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }, output[16] = { 0 };
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		ForroStartEnd(input, output, start, end);
		TYPE input_prime[16] = { 0 }, output_prime[16] = { 0 };
		for (auto i = 0; i < 16; i++) input_prime[i] = input[i] ^ diff[i];
		ForroStartEnd(input_prime, output_prime, start, end);
		TYPE outDiff[16] = { 0x0 };
		for (auto i = 0; i < 16; i++) outDiff[i] = output_prime[i] ^ output[i];
		bool bit_out = 0;
		bit_out = bit64(outDiff[a], b);
		if (bit_out == 0) cnt += 1.0; else cnt -= 1.0;
	}
	cnt = cnt / datasize;
	double cor = log(abs(cnt)) / log(2);
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = diff[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 0; j < 32; j++)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	} cout << "-->"; fout << "-->";
	cout << "v_" << a << "[" << b << "], " << cnt << ", " << cor << endl;
	fout << "v_" << a << "[" << b << "], " << cnt << ", " << cor << endl;
	float end_Time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_Time - start_time);
	fout << "Multi time: " << end_Time - start_time << endl;
	fout.close();
}

double getForroExpLcCorGivenInOutMasks(string fileName, uint32_t inMask[16], uint32_t outMask[16], int start, int end, uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt = 0;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() / 4; cout << useCoreNumber << endl;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }, output[16] = { 0 }; for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		bool bitIn = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = inMask[i];
			if (mask) bitIn ^= innerPro(mask, input[i], 32);
		}
		ForroStartEnd(input, output, start, end);
		bool bitOut = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = outMask[i];
			if (mask) bitOut ^= innerPro(mask, output[i], 32);
		}
		bool bit = bitIn ^ bitOut;
		if (bit == 0) cnt++; else cnt--;
	}
	cnt = cnt / datasize;
	double cor = log(abs(cnt)) / log(2);
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = inMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	} cout << "-->"; fout << "-->";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = outMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	}
	cout << cnt << ", " << cor << endl; fout << cnt << ", " << cor << endl;
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();
	return cnt;
}


int main()
{

#if testNewLcsToR21
	double data[6] = { pow(2,28),pow(2,29), pow(2,26),pow(2,31),pow(2,30),pow(2,32) };
#if 1//test our new LCs, Group 0
	string fileName = "Forro LC(r8 to r21), our new, Group 0.txt";
	uint32_t outMask_r8_r21_0[12][16] = { {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1000008,0x8018001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x10000,0x1000008,0x580042c,0x0,0x0,0x180,0xc018421,0x1,0x1,0x1,0x8010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x10000,0x1000008,0x580042c,0xc01,0x0,0x180,0xc018421,0x181,0x1,0x1,0x8010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1000008,0x580042c,0xc01,0x80d8180,0x180,0xc018421,0x181,0x18001,0x1,0x8010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1400101,0x580042c,0xc01,0x80d8180,0x50009,0xc018421,0x181,0x18001,0x1840109,0x8010001,0x8000001,0x8400001,0x400181}, {0x800c0001,0x4090101,0x801000d,0x1410180,0x580042c,0x1200000,0x80d8180,0x50009,0xc018421,0x181,0x210400,0x1840109,0x8010001,0x8000001,0x8400001,0x30008} };
	double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_0[0], outMask_r8_r21_0[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_0[r - 10], outMask_r8_r21_0[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_0[10], outMask_r8_r21_0[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

	uint32_t outMask_r8_r21_1[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1000008,0xc018001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x10000,0x1000008,0x580042c,0x0,0x0,0x180,0xc018421,0x1,0x1,0x1,0xc010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x10000,0x1000008,0x580042c,0xc01,0x0,0x180,0xc018421,0x181,0x1,0x1,0xc010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1000008,0x580042c,0xc01,0x80d8180,0x180,0xc018421,0x181,0x18001,0x1,0xc010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1400101,0x580042c,0xc01,0x80d8180,0x50009,0xc018421,0x181,0x18001,0x1840109,0xc010001,0x8000001,0x8400001,0x400181}, {0x800c0001,0x4090101,0x801000d,0x1410180,0x580042c,0x1200000,0x80d8180,0x50009,0xc018421,0x181,0x210400,0x1840109,0xc010001,0x8000001,0x8400001,0x30008} };
	//double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_1[0], outMask_r8_r21_1[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_1[r - 10], outMask_r8_r21_1[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_1[10], outMask_r8_r21_1[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

	uint32_t outMask_r8_r21_2[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1,0x0,0x0,0x0,0x100,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1800008,0x8018001,0x0,0x0,0x100,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x18000,0x1800008,0x500042c,0x0,0x0,0x100,0xc018421,0x1,0x1,0x1,0x8010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x18000,0x1800008,0x500042c,0xc01,0x0,0x100,0xc018421,0x181,0x1,0x1,0x8010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1800008,0x500042c,0xc01,0x80d0180,0x100,0xc018421,0x181,0x10001,0x1,0x8010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1400101,0x500042c,0xc01,0x80d0180,0x870009,0xc018421,0x181,0x10001,0x1060109,0x8010001,0x8000001,0x8400001,0x400181}, {0x800c0001,0x4090101,0x801000d,0x1410180,0x500042c,0x1200000,0x80d0180,0x870009,0xc018421,0x181,0x210400,0x1060109,0x8010001,0x8000001,0x8400001,0x38408} };
	//double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_2[0], outMask_r8_r21_2[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_2[r - 10], outMask_r8_r21_2[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_2[10], outMask_r8_r21_2[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

	uint32_t outMask_r8_r21_3[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1,0x0,0x0,0x0,0x100,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1800008,0xc018001,0x0,0x0,0x100,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x18000,0x1800008,0x500042c,0x0,0x0,0x100,0xc018421,0x1,0x1,0x1,0xc010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x18000,0x1800008,0x500042c,0xc01,0x0,0x100,0xc018421,0x181,0x1,0x1,0xc010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1800008,0x500042c,0xc01,0x80d0180,0x100,0xc018421,0x181,0x10001,0x1,0xc010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1400101,0x500042c,0xc01,0x80d0180,0x870009,0xc018421,0x181,0x10001,0x1860109,0xc010001,0x8000001,0x8400001,0x400181}, {0x800c0001,0x4090101,0x801000d,0x1410180,0x500042c,0x1200000,0x80d0180,0x870009,0xc018421,0x181,0x210400,0x1860109,0xc010001,0x8000001,0x8400001,0x38408} };
	//double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_3[0], outMask_r8_r21_3[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_3[r - 10], outMask_r8_r21_3[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_3[10], outMask_r8_r21_3[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

	uint32_t outMask_r8_r21_4[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1000008,0xc018001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x10000,0x1000008,0x580042c,0x0,0x0,0x180,0xc018421,0x1,0x1,0x1,0xc010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x10000,0x1000008,0x580042c,0xc01,0x0,0x180,0xc018421,0x181,0x1,0x1,0xc010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1000008,0x580042c,0xc01,0x80d8180,0x180,0xc018421,0x181,0x18001,0x1,0xc010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1000101,0x580042c,0xc01,0x80d8180,0x58009,0xc018421,0x181,0x18001,0x1840109,0xc010001,0x8000001,0x8400001,0x400181}, {0xe00c0001,0x4090101,0x801000d,0x1010180,0x580042c,0x1600000,0x80d8180,0x58009,0xc018421,0x181,0x210400,0x1840109,0xc010001,0x8000001,0x8400001,0x30008} };
	//double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_4[0], outMask_r8_r21_4[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_4[r - 10], outMask_r8_r21_4[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_4[10], outMask_r8_r21_4[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

	uint32_t outMask_r8_r21_5[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1000008,0x8018001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x10000,0x1000008,0x580042c,0x0,0x0,0x180,0xc018421,0x1,0x1,0x1,0x8010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x10000,0x1000008,0x580042c,0xc01,0x0,0x180,0xc018421,0x181,0x1,0x1,0x8010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1000008,0x580042c,0xc01,0x80d8180,0x180,0xc018421,0x181,0x18001,0x1,0x8010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1400101,0x580042c,0xc01,0x80d8180,0x70009,0xc018421,0x181,0x18001,0x1060189,0x8010001,0x8000001,0x8400001,0x400181}, {0x800c0001,0x4090101,0x801000d,0x1410180,0x580042c,0x1200000,0x80d8180,0x70009,0xc018421,0x181,0x210400,0x1060189,0x8010001,0x8000001,0x8400001,0x30008} };
	//double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_5[0], outMask_r8_r21_5[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_5[r - 10], outMask_r8_r21_5[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_5[10], outMask_r8_r21_5[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;
#endif

#if 0//Group 1
	string fileName = "Forro LC(r8 to r21), our new, Group 1.txt";
	uint32_t outMask_r8_r21_6[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1,0x0,0x0,0x0,0x100,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1800008,0x8018001,0x0,0x0,0x100,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x18000,0x1800008,0x500042c,0x0,0x0,0x100,0xc018421,0x1,0x1,0x1,0x8010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x18000,0x1800008,0x500042c,0xc01,0x0,0x100,0xc018421,0x101,0x1,0x1,0x8010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1800008,0x500042c,0xc01,0x80d0180,0x100,0xc018421,0x101,0x10001,0x1,0x8010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1400101,0x500042c,0xc01,0x80d0180,0x870009,0xc018421,0x101,0x10001,0x1060109,0x8010001,0x8000001,0x8400001,0x400181}, {0x800c0001,0x4090101,0x801000d,0x1410180,0x500042c,0x1200000,0x80d0180,0x870009,0xc018421,0x101,0x210400,0x1060109,0x8010001,0x8000001,0x8400001,0x38408} };
	double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_6[0], outMask_r8_r21_6[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_6[r - 10], outMask_r8_r21_6[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_6[10], outMask_r8_r21_6[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

	uint32_t outMask_r8_r21_7[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1000008,0xc018001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x10000,0x1000008,0x580042c,0x0,0x0,0x180,0xc018421,0x1,0x1,0x1,0xc010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x10000,0x1000008,0x580042c,0xc01,0x0,0x180,0xc018421,0x101,0x1,0x1,0xc010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1000008,0x580042c,0xc01,0x80d8180,0x180,0xc018421,0x101,0x18001,0x1,0xc010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1400101,0x580042c,0xc01,0x80d8180,0x50009,0xc018421,0x101,0x18001,0x1840109,0xc010001,0x8000001,0x8400001,0x400181}, {0x800c0001,0x4090101,0x801000d,0x1410180,0x580042c,0x1200000,0x80d8180,0x50009,0xc018421,0x101,0x210400,0x1840109,0xc010001,0x8000001,0x8400001,0x30008} };
	//double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_7[0], outMask_r8_r21_7[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_7[r - 10], outMask_r8_r21_7[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_7[10], outMask_r8_r21_7[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

	uint32_t outMask_r8_r21_8[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1000008,0xc018001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x10000,0x1000008,0x580042c,0x0,0x0,0x180,0xc018421,0x1,0x1,0x1,0xc010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x10000,0x1000008,0x580042c,0xc01,0x0,0x180,0xc018421,0x181,0x1,0x1,0xc010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1000008,0x580042c,0xc01,0x80d8180,0x180,0xc018421,0x181,0x18001,0x1,0xc010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1000101,0x580042c,0xc01,0x80d8180,0x58009,0xc018421,0x181,0x18001,0x1840109,0xc010001,0x8000001,0x8400001,0x400181}, {0xc0001,0x4090101,0x801000d,0x1010180,0x580042c,0x1200000,0x80d8180,0x58009,0xc018421,0x181,0x210400,0x1840109,0xc010001,0x8000001,0x8400001,0x30008} };
	//double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_8[0], outMask_r8_r21_8[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_8[r - 10], outMask_r8_r21_8[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_8[10], outMask_r8_r21_8[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

	uint32_t outMask_r8_r21_9[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1,0x0,0x0,0x0,0x100,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1000008,0xc010001,0x0,0x0,0x100,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x18000,0x1000008,0x780042c,0x0,0x0,0x100,0xe018421,0x1,0x1,0x1,0xc010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x18000,0x1000008,0x780042c,0xc01,0x0,0x100,0xe018421,0x181,0x1,0x1,0xc010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1000008,0x780042c,0xc01,0x80d0180,0x100,0xe018421,0x181,0x10001,0x1,0xc010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1400101,0x780042c,0xc01,0x80d0180,0x70009,0xe018421,0x181,0x10001,0x1860109,0xc010001,0x8000001,0x8400001,0x400181}, {0x800c0001,0x4090101,0x801000d,0x1410180,0x780042c,0x1200000,0x80d0180,0x70009,0xe018421,0x181,0x210400,0x1860109,0xc010001,0x8000001,0x8400001,0x38408} };
	//double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_9[0], outMask_r8_r21_9[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_9[r - 10], outMask_r8_r21_9[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_9[10], outMask_r8_r21_9[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

	uint32_t outMask_r8_r21_10[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1000008,0x8018001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x10000,0x1000008,0x580042c,0x0,0x0,0x180,0xc018421,0x1,0x1,0x1,0x8010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x10000,0x1000008,0x580042c,0xc01,0x0,0x180,0xc018421,0x101,0x1,0x1,0x8010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1000008,0x580042c,0xc01,0x80d8180,0x180,0xc018421,0x101,0x18001,0x1,0x8010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1400101,0x580042c,0xc01,0x80d8180,0x70009,0xc018421,0x101,0x18001,0x1060189,0x8010001,0x8000001,0x8400001,0x400181}, {0x800c0001,0x4090101,0x801000d,0x1410180,0x580042c,0x1200000,0x80d8180,0x70009,0xc018421,0x101,0x210400,0x1060189,0x8010001,0x8000001,0x8400001,0x30008} };
	//double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_10[0], outMask_r8_r21_10[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_10[r - 10], outMask_r8_r21_10[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_10[10], outMask_r8_r21_10[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;
#endif

#if 0//Group 2
	string fileName = "Forro LC(r8 to r21), our new, Group 2.txt";
	uint32_t outMask_r8_r21_11[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1000008,0x8018001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x10000,0x1000008,0x580042c,0x0,0x0,0x180,0xc018421,0x1,0x1,0x1,0x8010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x10000,0x1000008,0x580042c,0xc01,0x0,0x180,0xc018421,0x181,0x1,0x1,0x8010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1000008,0x580042c,0xc01,0x80d8180,0x180,0xc018421,0x181,0x18001,0x1,0x8010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1400101,0x580042c,0xc01,0x80d8180,0x50009,0xc018421,0x181,0x18001,0x1040109,0x8010001,0x8000001,0x8400001,0x400181}, {0x800c0001,0x4090101,0x801000d,0x1410180,0x580042c,0x1200000,0x80d8180,0x50009,0xc018421,0x181,0x210400,0x1040109,0x8010001,0x8000001,0x8400001,0x30008} };
	double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_11[0], outMask_r8_r21_11[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_11[r - 10], outMask_r8_r21_11[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_11[10], outMask_r8_r21_11[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

	uint32_t outMask_r8_r21_12[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1000008,0x8018001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x10000,0x1000008,0x580042c,0x0,0x0,0x180,0xc018421,0x1,0x1,0x1,0x8010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x10000,0x1000008,0x580042c,0xc01,0x0,0x180,0xc018421,0x181,0x1,0x1,0x8010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1000008,0x580042c,0xc01,0x80d8180,0x180,0xc018421,0x181,0x18001,0x1,0x8010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1400101,0x580042c,0xc01,0x80d8180,0x70009,0xc018421,0x181,0x18001,0x1060109,0x8010001,0x8000001,0x8400001,0x400101}, {0x800c0001,0x4090101,0x801000d,0x1410100,0x580042c,0x1200000,0x80d8180,0x70009,0xc018421,0x181,0x210400,0x1060109,0x8010001,0x8000001,0x8400001,0x30008} };
	//double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_12[0], outMask_r8_r21_12[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_12[r - 10], outMask_r8_r21_12[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_12[10], outMask_r8_r21_12[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

	uint32_t outMask_r8_r21_13[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1,0x0,0x0,0x0,0x100,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1800008,0x8018001,0x0,0x0,0x100,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x18000,0x1800008,0x500042c,0x0,0x0,0x100,0xc018421,0x1,0x1,0x1,0x8010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x18000,0x1800008,0x500042c,0xc01,0x0,0x100,0xc018421,0x181,0x1,0x1,0x8010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1800008,0x500042c,0xc01,0x80d0180,0x100,0xc018421,0x181,0x10001,0x1,0x8010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1400101,0x500042c,0xc01,0x80d0180,0x870009,0xc018421,0x181,0x10001,0x1060109,0x8010001,0x8000001,0x8400001,0x400181}, {0x80080001,0x4090101,0x801000d,0x1410180,0x500042c,0x1200400,0x80d0180,0x870009,0xc018421,0x181,0x210400,0x1060109,0x8010001,0x8000001,0x8400001,0x38408} };
	//double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_13[0], outMask_r8_r21_13[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_13[r - 10], outMask_r8_r21_13[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_13[10], outMask_r8_r21_13[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

	uint32_t outMask_r8_r21_14[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1000008,0xc018001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x10000,0x1000008,0x580042c,0x0,0x0,0x180,0xc018421,0x1,0x1,0x1,0xc010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x10000,0x1000008,0x580042c,0xc01,0x0,0x180,0xc018421,0x101,0x1,0x1,0xc010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x8010008,0x1000008,0x580042c,0xc01,0xc0d8180,0x180,0xc018421,0x101,0x18001,0x1,0xc010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x8010009,0x1400101,0x580042c,0xc01,0xc0d8180,0x5000d,0xc018421,0x101,0x18001,0x184010d,0xc010001,0x8000001,0x8400001,0x400181}, {0x800c0001,0x4090101,0x8010009,0x1410180,0x580042c,0x1200000,0xc0d8180,0x5000d,0xc018421,0x101,0x210400,0x184010d,0xc010001,0x8000001,0x8400001,0x30008} };
	//double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_14[0], outMask_r8_r21_14[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_14[r - 10], outMask_r8_r21_14[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_14[10], outMask_r8_r21_14[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

	uint32_t outMask_r8_r21_15[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1,0x0,0x0,0x0,0x100,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1800008,0xc018001,0x0,0x0,0x100,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x18000,0x1800008,0x500042c,0x0,0x0,0x100,0xc018421,0x1,0x1,0x1,0xc010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x18000,0x1800008,0x500042c,0xc01,0x0,0x100,0xc018421,0x181,0x1,0x1,0xc010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1800008,0x500042c,0xc01,0x80d0180,0x100,0xc018421,0x181,0x10001,0x1,0xc010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1400101,0x500042c,0xc01,0x80d0180,0x870009,0xc018421,0x181,0x10001,0x1060109,0xc010001,0x8000001,0x8400001,0x400181}, {0x80080001,0x4090101,0x801000d,0x1410180,0x500042c,0x1200400,0x80d0180,0x870009,0xc018421,0x181,0x210400,0x1060109,0xc010001,0x8000001,0x8400001,0x38408} };
	//double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_15[0], outMask_r8_r21_15[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_15[r - 10], outMask_r8_r21_15[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_15[10], outMask_r8_r21_15[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;


#endif

#if 0//Group 3
	string fileName = "Forro LC(r8 to r21), our new, Group 3.txt";
	uint32_t outMask_r8_r21_16[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1,0x0,0x0,0x0,0x100,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1800008,0xc018001,0x0,0x0,0x100,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x18000,0x1800008,0x500042c,0x0,0x0,0x100,0xc018421,0x1,0x1,0x1,0xc010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x18000,0x1800008,0x500042c,0xc01,0x0,0x100,0xc018421,0x181,0x1,0x1,0xc010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801800c,0x1800008,0x500042c,0xc01,0x80d0100,0x100,0xc018421,0x181,0x10001,0x1,0xc010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801800d,0x1400101,0x500042c,0xc01,0x80d0100,0x878009,0xc018421,0x181,0x10001,0x1860109,0xc010001,0x8000001,0x8400001,0x400181}, {0x800c0001,0x4090101,0x801800d,0x1410180,0x500042c,0x1200000,0x80d0100,0x878009,0xc018421,0x181,0x210400,0x1860109,0xc010001,0x8000001,0x8400001,0x38408} };
	double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_16[0], outMask_r8_r21_16[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_16[r - 10], outMask_r8_r21_16[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_16[10], outMask_r8_r21_16[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

	uint32_t outMask_r8_r21_17[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1,0x0,0x0,0x0,0x100,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1000008,0xc010001,0x0,0x0,0x100,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x18000,0x1000008,0x780042c,0x0,0x0,0x100,0xe018421,0x1,0x1,0x1,0xc010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x18000,0x1000008,0x780042c,0xc01,0x0,0x100,0xe018421,0x181,0x1,0x1,0xc010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1000008,0x780042c,0xc01,0x80d0180,0x100,0xe018421,0x181,0x10001,0x1,0xc010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1400101,0x780042c,0xc01,0x80d0180,0x50009,0xe018421,0x181,0x10001,0x1840109,0xc010001,0x8000001,0x8400001,0x400101}, {0x800c0001,0x4090101,0x801000d,0x1410180,0x780042c,0x1200000,0x80d0180,0x50009,0xe018421,0x181,0x210400,0x1840109,0xc010001,0x8000001,0x8400001,0x3840c} };
	//double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_17[0], outMask_r8_r21_17[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_17[r - 10], outMask_r8_r21_17[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_17[10], outMask_r8_r21_17[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

	uint32_t outMask_r8_r21_18[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1,0x0,0x0,0x0,0x100,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1000008,0xc010001,0x0,0x0,0x100,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x18000,0x1000008,0x580042c,0x0,0x0,0x100,0xc010421,0x1,0x1,0x1,0xc010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x18000,0x1000008,0x580042c,0xc01,0x0,0x100,0xc010421,0x181,0x1,0x1,0xc010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1000008,0x580042c,0xc01,0x80d0180,0x100,0xc010421,0x181,0x10001,0x1,0xc010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1400101,0x580042c,0xc01,0x80d0180,0x70009,0xc010421,0x181,0x10001,0x1860109,0xc010001,0x8000001,0x8400001,0x400181}, {0x800c0001,0x4090101,0x801000d,0x1410180,0x580042c,0x1200000,0x80d0180,0x70009,0xc010421,0x181,0x210400,0x1860109,0xc010001,0x8000001,0x8400001,0x38408} };
	//double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_18[0], outMask_r8_r21_18[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_18[r - 10], outMask_r8_r21_18[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_18[10], outMask_r8_r21_18[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

	uint32_t outMask_r8_r21_19[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1,0x0,0x0,0x0,0x100,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x18000,0x1000008,0xc010001,0x0,0x0,0x100,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x18000,0x1000008,0x780042c,0x0,0x0,0x100,0xe018421,0x1,0x1,0x1,0xc010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x18000,0x1000008,0x780042c,0xc01,0x0,0x100,0xe018421,0x181,0x1,0x1,0xc010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0xc01000c,0x1000008,0x780042c,0xc01,0x8090180,0x100,0xe018421,0x181,0x10001,0x1,0xc010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1400101,0x780042c,0xc01,0x8090180,0x70009,0xe018421,0x181,0x10001,0x1860109,0xc010001,0x8000001,0x8400001,0x600181}, {0x800c0001,0x4090101,0x801000d,0x1610180,0x780042c,0x1200000,0x8090180,0x70009,0xe018421,0x181,0x210400,0x1860109,0xc010001,0x8000001,0x8400001,0x38408} };
	//double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_19[0], outMask_r8_r21_19[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_19[r - 10], outMask_r8_r21_19[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_19[10], outMask_r8_r21_19[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

	uint32_t outMask_r8_r21_20[12][16] =
	{ {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1000008,0x8018001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8400000,0x8000001}, {0x801,0x100,0x10000,0x1000008,0x580042c,0x0,0x0,0x180,0xc018421,0x1,0x1,0x1,0x8010001,0x0,0x8400000,0x8000001}, {0x800,0x90100,0x10000,0x1000008,0x580042c,0xc01,0x0,0x180,0xc018421,0x181,0x1,0x1,0x8010001,0x8000001,0x8400000,0x8000001}, {0x800,0x4090101,0x801000c,0x1000008,0x580042c,0xc01,0x80d8180,0x180,0xc018421,0x181,0x18001,0x1,0x8010001,0x8000001,0x8400001,0x8000001}, {0x800,0x4090101,0x801000d,0x1400101,0x580042c,0xc01,0x80d8180,0x70009,0xc018421,0x181,0x18001,0x1060109,0x8010001,0x8000001,0x8400001,0x400101}, {0x800c0001,0x4090101,0x801000d,0x1410180,0x580042c,0x1200000,0x80d8180,0x70009,0xc018421,0x181,0x210400,0x1060109,0x8010001,0x8000001,0x8400001,0x3000c} };
	//double cor[6] = { 0.0 }, logRes = 0;
	cor[0] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_20[0], outMask_r8_r21_20[6], 10, 16, data[0]);
	for (int r = 16; r < 20; r++) cor[r - 16 + 1] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_20[r - 10], outMask_r8_r21_20[r - 10 + 1], r, r + 1, data[r - 16 + 1]);
	cor[5] = getForroExpLcCorGivenInOutMasks(fileName, outMask_r8_r21_20[10], outMask_r8_r21_20[11], 20, 21, data[5]);
	for (auto i = 0; i < 6; i++) logRes += log(abs(cor[i])); cout << logRes << endl << endl;

#endif
#endif

#if testNewLcsToR22//test LCs for r8(r14)-->r22 (-60): partition r14-->r15 (-1), r15-->r16 (-13), r16-->r17 (-3), r17-->r18 (-5), r18-->r19 (-10), r19-->r20 (-5), r20-->r21 (-9), r21-->r22 (-14)
	string fileName = "Forro LC(r10 to r22), our new, 5-th.txt";
	uint32_t outMask_r10_r22_multiple[32][13][16] = { {{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x181,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x181,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x181,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x181,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x400a018d,0x6c,0x8000009,0x200101,0x42c,0x700001,0x78080031,0x40009,0x8000421,0x181,0x300000,0x3c00013c,0x48682105,0x8000001,0x8430001,0x20809}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x8,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0x800,0x100,0x0,0x8,0x43c,0x0,0x0,0x180,0xc000431,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0x801,0xc0000,0x0,0x8,0x43c,0xc00,0x0,0x180,0xc000431,0x181,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0x801,0xc0001,0x800000c,0x8,0x43c,0xc00,0x8080000,0x180,0xc000431,0x181,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0x801,0xc0001,0x800000d,0x100,0x43c,0xc00,0x8080000,0x40009,0xc000431,0x181,0x1,0x40109,0xc000001,0x8000001,0x8430001,0x400181}, {0x400c0000,0xc0001,0x800000d,0x181,0x43c,0x600401,0x8080000,0x40009,0xc000431,0x181,0x200400,0x40109,0xc000001,0x8000001,0x8430001,0x20c09}, {0x400a018d,0x4c,0x800000d,0x181,0x43c,0x600401,0x580c0021,0x40009,0xc000431,0x181,0x200400,0x3804012c,0x48682181,0x8000001,0x8430001,0x20c09}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x8,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0x800,0x100,0x0,0x8,0x43c,0x0,0x0,0x180,0xc000431,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0x801,0xc0000,0x0,0x8,0x43c,0xc00,0x0,0x180,0xc000431,0x181,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0x801,0xc0001,0x800000c,0x8,0x43c,0xc00,0x8080000,0x180,0xc000431,0x181,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0x801,0xc0001,0x800000d,0x100,0x43c,0xc00,0x8080000,0x40009,0xc000431,0x181,0x1,0x40109,0xc000001,0x8000001,0x8430001,0x400181}, {0x400c0000,0xc0001,0x800000d,0x181,0x43c,0x600401,0x8080000,0x40009,0xc000431,0x181,0x200000,0x40109,0xc000001,0x8000001,0x8430001,0x20809}, {0x400a018d,0x4c,0x800000d,0x181,0x43c,0x600401,0x580c0021,0x40009,0xc000431,0x181,0x200000,0x3804012c,0x48682181,0x8000001,0x8430001,0x20809}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x181,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x181,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x181,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x181,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x400a018d,0x4c,0x8000009,0x200101,0x42c,0x700001,0x58080031,0x40009,0x8000421,0x181,0x300000,0x3c00013c,0x48682105,0x8000001,0x8430001,0x20809}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x181,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x181,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x181,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x181,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x400a010d,0x6c,0x8000009,0x200101,0x42c,0x700001,0x78080031,0x40009,0x8000421,0x181,0x300000,0x3c00013c,0x48682101,0x8000001,0x8430001,0x20809}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x400a018d,0x6c,0x8000009,0x200101,0x42c,0x700001,0x78080031,0x40009,0x8000421,0x101,0x300000,0x3c00013c,0x48682105,0x8000001,0x8430001,0x20809}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x181,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x181,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x181,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x181,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x400a010d,0x4c,0x8000009,0x200101,0x42c,0x700001,0x58080031,0x40009,0x8000421,0x181,0x300000,0x3c00013c,0x48682101,0x8000001,0x8430001,0x20809}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x400a018d,0x4c,0x8000009,0x200101,0x42c,0x700001,0x58080031,0x40009,0x8000421,0x101,0x300000,0x3c00013c,0x48682105,0x8000001,0x8430001,0x20809}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x8,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0x800,0x100,0x0,0x8,0x43c,0x0,0x0,0x180,0xc000431,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0x801,0xc0000,0x0,0x8,0x43c,0xc00,0x0,0x180,0xc000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0x801,0xc0001,0x800000c,0x8,0x43c,0xc00,0x8080000,0x180,0xc000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0x801,0xc0001,0x800000d,0x100,0x43c,0xc00,0x8080000,0x40009,0xc000431,0x101,0x1,0x40109,0xc000001,0x8000001,0x8430001,0x400181}, {0x400c0000,0xc0001,0x800000d,0x181,0x43c,0x600401,0x8080000,0x40009,0xc000431,0x101,0x200400,0x40109,0xc000001,0x8000001,0x8430001,0x20c09}, {0x400a018d,0x4c,0x800000d,0x181,0x43c,0x600401,0x580c0021,0x40009,0xc000431,0x101,0x200400,0x3804012c,0x48682181,0x8000001,0x8430001,0x20c09}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x8,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0x800,0x100,0x0,0x8,0x43c,0x0,0x0,0x180,0xc000431,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0x801,0xc0000,0x0,0x8,0x43c,0xc00,0x0,0x180,0xc000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0x801,0xc0001,0x800000c,0x8,0x43c,0xc00,0x8080000,0x180,0xc000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0x801,0xc0001,0x800000d,0x100,0x43c,0xc00,0x8080000,0x40009,0xc000431,0x101,0x1,0x40109,0xc000001,0x8000001,0x8430001,0x400181}, {0x400c0000,0xc0001,0x800000d,0x181,0x43c,0x600401,0x8080000,0x40009,0xc000431,0x101,0x200000,0x40109,0xc000001,0x8000001,0x8430001,0x20809}, {0x400a018d,0x4c,0x800000d,0x181,0x43c,0x600401,0x580c0021,0x40009,0xc000431,0x101,0x200000,0x3804012c,0x48682181,0x8000001,0x8430001,0x20809}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x400a010d,0x6c,0x8000009,0x200101,0x42c,0x700001,0x78080031,0x40009,0x8000421,0x101,0x300000,0x3c00013c,0x48682101,0x8000001,0x8430001,0x20809}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x8,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0x800,0x100,0x0,0x8,0x43c,0x0,0x0,0x180,0xc000431,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0x801,0xc0000,0x0,0x8,0x43c,0xc00,0x0,0x180,0xc000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0x801,0xc0001,0x800000c,0x8,0x43c,0xc00,0x8080000,0x180,0xc000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0x801,0xc0001,0x800000d,0x100,0x43c,0xc00,0x8080000,0x40009,0xc000431,0x101,0x1,0x40109,0xc000001,0x8000001,0x8430001,0x400181}, {0x400c0000,0xc0001,0x800000d,0x181,0x43c,0x600401,0x8080000,0x40009,0xc000431,0x101,0x200000,0x40109,0xc000001,0x8000001,0x8430001,0x20809}, {0x4008018d,0x6c,0x800000d,0x181,0x43c,0x600401,0x780c0021,0x40009,0xc000431,0x101,0x200000,0x380401ac,0x48683101,0x8000001,0x8430001,0x20809}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x8,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0x800,0x100,0x0,0x8,0x43c,0x0,0x0,0x180,0xc000431,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0x801,0xc0000,0x0,0x8,0x43c,0xc00,0x0,0x180,0xc000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0x801,0xc0001,0x800000c,0x8,0x43c,0xc00,0x8080000,0x180,0xc000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0x801,0xc0001,0x800000d,0x100,0x43c,0xc00,0x8080000,0x40009,0xc000431,0x101,0x1,0x40109,0xc000001,0x8000001,0x8430001,0x400181}, {0x400c0000,0xc0001,0x800000d,0x181,0x43c,0x600401,0x8080000,0x40009,0xc000431,0x101,0x200000,0x40109,0xc000001,0x8000001,0x8430001,0x20809}, {0x440a018d,0x4c,0x800000d,0x181,0x43c,0x600401,0x580c0021,0x40009,0xc000431,0x101,0x200000,0x3804012c,0x48482181,0x8000001,0x8430001,0x20809}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x8,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0x800,0x100,0x0,0x8,0x43c,0x0,0x0,0x180,0xc000431,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0x801,0xc0000,0x0,0x8,0x43c,0xc00,0x0,0x180,0xc000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0x801,0xc0001,0x800000c,0x8,0x43c,0xc00,0x8080000,0x180,0xc000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0x801,0xc0001,0x800000d,0x100,0x43c,0xc00,0x8080000,0x40009,0xc000431,0x101,0x1,0x40109,0xc000001,0x8000001,0x8430001,0x400181}, {0x400c0000,0xc0001,0x800000d,0x181,0x43c,0x600401,0x8080000,0x40009,0xc000431,0x101,0x200400,0x40109,0xc000001,0x8000001,0x8430001,0x20c09}, {0x4408018d,0x68,0x800000d,0x181,0x43c,0x600401,0x7c0c0021,0x40009,0xc000431,0x101,0x200400,0x3c04012c,0x4c483181,0x8000001,0x8430001,0x20c09}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x440a010d,0x48,0x8000009,0x200101,0x42c,0x700001,0x5c080031,0x40009,0x8000421,0x101,0x300000,0x3c00013c,0x48482101,0x8000001,0x8430001,0x20809}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x400a010d,0x4c,0x8000009,0x200101,0x42c,0x700001,0x58080031,0x40009,0x8000421,0x101,0x300000,0x3c00013c,0x48682101,0x8000001,0x8430001,0x20809}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x440a018d,0x68,0x8000009,0x200101,0x42c,0x700001,0x7c080031,0x40009,0x8000421,0x101,0x300000,0x3800013c,0x4c482105,0x8000001,0x8430001,0x20809}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0x8000008,0xc,0x42c,0xc00,0x80c0000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x80c0000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x400101}, {0x400c0000,0x80001,0x8000009,0x101,0x42c,0x500001,0x80c0000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x400a018d,0x6c,0x8000009,0x101,0x42c,0x500001,0x68080031,0x40009,0x8000421,0x101,0x300000,0x2c0001b8,0x48682181,0x8000001,0x8430001,0x20809}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x600c0000,0x80001,0x8000009,0x200101,0x42c,0x500001,0x8080000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x600a018d,0x6c,0x8000009,0x200101,0x42c,0x500001,0x58080031,0x40009,0x8000421,0x101,0x300000,0x3c00013c,0x48682105,0x8000001,0x8430001,0x20809}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x440a010d,0x48,0x8000009,0x200101,0x42c,0x700001,0x5c080031,0x40009,0x8000421,0x101,0x300000,0x3800013c,0x4c482101,0x8000001,0x8430001,0x20809}},
		{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x30809}, {0x400a010d,0x4c,0x8000009,0x101,0x42c,0x700001,0x58080031,0x40009,0x8000421,0x101,0x300000,0x3800013c,0x4c682101,0x8000001,0x8430001,0x30809}},
{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x400a010d,0x4c,0x8000009,0x200101,0x42c,0x700001,0x48080031,0x40009,0x8000421,0x101,0x300000,0x2c00013c,0x486c2101,0x8000001,0x8430001,0x20809}},
{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x8,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0x800,0x100,0x0,0x8,0x43c,0x0,0x0,0x180,0xc000431,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0x801,0xc0000,0x0,0x8,0x43c,0xc00,0x0,0x180,0xc000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0x801,0xc0001,0x800000c,0x8,0x43c,0xc00,0x8080000,0x180,0xc000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0x801,0xc0001,0x800000d,0x100,0x43c,0xc00,0x8080000,0x40009,0xc000431,0x101,0x1,0x40109,0xc000001,0x8000001,0x8430001,0x400181}, {0x400c0000,0xc0001,0x800000d,0x181,0x43c,0x600401,0x8080000,0x40009,0xc000431,0x101,0x200000,0x40109,0xc000001,0x8000001,0x8430001,0x20809}, {0x400a018d,0x4c,0x800000d,0x181,0x43c,0x600401,0x480c0021,0x40009,0xc000431,0x101,0x200000,0x2804012c,0x486c2181,0x8000001,0x8430001,0x20809}},
{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0xc0000,0x0,0xc,0x42c,0x800,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0xc0001,0xc000008,0xc,0x42c,0x800,0x80c0000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0xc0001,0x8000009,0x100,0x42c,0x800,0x80c0000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x40080000,0xc0001,0x8000009,0x200101,0x42c,0x700401,0x80c0000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20c09}, {0x400e018d,0x4c,0x8000009,0x200101,0x42c,0x700401,0x48080031,0x40009,0x8000421,0x101,0x300000,0x2c00013c,0x48682105,0x8000001,0x8430001,0x20c09}},
{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x8,0x8000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0x800,0x100,0x0,0x8,0x43c,0x0,0x0,0x180,0x8000431,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0x801,0xc0000,0x0,0x8,0x43c,0xc00,0x0,0x180,0x8000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0x801,0xc0001,0xc00000c,0x8,0x43c,0xc00,0xc0c0000,0x180,0x8000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0x801,0xc0001,0x800000d,0x100,0x43c,0xc00,0xc0c0000,0x40009,0x8000431,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x40080000,0xc0001,0x800000d,0x200101,0x43c,0x700001,0xc0c0000,0x40009,0x8000431,0x101,0x300400,0x40189,0xc000001,0x8000001,0x8430001,0x20c09}, {0x400e018d,0x4c,0x800000d,0x200101,0x43c,0x700001,0x48080031,0x40009,0x8000431,0x101,0x300400,0x2800013c,0x48682105,0x8000001,0x8430001,0x20c09}},
{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x8,0x8000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0x800,0x100,0x0,0x8,0x43c,0x0,0x0,0x180,0x8000431,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0x801,0xc0000,0x0,0x8,0x43c,0xc00,0x0,0x180,0x8000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0x801,0xc0001,0xc00000c,0x8,0x43c,0xc00,0xc0c0000,0x180,0x8000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0x801,0xc0001,0x800000d,0x100,0x43c,0xc00,0xc0c0000,0x40009,0x8000431,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x40080000,0xc0001,0x800000d,0x200101,0x43c,0x700001,0xc0c0000,0x40009,0x8000431,0x101,0x300400,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x400e018d,0x4c,0x800000d,0x200101,0x43c,0x700001,0x48080031,0x40009,0x8000431,0x101,0x300400,0x2800013c,0x48682105,0x8000001,0x8430001,0x20809}},
{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x8,0x8000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0x800,0x100,0x0,0x8,0x43c,0x0,0x0,0x180,0x8000431,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0x801,0x80000,0x0,0x8,0x43c,0x800,0x0,0x180,0x8000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0x801,0x80001,0xc000008,0x8,0x43c,0x800,0x8080000,0x180,0x8000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0x801,0x80001,0x8000009,0x100,0x43c,0x800,0x8080000,0x4000d,0x8000431,0x101,0x1,0x4018d,0xc000001,0x8000001,0x8430001,0x600101}, {0x40080000,0x80001,0x8000009,0x200101,0x43c,0x700001,0x8080000,0x4000d,0x8000431,0x101,0x300400,0x4018d,0xc000001,0x8000001,0x8430001,0x20c09}, {0x400e018d,0x4c,0x8000009,0x200101,0x43c,0x700001,0x580c0031,0x4000d,0x8000431,0x101,0x300400,0x3c000138,0x686c2105,0x8000001,0x8430001,0x20c09}},
{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x8,0x8000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0x8,0x438,0x0,0x0,0x180,0x8000431,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0x8,0x438,0xc00,0x0,0x180,0x8000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0x8,0x438,0xc00,0x8080000,0x180,0x8000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x438,0xc00,0x8080000,0x4000d,0x8000431,0x101,0x1,0x4018d,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200101,0x438,0x700001,0x8080000,0x4000d,0x8000431,0x101,0x300400,0x4018d,0xc000001,0x8000001,0x8430001,0x20c09}, {0x400a018d,0x4c,0x8000009,0x200101,0x438,0x700001,0x58080031,0x4000d,0x8000431,0x101,0x300400,0x3c000138,0x68682105,0x8000001,0x8430001,0x20c09}},
{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x181,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x181,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x181,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x181,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x440a010d,0x68,0x8000009,0x200101,0x42c,0x700001,0x7c080031,0x40009,0x8000421,0x181,0x300000,0x3800013c,0x4c482101,0x8000001,0x8430001,0x20809}},
{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200181,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x2080d}, {0x4008010d,0x6c,0x8000009,0x200181,0x42c,0x700001,0x68080031,0x40009,0x8000421,0x101,0x300000,0x2c00013c,0x486c3101,0x8000001,0x8430001,0x2080d}},
{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0xc00,0x100,0x0,0xc,0x42c,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x181,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x181,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x181,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x600c0000,0x80001,0x8000009,0x200101,0x42c,0x500001,0x8080000,0x40009,0x8000421,0x181,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x600a010d,0x6c,0x8000009,0x200101,0x42c,0x500001,0x58080031,0x40009,0x8000421,0x181,0x300000,0x3c00013c,0x48682101,0x8000001,0x8430001,0x20809}},
{{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x0}, {0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001}, {0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}, {0x800,0x100,0x0,0xc,0x428,0x0,0x0,0x180,0x8000421,0x1,0x1,0x1,0xc000001,0x0,0x8600000,0x8000001}, {0x801,0x80000,0x0,0xc,0x428,0x800,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001}, {0x801,0x80001,0xc000008,0xc,0x428,0x800,0x8080000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001}, {0x801,0x80001,0x8000009,0x100,0x428,0x800,0x8080000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x40080000,0x80001,0x8000009,0x200101,0x428,0x700001,0x8080000,0x40009,0x8000421,0x101,0x300400,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x400e018d,0x4c,0x8000009,0x200101,0x428,0x700001,0x480c0031,0x40009,0x8000421,0x101,0x300400,0x2c00013c,0x48682105,0x8000001,0x8430001,0x20809}} };
	int toChooseIdx[6] = { 20,23,24,25,27,31 };
	double data_new[8] = { pow(2,22),pow(2,36), pow(2,26),pow(2,28),pow(2,32),pow(2,28),pow(2,30),pow(2,38) };
	uint32_t outMask_r15_r16[3][2][16] = { {{0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001},{0x0,0x100,0x0,0xc,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}},
		{{0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001},{0x0,0x100,0x0,0x8,0xc000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001} },
		{{0x0,0x100,0x10000,0x1,0x0,0x0,0x0,0x180,0x0,0x0,0x1,0x1,0x0,0x0,0x8000001,0x8000001},{0x0,0x100,0x0,0x8,0x8000001,0x0,0x0,0x180,0x0,0x1,0x1,0x1,0x0,0x0,0x8600000,0x8000001}} };
	uint32_t outMask_r18_r19[10][2][16] = { { {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x181,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001},
{0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x181,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001} },
	{ {0x801,0xc0000,0x0,0x8,0x43c,0xc00,0x0,0x180,0xc000431,0x181,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001},
	{0x801,0xc0001,0x800000c,0x8,0x43c,0xc00,0x8080000,0x180,0xc000431,0x181,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001} },
	{ {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001},
	{0xc01,0x80001,0xc000008,0xc,0x42c,0xc00,0x8080000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001} },
	{ {0x801,0xc0000,0x0,0x8,0x43c,0xc00,0x0,0x180,0xc000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001},
	{0x801,0xc0001,0x800000c,0x8,0x43c,0xc00,0x8080000,0x180,0xc000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001} },
	{ {0xc01,0x80000,0x0,0xc,0x42c,0xc00,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001},
	{0xc01,0x80001,0x8000008,0xc,0x42c,0xc00,0x80c0000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001} },
	{ {0xc01,0xc0000,0x0,0xc,0x42c,0x800,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001},
	{0xc01,0xc0001,0xc000008,0xc,0x42c,0x800,0x80c0000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001} },
	{ {0x801,0xc0000,0x0,0x8,0x43c,0xc00,0x0,0x180,0x8000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001},
	{0x801,0xc0001,0xc00000c,0x8,0x43c,0xc00,0xc0c0000,0x180,0x8000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001} },
	{ {0x801,0x80000,0x0,0x8,0x43c,0x800,0x0,0x180,0x8000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001},
	{0x801,0x80001,0xc000008,0x8,0x43c,0x800,0x8080000,0x180,0x8000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001} },
	{ {0xc01,0x80000,0x0,0x8,0x438,0xc00,0x0,0x180,0x8000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001},
	{0xc01,0x80001,0xc000008,0x8,0x438,0xc00,0x8080000,0x180,0x8000431,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001} },
	{ {0x801,0x80000,0x0,0xc,0x428,0x800,0x0,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8600000,0x8000001},
	{0x801,0x80001,0xc000008,0xc,0x428,0x800,0x8080000,0x180,0x8000421,0x101,0x1,0x1,0xc000001,0x8000001,0x8430001,0x8000001} } };
	uint32_t outMask_r20_r21[16][2][16] = { {{0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x181,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x181,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}},
{{0x801,0xc0001,0x800000d,0x100,0x43c,0xc00,0x8080000,0x40009,0xc000431,0x181,0x1,0x40109,0xc000001,0x8000001,0x8430001,0x400181}, {0x400c0000,0xc0001,0x800000d,0x181,0x43c,0x600401,0x8080000,0x40009,0xc000431,0x181,0x200400,0x40109,0xc000001,0x8000001,0x8430001,0x20c09}},
{{0x801,0xc0001,0x800000d,0x100,0x43c,0xc00,0x8080000,0x40009,0xc000431,0x181,0x1,0x40109,0xc000001,0x8000001,0x8430001,0x400181}, {0x400c0000,0xc0001,0x800000d,0x181,0x43c,0x600401,0x8080000,0x40009,0xc000431,0x181,0x200000,0x40109,0xc000001,0x8000001,0x8430001,0x20809}},
{{0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}},
{{0x801,0xc0001,0x800000d,0x100,0x43c,0xc00,0x8080000,0x40009,0xc000431,0x101,0x1,0x40109,0xc000001,0x8000001,0x8430001,0x400181}, {0x400c0000,0xc0001,0x800000d,0x181,0x43c,0x600401,0x8080000,0x40009,0xc000431,0x101,0x200400,0x40109,0xc000001,0x8000001,0x8430001,0x20c09}},
{{0x801,0xc0001,0x800000d,0x100,0x43c,0xc00,0x8080000,0x40009,0xc000431,0x101,0x1,0x40109,0xc000001,0x8000001,0x8430001,0x400181}, {0x400c0000,0xc0001,0x800000d,0x181,0x43c,0x600401,0x8080000,0x40009,0xc000431,0x101,0x200000,0x40109,0xc000001,0x8000001,0x8430001,0x20809}},
{{0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x80c0000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x400101}, {0x400c0000,0x80001,0x8000009,0x101,0x42c,0x500001,0x80c0000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}},
{{0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x600c0000,0x80001,0x8000009,0x200101,0x42c,0x500001,0x8080000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}},
{{0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x30809}},
{{0xc01,0xc0001,0x8000009,0x100,0x42c,0x800,0x80c0000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x40080000,0xc0001,0x8000009,0x200101,0x42c,0x700401,0x80c0000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20c09}},
{{0x801,0xc0001,0x800000d,0x100,0x43c,0xc00,0xc0c0000,0x40009,0x8000431,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x40080000,0xc0001,0x800000d,0x200101,0x43c,0x700001,0xc0c0000,0x40009,0x8000431,0x101,0x300400,0x40189,0xc000001,0x8000001,0x8430001,0x20c09}},
{{0x801,0x80001,0x8000009,0x100,0x43c,0x800,0x8080000,0x4000d,0x8000431,0x101,0x1,0x4018d,0xc000001,0x8000001,0x8430001,0x600101}, {0x40080000,0x80001,0x8000009,0x200101,0x43c,0x700001,0x8080000,0x4000d,0x8000431,0x101,0x300400,0x4018d,0xc000001,0x8000001,0x8430001,0x20c09}},
{{0xc01,0x80001,0x8000009,0x100,0x438,0xc00,0x8080000,0x4000d,0x8000431,0x101,0x1,0x4018d,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200101,0x438,0x700001,0x8080000,0x4000d,0x8000431,0x101,0x300400,0x4018d,0xc000001,0x8000001,0x8430001,0x20c09}},
{{0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x400c0000,0x80001,0x8000009,0x200181,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x2080d}},
{{0xc01,0x80001,0x8000009,0x100,0x42c,0xc00,0x8080000,0x40009,0x8000421,0x181,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x600c0000,0x80001,0x8000009,0x200101,0x42c,0x500001,0x8080000,0x40009,0x8000421,0x181,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20809}},
{{0x801,0x80001,0x8000009,0x100,0x428,0x800,0x8080000,0x40009,0x8000421,0x101,0x1,0x40189,0xc000001,0x8000001,0x8430001,0x600101}, {0x40080000,0x80001,0x8000009,0x200101,0x428,0x700001,0x8080000,0x40009,0x8000421,0x101,0x300400,0x40189,0xc000001,0x8000001,0x8430001,0x20809}} };
	uint32_t outMask_r21_r22[6][2][16] = { {{0x400c0000,0x80001,0x8000009,0x101,0x42c,0x700001,0x8080000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x30809}, {0x400a010d,0x4c,0x8000009,0x101,0x42c,0x700001,0x58080031,0x40009,0x8000421,0x101,0x300000,0x3800013c,0x4c682101,0x8000001,0x8430001,0x30809}},
{{0x40080000,0xc0001,0x8000009,0x200101,0x42c,0x700401,0x80c0000,0x40009,0x8000421,0x101,0x300000,0x40189,0xc000001,0x8000001,0x8430001,0x20c09}, {0x400e018d,0x4c,0x8000009,0x200101,0x42c,0x700401,0x48080031,0x40009,0x8000421,0x101,0x300000,0x2c00013c,0x48682105,0x8000001,0x8430001,0x20c09}},
{{0x40080000,0xc0001,0x800000d,0x200101,0x43c,0x700001,0xc0c0000,0x40009,0x8000431,0x101,0x300400,0x40189,0xc000001,0x8000001,0x8430001,0x20c09}, {0x400e018d,0x4c,0x800000d,0x200101,0x43c,0x700001,0x48080031,0x40009,0x8000431,0x101,0x300400,0x2800013c,0x48682105,0x8000001,0x8430001,0x20c09}},
{{0x40080000,0xc0001,0x800000d,0x200101,0x43c,0x700001,0xc0c0000,0x40009,0x8000431,0x101,0x300400,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x400e018d,0x4c,0x800000d,0x200101,0x43c,0x700001,0x48080031,0x40009,0x8000431,0x101,0x300400,0x2800013c,0x48682105,0x8000001,0x8430001,0x20809}},
{{0x400c0000,0x80001,0x8000009,0x200101,0x438,0x700001,0x8080000,0x4000d,0x8000431,0x101,0x300400,0x4018d,0xc000001,0x8000001,0x8430001,0x20c09}, {0x400a018d,0x4c,0x8000009,0x200101,0x438,0x700001,0x58080031,0x4000d,0x8000431,0x101,0x300400,0x3c000138,0x68682105,0x8000001,0x8430001,0x20c09}},
{{0x40080000,0x80001,0x8000009,0x200101,0x428,0x700001,0x8080000,0x40009,0x8000421,0x101,0x300400,0x40189,0xc000001,0x8000001,0x8430001,0x20809}, {0x400e018d,0x4c,0x8000009,0x200101,0x428,0x700001,0x480c0031,0x40009,0x8000421,0x101,0x300400,0x2c00013c,0x48682105,0x8000001,0x8430001,0x20809}} };
	int i = 5; //for (auto i = 0; i < 6; i++)
	{
		int id = toChooseIdx[i];
		for (int r = 14; r < 22; r++)
		{
			double cor = getForroExpLcCorGivenInOutMasks(fileName, outMask_r10_r22_multiple[id][r - 10], outMask_r10_r22_multiple[id][r - 10 + 1], r, r + 1, data_new[r - 14]);
		}
	}


	//for (auto i = 0; i < 3; i++)
	//{
	//	double cor = 0;
	//	int r = 15;  
	//	cor = getForroExpLcCorGivenInOutMasks(fileName, outMask_r15_r16[i][r - 15], outMask_r15_r16[i][r - 15 + 1], r, r + 1, pow(2, 35));
	//}

	//for (auto i = 0; i < 10; i++)
	//{
	//	double cor = 0;
	//	int r = 18;  
	//	cor = getForroExpLcCorGivenInOutMasks(fileName, outMask_r18_r19[i][r - 18], outMask_r18_r19[i][r - 18 + 1], r, r + 1, pow(2, 27));
	//}

	//for (auto i = 0; i < 16; i++)
	//{
	//	double cor = 0;
	//	int r = 20; 
	//	cor = getForroExpLcCorGivenInOutMasks(fileName, outMask_r20_r21[i][r - 20], outMask_r20_r21[i][r - 20 + 1], r, r + 1, pow(2, 27));
	//}

	//for (auto i = 0; i < 6; i++)
	//{
	//	double cor = 0;
	//	int r = 21;  
	//	cor = getForroExpLcCorGivenInOutMasks(fileName, outMask_r21_r22[i][r - 21], outMask_r21_r22[i][r - 21 + 1], r, r + 1, pow(2, 32));
	//}
#endif

#if 0//test one DL
	int start = 0, end = 8;
	double datasize = pow(2, 34);
	string fileName = "Forro 2DL(R0 to R2) verify v5[11] to v10[0].txt";
	uint32_t diff[16] = { 0 }; diff[5] = (uint64_t(1) << 11);
	uint32_t mask[16] = { 0 }; mask[10] = (uint64_t(1) << 0);
	getForroExpDlCorGivenDiffMask(fileName, diff, mask, start, end, datasize);
#endif

}
