#pragma once
#include "basics.h"
#include <fstream>
#include <string>
//#include<windows.h>
#include<omp.h>
#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;
//NTL_CLIENT

typedef uint32_t TYPE;
uint64_t p = 0x100000000;
//uint32_t p = 0x7fffffff;
random_device rd;
mt19937 gen(rd());
uniform_int_distribution<> dis(0, p - 1);

const std::vector<int> salsaRotate = { 7, 9, 13, 18 };
const TYPE constants[] = { 0x61707865, 0x3320646e, 0x79622d32, 0x6b206574 };
struct nextOrPreDiffNode
{
	uint32_t diffVal[16];
	double prob;
};
nextOrPreDiffNode all32NextDiffR2inDiffatPos7[32] = { {{0,0,0,0,0,0,0,0x1,0,0,0,0x2000,0,0,0,0x80040000},3},
{{0,0,0,0,0,0,0,0x2,0,0,0,0x4000,0,0,0,0x80001},3},
{{0,0,0,0,0,0,0,0x4,0,0,0,0x8000,0,0,0,0x100002},3},
{{0,0,0,0,0,0,0,0x8,0,0,0,0x10000,0,0,0,0x200004},3},
{{0,0,0,0,0,0,0,0x10,0,0,0,0x20000,0,0,0,0x400008},3},
{{0,0,0,0,0,0,0,0x20,0,0,0,0x40000,0,0,0,0x800010},3},
{{0,0,0,0,0,0,0,0x40,0,0,0,0x80000,0,0,0,0x1000020},3},
{{0,0,0,0,0,0,0,0x80,0,0,0,0x100000,0,0,0,0x2000040},3},
{{0,0,0,0,0,0,0,0x100,0,0,0,0x200000,0,0,0,0x4000080},3},
{{0,0,0,0,0,0,0,0x200,0,0,0,0x400000,0,0,0,0x8000100},3},
{{0,0,0,0,0,0,0,0x400,0,0,0,0x800000,0,0,0,0x10000200},3},
{{0,0,0,0,0,0,0,0x800,0,0,0,0x1000000,0,0,0,0x20000400},3},
{{0,0,0,0,0,0,0,0x1000,0,0,0,0x2000000,0,0,0,0x40000800},3},
{{0,0,0,0,0,0,0,0x2000,0,0,0,0x4000000,0,0,0,0x80001000},3},
{{0,0,0,0,0,0,0,0x4000,0,0,0,0x8000000,0,0,0,0x2001},3},
{{0,0,0,0,0,0,0,0x8000,0,0,0,0x10000000,0,0,0,0x4002},3},
{{0,0,0,0,0,0,0,0x10000,0,0,0,0x20000000,0,0,0,0x8004},3},
{{0,0,0,0,0,0,0,0x20000,0,0,0,0x40000000,0,0,0,0x10008},3},
{{0,0,0,0,0,0,0,0x40000,0,0,0,0x80000000,0,0,0,0x20010},2},
{{0,0,0,0,0,0,0,0x80000,0,0,0,0x1,0,0,0,0x40020},3},
{{0,0,0,0,0,0,0,0x100000,0,0,0,0x2,0,0,0,0x80040},3},
{{0,0,0,0,0,0,0,0x200000,0,0,0,0x4,0,0,0,0x100080},3},
{{0,0,0,0,0,0,0,0x400000,0,0,0,0x8,0,0,0,0x200100},3},
{{0,0,0,0,0,0,0,0x800000,0,0,0,0x10,0,0,0,0x400200},3},
{{0,0,0,0,0,0,0,0x1000000,0,0,0,0x20,0,0,0,0x800400},3},
{{0,0,0,0,0,0,0,0x2000000,0,0,0,0x40,0,0,0,0x1000800},3},
{{0,0,0,0,0,0,0,0x4000000,0,0,0,0x80,0,0,0,0x2001000},3},
{{0,0,0,0,0,0,0,0x8000000,0,0,0,0x100,0,0,0,0x4002000},3},
{{0,0,0,0,0,0,0,0x10000000,0,0,0,0x200,0,0,0,0x8004000},3},
{{0,0,0,0,0,0,0,0x20000000,0,0,0,0x400,0,0,0,0x10008000},3},
{{0,0,0,0,0,0,0,0x40000000,0,0,0,0x800,0,0,0,0x20010000},3},
{{0,0,0,0,0,0,0,0x80000000,0,0,0,0x1000,0,0,0,0x40020000},1} };

void salsaForthQR_avx(__m128i in0, __m128i in1, __m128i in2, __m128i in3, __m128i& out0, __m128i& out1, __m128i& out2, __m128i& out3, int stRound)
{
	int r = stRound % 4;
	int cst = salsaRotate[r];
	switch (r)
	{
	case 0:
	{
		__m128i z0 = _mm_add_epi32(in0, in3);
		__m128i w0 = _mm_xor_si128(_mm_slli_epi32(z0, cst), _mm_srli_epi32(z0, 32 - cst));
		__m128i t0 = _mm_xor_si128(w0, in1);
		out0 = in0;
		out2 = in2;
		out3 = in3;
		out1 = t0;
		break;
	}
	case 1:
	{
		__m128i z0 = _mm_add_epi32(in1, in0);
		__m128i w0 = _mm_xor_si128(_mm_slli_epi32(z0, cst), _mm_srli_epi32(z0, 32 - cst));
		__m128i t0 = _mm_xor_si128(w0, in2);
		out0 = in0;
		out1 = in1;
		out3 = in3;
		out2 = t0;
		break;
	}
	case 2:
	{
		__m128i z0 = _mm_add_epi32(in2, in1);
		__m128i w0 = _mm_xor_si128(_mm_slli_epi32(z0, cst), _mm_srli_epi32(z0, 32 - cst));
		__m128i t0 = _mm_xor_si128(w0, in3);
		out0 = in0;
		out1 = in1;
		out2 = in2;
		out3 = t0;
		break;
	}
	case 3:
	{
		__m128i z0 = _mm_add_epi32(in3, in2);
		__m128i w0 = _mm_xor_si128(_mm_slli_epi32(z0, cst), _mm_srli_epi32(z0, 32 - cst));
		__m128i t0 = _mm_xor_si128(w0, in0);
		out1 = in1;
		out2 = in2;
		out3 = in3;
		out0 = t0;
		break;
	}
	}
}
void salsaHalfQR_avx(__m128i in0, __m128i in1, __m128i in2, __m128i in3, __m128i& out0, __m128i& out1, __m128i& out2, __m128i& out3, int stRound)
{
	if (stRound % 2 != 0) cout << "Error!" << endl;
	__m128i aa, bb, cc, dd;
	salsaForthQR_avx(in0, in1, in2, in3, aa, bb, cc, dd, stRound);
	salsaForthQR_avx(aa, bb, cc, dd, out0, out1, out2, out3, stRound + 1);
}
void salsaQR_avx(__m128i in0, __m128i in1, __m128i in2, __m128i in3, __m128i& out0, __m128i& out1, __m128i& out2, __m128i& out3, int stRound)
{
	if (stRound % 4 != 0) 
		cout << "Error!" << endl;
	__m128i aa, bb, cc, dd;
	salsaHalfQR_avx(in0, in1, in2, in3, aa, bb, cc, dd, stRound);
	salsaHalfQR_avx(aa, bb, cc, dd, out0, out1, out2, out3, stRound + 2);
}
bool innerPro(uint64_t mask, uint64_t val, int len)
{
	bool bit = 0;
	for (auto i = 0; i < len; i++)
	{
		bool p = bit64(mask, i);
		if (p) bit ^= bit64(val, i);
	}
	return bit;
}
void salsa_r4to14_avx(__m128i in[4], __m128i out[4])
{
	//in0: 0,5,10,15;  in1: 1,6,11,12;   in2: 2,7,8,13;   in3: 3,4,9,14  { i, 4 + ((1 + i) % 4), 8 + ((2 + i) % 4), 12 + ((3 + i) % 4) };
	__m128i i0 = in[0], i1 = in[1], i2 = in[2], i3 = in[3];
	__m128i a, b, c, d, aa, bb, cc, dd;
	int lrot1 = int(0b00111001), lrot2 = int(0b01001110), lrot3 = int(0b10010011);
	//r4 to r8
	salsaQR_avx(i0, i1, i2, i3, aa, bb, cc, dd, 4);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//r8 to r12
	a = i0;
	b = _mm_shuffle_epi32(i3, 0b00111001); //lrot1
	c = _mm_shuffle_epi32(i2, 0b01001110); //lrot2
	d = _mm_shuffle_epi32(i1, 0b10010011); //lrot3
	salsaQR_avx(a, b, c, d, aa, bb, cc, dd, 8);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//r12 to r14
	a = i0;
	b = _mm_shuffle_epi32(i3, 0b00111001); //lrot1
	c = _mm_shuffle_epi32(i2, 0b01001110); //lrot2
	d = _mm_shuffle_epi32(i1, 0b10010011); //lrot3
	salsaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, 12);

	out[0] = aa;
	out[1] = bb;
	out[2] = cc;
	out[3] = dd;
}
void salsa_r4to15_avx(__m128i in[4], __m128i out[4])
{
	//in0: 0,5,10,15;  in1: 1,6,11,12;   in2: 2,7,8,13;   in3: 3,4,9,14  { i, 4 + ((1 + i) % 4), 8 + ((2 + i) % 4), 12 + ((3 + i) % 4) };
	__m128i i0 = in[0], i1 = in[1], i2 = in[2], i3 = in[3];
	__m128i a, b, c, d, aa, bb, cc, dd;
	int lrot1 = 0b00111001, lrot2 = 0b01001110, lrot3 = 0b10010011;
	//r4 to r8
	salsaQR_avx(i0, i1, i2, i3, aa, bb, cc, dd, 4);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//r8 to r12
	a = i0;
	b = _mm_shuffle_epi32(i3, 0b00111001); //lrot1
	c = _mm_shuffle_epi32(i2, 0b01001110); //lrot2
	d = _mm_shuffle_epi32(i1, 0b10010011); //lrot3
	salsaQR_avx(a, b, c, d, aa, bb, cc, dd, 8);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//r12 to r14
	a = i0;
	b = _mm_shuffle_epi32(i3, 0b00111001); //lrot1
	c = _mm_shuffle_epi32(i2, 0b01001110); //lrot2
	d = _mm_shuffle_epi32(i1, 0b10010011); //lrot3
	salsaHalfQR_avx(a, b, c, d, aa, bb, cc, dd, 12);
	//r14 to r15
	a = aa; b = bb; c = cc; d = dd;
	salsaForthQR_avx(a, b, c, d, aa, bb, cc, dd, 14);

	out[0] = aa;
	out[1] = bb;
	out[2] = cc;
	out[3] = dd;
}
void salsa_r4to16_avx(__m128i in[4], __m128i out[4])
{
	//in0: 0,5,10,15;  in1: 1,6,11,12;   in2: 2,7,8,13;   in3: 3,4,9,14  { i, 4 + ((1 + i) % 4), 8 + ((2 + i) % 4), 12 + ((3 + i) % 4) };
	__m128i i0 = in[0], i1 = in[1], i2 = in[2], i3 = in[3];
	__m128i a, b, c, d, aa, bb, cc, dd;
	int lrot1 = 0b00111001, lrot2 = 0b01001110, lrot3 = 0b10010011;
	//r4 to r8
	salsaQR_avx(i0, i1, i2, i3, aa, bb, cc, dd, 4);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//r8 to r12
	a = i0;
	b = _mm_shuffle_epi32(i3, 0b00111001); //lrot1
	c = _mm_shuffle_epi32(i2, 0b01001110); //lrot2
	d = _mm_shuffle_epi32(i1, 0b10010011); //lrot3
	salsaQR_avx(a, b, c, d, aa, bb, cc, dd, 8);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//r12 to r16
	a = i0;
	b = _mm_shuffle_epi32(i3, 0b00111001); //lrot1
	c = _mm_shuffle_epi32(i2, 0b01001110); //lrot2
	d = _mm_shuffle_epi32(i1, 0b10010011); //lrot3
	salsaQR_avx(a, b, c, d, aa, bb, cc, dd, 12);

	out[0] = aa;
	out[1] = bb;
	out[2] = cc;
	out[3] = dd;
}
void salsa_r20to28_avx(__m128i in[4], __m128i out[4])
{
	//in0: 0,5,10,15;  in1: 1,6,11,12;   in2: 2,7,8,13;   in3: 3,4,9,14  { i, 4 + ((1 + i) % 4), 8 + ((2 + i) % 4), 12 + ((3 + i) % 4) };
	__m128i i0 = in[0], i1 = in[1], i2 = in[2], i3 = in[3];
	__m128i a, b, c, d, aa, bb, cc, dd;
	int lrot1 = 0b00111001, lrot2 = 0b01001110, lrot3 = 0b10010011;
	//r20 to r24
	salsaQR_avx(i0, i1, i2, i3, aa, bb, cc, dd, 20);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	//r24 to r28
	a = i0;
	b = _mm_shuffle_epi32(i3, 0b00111001); //lrot1
	c = _mm_shuffle_epi32(i2, 0b01001110); //lrot2
	d = _mm_shuffle_epi32(i1, 0b10010011); //lrot3
	salsaQR_avx(a, b, c, d, aa, bb, cc, dd, 24);
	i0 = aa; i1 = bb; i2 = cc; i3 = dd;
	out[0] = i0;
	out[1] = _mm_shuffle_epi32(i3, 0b00111001); //lrot1
	out[2] = _mm_shuffle_epi32(i2, 0b01001110); //lrot2
	out[3] = _mm_shuffle_epi32(i1, 0b10010011); //lrot3
}
void salsa_r28to32_avx(__m128i in[4], __m128i out[4])
{
	//in0: 0,5,10,15;  in1: 1,6,11,12;   in2: 2,7,8,13;   in3: 3,4,9,14  { i, 4 + ((1 + i) % 4), 8 + ((2 + i) % 4), 12 + ((3 + i) % 4) };
	__m128i i0 = in[0], i1 = in[1], i2 = in[2], i3 = in[3];
	__m128i a, b, c, d, aa, bb, cc, dd;
	//r28 to r32
	salsaQR_avx(i0, i1, i2, i3, aa, bb, cc, dd, 28);
	out[0] = aa;
	out[1] = bb;
	out[2] = cc;
	out[3] = dd;
}
bool getOneMaskOfInt32FromInt128(__m128i val128, uint8_t col, uint8_t pos)
{
	__m128i shift;
	if (!((col == 0) || (col == 1) || (col == 2) || (col == 3))) cout << "Error!" << endl;
	switch (col)
	{
	case 3:
		shift = _mm_shuffle_epi32(val128, 0b10010011);
		break;
	case 2:
		shift = _mm_shuffle_epi32(val128, 0b01001110);
		break;
	case 1:
		shift = _mm_shuffle_epi32(val128, 0b00111001);
		break;
	case 0:
		shift = val128;
		break;
	}
	bool bit = bit64(_mm_cvtsi128_si32(shift), pos);
	return bit;
}
bool getLinComOfInt32FromInt128(__m128i val128, uint8_t col, uint32_t mask)
{
	__m128i shift;
	if (!((col == 0) || (col == 1) || (col == 2) || (col == 3))) cout << "error!" << endl;
	switch (col)
	{
	case 3:
		shift = _mm_shuffle_epi32(val128, 0b10010011);
		break;
	case 2:
		shift = _mm_shuffle_epi32(val128, 0b01001110);
		break;
	case 1:
		shift = _mm_shuffle_epi32(val128, 0b00111001);
		break;
	case 0:
		shift = val128;
		break;
	}
	uint32_t val32 = _mm_cvtsi128_si32(shift);
	bool bit = innerPro(mask, val32, 32);
	return bit;
}
void identifyPos(int a, int& row, int& col)
{
	if (a < 0 || a>15) { cout << "Error!" << endl; return; }
	if (a >= 0 && a <= 3)
	{
		row = a; col = 0;
	}
	else if (a >= 4 && a <= 7)
	{
		row = (a - 1) % 4; col = 1;
	}
	else if (a >= 8 && a <= 11)
	{
		row = (a - 2) % 4; col = 2;
	}
	else if (a >= 12 && a <= 15)
	{
		row = (a - 3) % 4; col = 3;
	}
}
vector< vector<double>> getSalsaSubForGivenDiffandAllSingleBitMasks_avx_r4r14(string fileName, uint32_t diff[16], uint64_t datasize)
{
	float startTime = omp_get_wtime();
	vector< vector<double>> cnt(4, vector<double>(128, 0.0));
	ofstream fout(fileName, ios::out);
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 };
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		__m128i in[4], out[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[12 + ((3 + i) % 4)], input[8 + ((2 + i) % 4)], input[4 + ((1 + i) % 4)], input[i]);
		}
		salsa_r4to14_avx(in, out); //for (auto i = 0; i < 4; i++) print128_num(out[i]); printf("\n");
		TYPE input_prime[16] = { 0 };
		for (auto i = 0; i < 16; i++) input_prime[i] = input[i] ^ diff[i];
		__m128i ind[4], outd[4];
		for (auto i = 0; i < 4; i++)
		{
			ind[i] = _mm_set_epi32(input_prime[12 + ((3 + i) % 4)], input_prime[8 + ((2 + i) % 4)], input_prime[4 + ((1 + i) % 4)], input_prime[i]);
		}
		salsa_r4to14_avx(ind, outd); //for (auto i = 0; i < 4; i++) print128_num(outd[i]); printf("\n");
		for (auto i = 0; i < 4; i++)
		{
			__m128i val = _mm_xor_si128(out[i], outd[i]), shift;
			for (auto j = 0; j < 128; j++)
			{
				int a = j / 32, b = j % 32;
				switch (a)
				{
				case 3:
					shift = _mm_shuffle_epi32(val, 0b10010011); //lrot1 = 0b00111001, lrot2 = 0b01001110, lrot3 = 0b10010011
					break;
				case 2:
					shift = _mm_shuffle_epi32(val, 0b01001110);
					break;
				case 1:
					shift = _mm_shuffle_epi32(val, 0b00111001);
					break;
				case 0:
					shift = val;
					break;
				}
				int val32 = _mm_cvtsi128_si32(shift);
				bool bit_out = bit64(val32, b);
				if (bit_out == 0) cnt[i][j]++; else cnt[i][j]--;
			}
		}
	}
	fout << "Salsa " << dec << "2.5DL(R" << 1 << "->R" << 3.5 << ") experimental COR: ";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = diff[i];
		if (v)
		{
			fout << i << ":[";
			for (auto j = 0; j < 32; j++)
				if (bit64(v, j)) { //cout << j << ","; 
					fout << j << ",";
				}
			//cout << "],"; 
			fout << "],";
		}
	} //cout << "-->" << endl; 
	fout << "-->" << endl;
	for (auto i = 0; i < 4; i++) for (auto j = 0; j < 128; j++) cnt[i][j] = cnt[i][j] / datasize;
	for (auto i = 0; i < 4; i++) for (auto j = 0; j < 128; j++)
	{
		int a = j / 32, b = j % 32;
		fout << 4 * a + i << ": ";
		int st = ((4 - a) % 4 + i) % 4;
		double num = cnt[st][j]; cnt[st][j] = log(abs(cnt[st][j])) / log(2);
		if (num)
		{
			fout << "[" << b << "], " << num << ", " << cnt[st][j] << endl;
		}
	}
	float endTime = omp_get_wtime();
	//std::printf("Multi time: %f\n", endTime - startTime);
	fout << "Multi time: " << endTime - startTime;
	fout.close();
	return cnt;
}
vector< vector<double>> getSalsaSubForGivenDiffandAllSingleBitMasks_avx_r4r15(string fileName, uint32_t diff[16], uint64_t datasize)
{
	float startTime = omp_get_wtime();
	vector< vector<double>> cnt(4, vector<double>(128, 0.0));
	ofstream fout(fileName, ios::out);
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 };
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		__m128i in[4], out[4];
		for (auto i = 0; i < 4; i++)//{ i, 4 + ((1 + i) % 4), 8 + ((2 + i) % 4), 12 + ((3 + i) % 4) }
		{
			in[i] = _mm_set_epi32(input[12 + ((3 + i) % 4)], input[8 + ((2 + i) % 4)], input[4 + ((1 + i) % 4)], input[i]);
		}
		salsa_r4to15_avx(in, out); //for (auto i = 0; i < 4; i++) print128_num(out[i]); printf("\n");
		TYPE input_prime[16] = { 0 };
		for (auto i = 0; i < 16; i++) input_prime[i] = input[i] ^ diff[i];
		__m128i ind[4], outd[4];
		for (auto i = 0; i < 4; i++)
		{
			ind[i] = _mm_set_epi32(input_prime[12 + ((3 + i) % 4)], input_prime[8 + ((2 + i) % 4)], input_prime[4 + ((1 + i) % 4)], input_prime[i]);
		}
		salsa_r4to15_avx(ind, outd); //for (auto i = 0; i < 4; i++) print128_num(outd[i]); printf("\n");
		for (auto i = 0; i < 4; i++)
		{
			__m128i val = _mm_xor_si128(out[i], outd[i]), shift;
			for (auto j = 0; j < 128; j++)
			{
				int a = j / 32, b = j % 32;
				switch (a)
				{
				case 3:
					shift = _mm_shuffle_epi32(val, 0b10010011); //lrot1 = 0b00111001, lrot2 = 0b01001110, lrot3 = 0b10010011
					break;
				case 2:
					shift = _mm_shuffle_epi32(val, 0b01001110);
					break;
				case 1:
					shift = _mm_shuffle_epi32(val, 0b00111001);
					break;
				case 0:
					shift = val;
					break;
				}
				int val32 = _mm_cvtsi128_si32(shift);
				bool bit_out = bit64(val32, b);
				if (bit_out == 0) cnt[i][j]++; else cnt[i][j]--;
			}
		}
	}
	fout << "Salsa " << dec << "2.75DL(R" << 1 << "->R" << 3.75 << ") experimental COR: ";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = diff[i];
		if (v)
		{
			fout << i << ":[";
			for (auto j = 0; j < 32; j++)
				if (bit64(v, j)) { //cout << j << ","; 
					fout << j << ",";
				}
			//cout << "],"; 
			fout << "],";
		}
	} //cout << "-->" << endl; 
	fout << "-->" << endl;
	for (auto i = 0; i < 4; i++) for (auto j = 0; j < 128; j++) cnt[i][j] = cnt[i][j] / datasize;
	for (auto i = 0; i < 4; i++) for (auto j = 0; j < 128; j++)
	{
		int a = j / 32, b = j % 32;
		fout << 4 * a + i << ": ";
		int st = ((4 - a) % 4 + i) % 4;
		double num = cnt[st][j]; cnt[st][j] = log(abs(cnt[st][j])) / log(2);
		if (num)
		{
			fout << "[" << b << "], " << num << ", " << cnt[st][j] << endl;
		}
	}
	float endTime = omp_get_wtime();
	//std::printf("Multi time: %f\n", endTime - startTime);
	fout << "Multi time: " << endTime - startTime;
	fout.close();
	return cnt;
}
void getSalsaExpDlCorGivenDiffandOneSingleBitMask_r4r16(string fileName, uint32_t diff[16], uint32_t MaskPos0to511, uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt = 0;
	const int a = MaskPos0to511 / 32, b = MaskPos0to511 % 32;
	int row, col;
	identifyPos(a, row, col);
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() - 2; cout << useCoreNumber << endl;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 };
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		__m128i in[4], out[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[12 + ((3 + i) % 4)], input[8 + ((2 + i) % 4)], input[4 + ((1 + i) % 4)], input[i]);
		}
		salsa_r4to16_avx(in, out);
		TYPE input_prime[16] = { 0 };
		for (auto i = 0; i < 16; i++) input_prime[i] = input[i] ^ diff[i];
		__m128i ind[4], outd[4];
		for (auto i = 0; i < 4; i++)
		{
			ind[i] = _mm_set_epi32(input_prime[12 + ((3 + i) % 4)], input_prime[8 + ((2 + i) % 4)], input_prime[4 + ((1 + i) % 4)], input_prime[i]);
		}
		salsa_r4to16_avx(ind, outd);
		__m128i val128 = _mm_xor_si128(out[row], outd[row]);
		bool bit_out = getOneMaskOfInt32FromInt128(val128, col, b);
		if (bit_out == 0) cnt++; else cnt--;
	}
	cnt = cnt / datasize;
	double cor = log(abs(cnt)) / log(2);
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = diff[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	} cout << "-->"; fout << "-->";
	cout << "R4_v" << a << "(" << b << "), " << cnt << ", " << cor << endl;
	fout << "R4_v" << a << "(" << b << "), " << cnt << ", " << cor << endl;

	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();
}
void getSalsaExpDlCorGivenDiffandThreeSingleBitMask_r4r16(string fileName, uint32_t diff[16], uint32_t MaskPos0to511[3], uint64_t datasize)
{
	float start_time = omp_get_wtime();
	int a[3] = { 0 }, b[3] = { 0 };
	for (auto i = 0; i < 3; i++) { a[i] = MaskPos0to511[i] / 32; b[i] = MaskPos0to511[i] % 32; }
	int row[3], col[3];
	for (auto i = 0; i < 3; i++)
	{
		identifyPos(a[i], row[i], col[i]);
	}
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() - 2; cout << useCoreNumber << endl;
	omp_set_num_threads(useCoreNumber);
	double cnt0 = 0, cnt1 = 0, cnt2 = 0;
#pragma omp parallel for reduction(+:cnt0,cnt1,cnt2)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 };
		for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		__m128i in[4], out[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[12 + ((3 + i) % 4)], input[8 + ((2 + i) % 4)], input[4 + ((1 + i) % 4)], input[i]);
		}
		salsa_r4to16_avx(in, out);
		TYPE input_prime[16] = { 0 };
		for (auto i = 0; i < 16; i++) input_prime[i] = input[i] ^ diff[i];
		__m128i ind[4], outd[4];
		for (auto i = 0; i < 4; i++)
		{
			ind[i] = _mm_set_epi32(input_prime[12 + ((3 + i) % 4)], input_prime[8 + ((2 + i) % 4)], input_prime[4 + ((1 + i) % 4)], input_prime[i]);
		}
		salsa_r4to16_avx(ind, outd);
		__m128i val0 = _mm_xor_si128(out[row[0]], outd[row[0]]);
		__m128i val1 = _mm_xor_si128(out[row[1]], outd[row[1]]);
		__m128i val2 = _mm_xor_si128(out[row[2]], outd[row[2]]);
		bool bit0 = getOneMaskOfInt32FromInt128(val0, col[0], b[0]); if (bit0 == 0) cnt0++; else cnt0--;
		bool bit1 = getOneMaskOfInt32FromInt128(val1, col[1], b[1]); if (bit1 == 0) cnt1++; else cnt1--;
		bool bit2 = getOneMaskOfInt32FromInt128(val2, col[2], b[2]); if (bit2 == 0) cnt2++; else cnt2--;
	}
	cnt0 = cnt0 / datasize; cnt1 = cnt1 / datasize; cnt2 = cnt2 / datasize;
	double cor0 = log(abs(cnt0)) / log(2), cor1 = log(abs(cnt1)) / log(2), cor2 = log(abs(cnt2)) / log(2);
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = diff[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	} cout << endl; fout << endl;
	cout << "-->R4_v" << a[0] << "(" << b[0] << "), " << cnt0 << ", " << cor0 << endl;
	cout << "-->R4_v" << a[1] << "(" << b[1] << "), " << cnt1 << ", " << cor1 << endl;
	cout << "-->R4_v" << a[2] << "(" << b[2] << "), " << cnt2 << ", " << cor2 << endl;
	fout << "-->R4_v" << a[0] << "(" << b[0] << "), " << cnt0 << ", " << cor0 << endl;
	fout << "-->R4_v" << a[1] << "(" << b[1] << "), " << cnt1 << ", " << cor1 << endl;
	fout << "-->R4_v" << a[2] << "(" << b[2] << "), " << cnt2 << ", " << cor2 << endl;
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();
}
void getSalsaExpLcCorGivenInOutMasks_r20r28(string fileName, uint32_t inMask[16], uint32_t outMask[16], uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt = 0;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() / 3; cout << useCoreNumber << endl;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }; for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		bool bitIn = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = inMask[i];
			if (mask) bitIn ^= innerPro(mask, input[i], 32);
		}
		__m128i in[4], out[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[12 + ((3 + i) % 4)], input[8 + ((2 + i) % 4)], input[4 + ((1 + i) % 4)], input[i]);
		}
		salsa_r20to28_avx(in, out);
		bool bitOut = 0;
		for (auto i = 0; i < 16; i++)
		{
			uint32_t mask = outMask[i];
			if (mask)
			{
				int row, col;
				identifyPos(i, row, col);
				bitOut ^= getLinComOfInt32FromInt128(out[row], col, mask);
			}
		}
		bool bit = bitIn ^ bitOut;
		if (bit == 0) cnt++; else cnt--;
	}
	cnt = cnt / datasize;
	double cor = log(abs(cnt)) / log(2);
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = inMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	} cout << "-->"; fout << "-->";
	for (auto i = 0; i < 16; i++)
	{
		uint32_t v = outMask[i];
		if (v)
		{
			cout << i << ":["; fout << i << ":[";
			for (auto j = 31; j >= 0; j--)
				if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
			cout << "],"; fout << "],";
		}
	}
	cout << cnt << ", " << cor << endl; fout << cnt << ", " << cor << endl;
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();

}
void getSalsaExpLcCorGivenInOutMasks_r28r32_partition(string fileName, uint32_t inMask[16], uint32_t outMask[16], uint64_t datasize)
{
	float start_time = omp_get_wtime();
	double cnt0 = 0, cnt1 = 0, cnt2 = 0, cnt3 = 0;
	ofstream fout(fileName, ios::out | ios::app);
	int useCoreNumber = thread::hardware_concurrency() / 3; cout << useCoreNumber << endl;
	omp_set_num_threads(useCoreNumber);
#pragma omp parallel for reduction(+:cnt0,cnt1,cnt2,cnt3)
	for (int64_t exper = 0; exper < datasize; exper++)
	{
		TYPE input[16] = { 0 }; for (auto i = 0; i < 16; i++) input[i] = (dis(gen)) & 0xffffffff;
		bool bitIn[4] = { 0 };
		for (int pt = 0; pt < 4; pt++)
		{
			for (auto i = 4 * pt; i < 4 * (pt + 1); i++)
			{
				uint32_t mask = inMask[i];
				if (mask) bitIn[pt] ^= innerPro(mask, input[i], 32);
			}
		}
		__m128i in[4], out[4];
		for (auto i = 0; i < 4; i++)
		{
			in[i] = _mm_set_epi32(input[12 + ((3 + i) % 4)], input[8 + ((2 + i) % 4)], input[4 + ((1 + i) % 4)], input[i]);
		}
		salsa_r28to32_avx(in, out);
		bool bitOut[4] = { 0 };
		for (int pt = 0; pt < 4; pt++)
		{
			for (auto i = 4 * pt; i < 4 * (pt + 1); i++)
			{
				uint32_t mask = outMask[i];
				if (mask)
				{
					int row, col;
					identifyPos(i, row, col);
					bitOut[pt] ^= getLinComOfInt32FromInt128(out[row], col, mask);
				}
			}
		}
		bool bit[4] = { 0 }; for (int pt = 0; pt < 4; pt++) bit[pt] = bitIn[pt] ^ bitOut[pt];
		if (bit[0] == 0) cnt0++; else cnt0--;
		if (bit[1] == 0) cnt1++; else cnt1--;
		if (bit[2] == 0) cnt2++; else cnt2--;
		if (bit[3] == 0) cnt3++; else cnt3--;
	}
	cnt0 = cnt0 / datasize; cnt1 = cnt1 / datasize; cnt2 = cnt2 / datasize; cnt3 = cnt3 / datasize;
	double cor0 = log(abs(cnt0)) / log(2), cor1 = log(abs(cnt1)) / log(2), cor2 = log(abs(cnt2)) / log(2), cor3 = log(abs(cnt3)) / log(2);

	for (int pt = 0; pt < 4; pt++)
	{
		for (auto i = 4 * pt; i < 4 * (pt + 1); i++)
		{
			uint32_t v = inMask[i];
			if (v)
			{
				cout << i << ":["; fout << i << ":[";
				for (auto j = 31; j >= 0; j--)
					if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
				cout << "],"; fout << "],";
			}
		} cout << "-->"; fout << "-->";
		for (auto i = 4 * pt; i < 4 * (pt + 1); i++)
		{
			uint32_t v = outMask[i];
			if (v)
			{
				cout << i << ":["; fout << i << ":[";
				for (auto j = 31; j >= 0; j--)
					if (bit64(v, j)) { cout << j << ","; fout << j << ","; }
				cout << "],"; fout << "],";
			}
		}
		if (pt == 0) { cout << cnt0 << ", " << cor0 << endl; fout << cnt0 << ", " << cor0 << endl; }
		if (pt == 1) { cout << cnt1 << ", " << cor1 << endl; fout << cnt1 << ", " << cor1 << endl; }
		if (pt == 2) { cout << cnt2 << ", " << cor2 << endl; fout << cnt2 << ", " << cor2 << endl; }
		if (pt == 3) { cout << cnt3 << ", " << cor3 << endl; fout << cnt3 << ", " << cor3 << endl; }
	}
	double totCor = cor0 + cor1 + cor2 + cor3;
	cout << totCor << endl; fout << totCor << endl;
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
	fout << "Multi time: " << end_time - start_time << endl;
	fout.close();

}

int main()
{
#if 1 // prepare R1 to R3.5 sub
	int start = 2, end = 7;
	uint32_t diff[16] = { 0 }; diff[7] = ((uint64_t)1 << 31);  diff[11] = ((uint64_t)1 << 12); diff[15] = ((uint64_t)1 << 30) ^ ((uint64_t)1 << 17);
	double datasize = pow(2, 25);
	float start_time = omp_get_wtime();
	//for (auto i = 0; i < 32; i++)
	{
		string fileName = "Salsa 2.5DL(R1 to R3.5)SUB, given diff.txt";
		vector< vector<double>> cnt = getSalsaSubForGivenDiffandAllSingleBitMasks_avx_r4r14(fileName, diff, datasize);
	}
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
#endif

#if 0 // prepare R1 to R3.75 sub, inDiff R0: v7(31)
	int start = 2, end = 7.5;
	uint32_t diff[16] = { 0 }; diff[7] = ((uint64_t)1 << 31);  diff[11] = ((uint64_t)1 << 12); diff[15] = ((uint64_t)1 << 30) ^ ((uint64_t)1 << 17);
	double datasize = pow(2, 35);
	float start_time = omp_get_wtime();
	//for (auto i = 0; i < 32; i++)
	{
		string fileName = "Salsa 2.75DL(R1 to R3.75)SUB, given diff.txt";
		vector< vector<double>> cnt = getSalsaSubForGivenDiffandAllSingleBitMasks_avx_r4r15(fileName, diff, datasize);
	}
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
#endif

#if 0 // prepare R1 to R3.75 sub
	int start = 2, end = 7.5;
	double datasize = pow(2, 31);
	float start_time = omp_get_wtime();
	for (auto i = 0; i < 32; i++)
	{
		string fileName = "Salsa 2.75DL(R1 to R3.75)SUB, single-bit diff at R0 v7_" + to_string(i) + ".txt";
		vector< vector<double>> cnt = getSalsaSubForGivenDiffandAllSingleBitMasks_avx_r4r15(fileName, all32NextDiffR2inDiffatPos7[i].diffVal, datasize);
	}
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
#endif

#if 0//verify R1 to R4 DL 
	uint32_t diff[16] = { 0 }; diff[7] = ((uint64_t)1 << 31);  diff[11] = ((uint64_t)1 << 12); diff[15] = ((uint64_t)1 << 30) ^ ((uint64_t)1 << 17);
	uint32_t MaskPos0to511 = 32 * 12 + 0;
	double datasize = pow(2, 30);
	float start_time = omp_get_wtime();
	string fileName = "Salsa 3DL(R1 to R4) verify, end mask at R5 v47.txt";
	getSalsaExpDlCorGivenDiffandOneSingleBitMask_r4r16(fileName, diff, MaskPos0to511, datasize);
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
#endif

#if 0//verify R1 to R4 DL
	uint32_t diff[16] = { 0 }; diff[7] = ((uint64_t)1 << 31);  diff[11] = ((uint64_t)1 << 12); diff[15] = ((uint64_t)1 << 30) ^ ((uint64_t)1 << 17);
	uint32_t MaskPos0to511[3] = { 32 * 15 + 0, 32 * 3 + 7, 32 * 11 + 0 };
	double datasize = pow(2, 30);
	float start_time = omp_get_wtime();
	string fileName = "Salsa 3DL(R1 to R4) verify, end mask at R5 v37.txt";
	getSalsaExpDlCorGivenDiffandThreeSingleBitMask_r4r16(fileName, diff, MaskPos0to511, datasize);
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
#endif

#if 0
	uint32_t maskR5[16] = { 0 }; maskR5[4] = ((uint64_t)1 << 7);
	uint32_t maskR7[16] = { 0x1, 0, 0x3000, 0x20000, 0x80080, 0, 0x4000000, 0x86000000, 0xc6000, 0, 0, 0xc0000000, 0x4001, 0, 0x2000, 0x20000 };
	uint32_t maskR7ac22[16] = { 0x1, 0, 0x3000, 0x20000, 0xc0080, 0, 0x6000000, 0x84000000, 0x86000, 0, 0, 0x80000000, 0x4001, 0, 0x3000, 0x30000 };
	uint32_t maskR8[16] = { 0x11, 0x8, 0x45010, 0x44000, 0x92, 0x680000, 0x420000, 0x80000012, 0x1006860, 0x880040, 0x1000420, 0xc0000820, 0x4005000, 0xc4301081, 0x83202000, 0x2020080 };
	uint32_t maskR8ac22[16] = { 0x19, 0, 0x65010, 0x44000, 0x80000093, 0x6f0000, 0x420000, 0x13, 0x1046840, 0xc0040, 0x1800630, 0x80000830, 0xc6005800, 0x44201081, 0xc2203000, 0x30300c0 };
	double datasize = pow(2, 33);
	float start_time = omp_get_wtime();
	string fileName = "Salsa 3LC(R5 to R8) verify, input mask at R5 v47.txt";
	getSalsaExpLcCorGivenInOutMasks_r20r28(fileName, maskR5, maskR7, datasize);
	getSalsaExpLcCorGivenInOutMasks_r28r32_partition(fileName, maskR7, maskR8, datasize);
	float end_time = omp_get_wtime();
	std::printf("Multi time: %f\n", end_time - start_time);
#endif

#if 0//test LCs for R5-->R8(-31): partition R5-->R7(-6), R7-->R8 (-25)
	string fileName = "Salsa 3LC(R5 to R8) verify.txt";
	uint32_t outMask_r20_r32_multiple[31][13][16] = { { {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x44010,0x44000,0x80000092,0x6b0000,0x420000,0x12,0x1006860,0x80040,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x64010,0x64000,0x80000092,0x6b0000,0x420000,0x12,0x1806860,0x880040,0x1000420,0x80000c20,0x4005000,0x842010c1,0x83302040,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x44010,0x44000,0x80000092,0x6b0000,0x420000,0x12,0x1846840,0x8c0060,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x44010,0x44000,0xc0000092,0x6b0000,0x420000,0x40000012,0x1006860,0x80040,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x44010,0x44000,0xc0000092,0x6b0000,0x420000,0x40000013,0x1006860,0x80040,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x8,0x2018,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x8,0x44018,0x44000,0x80000092,0x6b0000,0x420000,0x12,0x1006860,0x80040,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x44010,0x44000,0x80000092,0x6b0000,0x420000,0x13,0x1006860,0x80040,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x8,0x2018,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x8,0x44018,0x44000,0xc0000092,0x6b0000,0x420000,0x40000013,0x1006860,0x80040,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x8,0x2018,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x8,0x44018,0x44000,0x80000092,0x6b0000,0x420000,0x13,0x1006860,0x80040,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x8,0x2018,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x8,0x44018,0x44000,0xc0000092,0x6b0000,0x420000,0x40000012,0x1006860,0x80040,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x44010,0x44000,0xc0000092,0x6b0000,0x420000,0x40000012,0x1046860,0xc0040,0x1000420,0x80000c20,0x4005000,0xc4201081,0xc3302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc4000,0x0,0x0,0x80000000,0x6001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc4000,0x1800000,0x1000000,0x80000000,0x6001,0x0,0x3002080,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6a0000,0x6430000,0x84000000,0xc4000,0x1800000,0x1000620,0x80000630,0x6001,0x0,0x3002080,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6a0000,0x430000,0x80000000,0xc4800,0x1800000,0x1000620,0x80000e30,0x6007000,0x4001001,0x3002080,0x2030080}, {0x11,0x0,0x44010,0x44000,0xc0000092,0x6a0000,0x430000,0x12,0x1004860,0x880040,0x1000620,0x80000e30,0x6007000,0xc43010c1,0xc3202000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x8,0x2018,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x8,0x44018,0x44000,0xc0000093,0x6b0000,0x420000,0x40000012,0x1006860,0x80040,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0xe0000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6c0000,0x6430000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6c0000,0x430000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x44010,0x44000,0x92,0x6c0000,0x430000,0x80000012,0x1006840,0x80060,0x1000420,0x80000c20,0x4005000,0xc4301081,0xc3202000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0xe0000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6c0000,0x6430000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6c0000,0x430000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x44010,0x44000,0x92,0x6c0000,0x430000,0x80000012,0x1006840,0x80060,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0xe0000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6c0000,0x6430000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6c0000,0x430000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x44010,0x44000,0x92,0x6c0000,0x430000,0x80000013,0x1006840,0x80060,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0xe0000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6c0000,0x6430000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6c0000,0x430000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x46010,0x46000,0x92,0x6c0000,0x430000,0x80000012,0x1006840,0x80060,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0xe0000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6c0000,0x6430000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6c0000,0x430000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x46010,0x46000,0x92,0x6c0000,0x430000,0x80000013,0x1006840,0x80060,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x66010,0x66000,0x80000092,0x6b0000,0x420000,0x12,0x1806860,0x880040,0x1000420,0x80000c20,0x4005000,0x842010c1,0x83302040,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x6005800,0x6001801,0x30020c0,0x2030080}, {0x11,0x0,0x64010,0x64000,0x8000009b,0x6b0000,0x420000,0x1a,0x1806860,0x880040,0x1000420,0x80000c20,0x6005800,0xc62018c1,0xc3302040,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005800,0x4001801,0x30020c0,0x2030080}, {0x11,0x0,0x66010,0x66000,0xc000009b,0x6b0000,0x420000,0x4000001a,0x1806860,0x880040,0x1000420,0x80000c20,0x4005800,0x84201881,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005800,0x4001801,0x30020c0,0x2030080}, {0x11,0x0,0x66010,0x66000,0x8000009b,0x6b0000,0x420000,0x1a,0x1006860,0x80040,0x1000420,0x80000c20,0x4005800,0x84201881,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x46010,0x46000,0x80000092,0x6b0000,0x420000,0x12,0x1006860,0x80040,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x44010,0x44000,0xc0000092,0x6b0000,0x420000,0x40000012,0x1046840,0xc0060,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x44010,0x44000,0xc0000092,0x6b0000,0x420000,0x40000012,0x1046840,0xc0060,0x1000420,0x80000c20,0x4005000,0xc4201081,0xc3302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x44010,0x44000,0xc0000092,0x6b0000,0x420000,0x40000012,0x1046860,0xc0040,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x44010,0x44000,0xc0000092,0x6b0000,0x420000,0x40000012,0x1046840,0xc0060,0x1000420,0x80000c20,0x4005000,0x84301081,0x83202000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x44010,0x44000,0xc0000092,0x6b0000,0x420000,0x40000012,0x1006840,0x80060,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x4000000,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x4000000,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x4000000,0x6000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x30000,0x80,0x0,0x4000000,0x6000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x3000,0x30000,0xc0080,0x0,0x4000000,0x6000000,0x80000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x3000,0x30000,0xc0080,0x0,0x4000000,0x86000000,0x84000,0x0,0x0,0x80000000,0x6001,0x0,0x2000,0x30000}, {0x1,0x0,0x3000,0x30000,0x80,0x80000,0x4000000,0x86000000,0x84000,0x1000000,0x1800000,0x80000000,0x6001,0x0,0x2002080,0x3030080}, {0x11,0x10,0x3000,0x30000,0x80,0x6b0000,0x4430000,0x86000000,0x84000,0x1000000,0x1800630,0x80000420,0x6001,0x0,0x2002080,0x3030080}, {0x11,0x0,0x3010,0x30000,0x80,0x6b0000,0x2430000,0x82000000,0x84800,0x1000000,0x1800630,0x80000820,0x6007800,0x4001001,0x2002080,0x3030080}, {0x11,0x0,0x67010,0x76000,0x80000092,0x6b0000,0x2430000,0x2000012,0x1004840,0x80040,0x1800630,0x80000820,0x6007800,0x84301081,0x82202000,0x3030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x44010,0x44000,0xc0000092,0x6b0000,0x420000,0x40000013,0x1046840,0xc0060,0x1000420,0x80000c20,0x4005000,0x84201081,0x83302000,0x2030080}},
{ {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x0,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, {0x1,0x0,0x0,0x0,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0}, {0x1,0x0,0x0,0x20000,0x80,0x0,0x6000000,0x4000000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x4000000,0xc0000,0x0,0x0,0x0,0x1,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80080,0x0,0x6000000,0x84000000,0xc6000,0x0,0x0,0x80000000,0x4001,0x0,0x2000,0x30000}, {0x1,0x0,0x2000,0x20000,0x80,0x80000,0x6000000,0x84000000,0xc6000,0x1800000,0x1000000,0x80000000,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x18,0x2000,0x20000,0x80,0x6b0000,0x6420000,0x84000000,0xc6000,0x1800000,0x1000420,0x80000420,0x4001,0x0,0x30020c0,0x2030080}, {0x11,0x0,0x2010,0x20000,0x80,0x6b0000,0x420000,0x80000000,0xc6800,0x1800000,0x1000420,0x80000c20,0x4005000,0x4001001,0x30020c0,0x2030080}, {0x11,0x0,0x46010,0x46000,0x80000092,0x6b0000,0x420000,0x13,0x1046840,0xc0060,0x1000420,0x80000c20,0x4005000,0xc42010c1,0xc3302040,0x2030080}} };
	//int toChooseIdx[6] = { 20,23,24,25,27,31 };
	double data[5] = { pow(2,32), pow(2,30), pow(2,30),pow(2,30),pow(2,35) };
	for (auto i = 0; i < 31; i++)
	{
		getSalsaExpLcCorGivenInOutMasks_r20r28(fileName, outMask_r20_r32_multiple[i][0], outMask_r20_r32_multiple[i][8], pow(2, 34));
		getSalsaExpLcCorGivenInOutMasks_r28r32_partition(fileName, outMask_r20_r32_multiple[i][8], outMask_r20_r32_multiple[i][12], pow(2, 34));
	}

#endif
}
